
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  000063e4  00006478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800196  00800196  000065ae  2**0
                  ALLOC
  3 .stab         0000627c  00000000  00000000  000065b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025b2  00000000  00000000  0000c82c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000edde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000ef5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000f12f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0001113f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  000122a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000132a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00013444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00013702  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_1>
       8:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__vector_2>
       c:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_10>
      2c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f3 e6       	ldi	r31, 0x63	; 99
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <main>
      8a:	0c 94 f0 31 	jmp	0x63e0	; 0x63e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 2f 	jmp	0x5e6e	; 0x5e6e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 2f 	jmp	0x5e6e	; 0x5e6e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 37 2f 	jmp	0x5e6e	; 0x5e6e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 37 2f 	jmp	0x5e6e	; 0x5e6e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 37 2f 	jmp	0x5e6e	; 0x5e6e <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e6 58       	subi	r30, 0x86	; 134
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     ca8:	a1 e4       	ldi	r26, 0x41	; 65
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 e4       	ldi	r30, 0x41	; 65
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     cb6:	a1 e4       	ldi	r26, 0x41	; 65
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e4       	ldi	r30, 0x41	; 65
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     cc4:	a1 e4       	ldi	r26, 0x41	; 65
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e4       	ldi	r30, 0x41	; 65
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     cd2:	a1 e4       	ldi	r26, 0x41	; 65
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e4       	ldi	r30, 0x41	; 65
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <WDT_voidDisable>:

void WDT_voidDisable(void){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     cee:	a1 e4       	ldi	r26, 0x41	; 65
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e1 e4       	ldi	r30, 0x41	; 65
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     cfc:	a1 e4       	ldi	r26, 0x41	; 65
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e4       	ldi	r30, 0x41	; 65
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 61       	ori	r24, 0x10	; 16
     d08:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
     d1e:	a3 e5       	ldi	r26, 0x53	; 83
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e3 e5       	ldi	r30, 0x53	; 83
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
     d3a:	a3 e5       	ldi	r26, 0x53	; 83
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e3 e5       	ldi	r30, 0x53	; 83
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 62       	ori	r24, 0x20	; 32
     d46:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
     d48:	a3 e5       	ldi	r26, 0x53	; 83
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e3 e5       	ldi	r30, 0x53	; 83
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 61       	ori	r24, 0x10	; 16
     d54:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
     d56:	a3 e5       	ldi	r26, 0x53	; 83
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e3 e5       	ldi	r30, 0x53	; 83
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
     d64:	a3 e5       	ldi	r26, 0x53	; 83
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e3 e5       	ldi	r30, 0x53	; 83
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
     d72:	a3 e5       	ldi	r26, 0x53	; 83
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e3 e5       	ldi	r30, 0x53	; 83
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8b 7f       	andi	r24, 0xFB	; 251
     d7e:	8c 93       	st	X, r24
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
     d8e:	af e4       	ldi	r26, 0x4F	; 79
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ef e4       	ldi	r30, 0x4F	; 79
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	82 60       	ori	r24, 0x02	; 2
     d9a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
     d9c:	af e4       	ldi	r26, 0x4F	; 79
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ef e4       	ldi	r30, 0x4F	; 79
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8e 7f       	andi	r24, 0xFE	; 254
     da8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
     daa:	ae e4       	ldi	r26, 0x4E	; 78
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ee e4       	ldi	r30, 0x4E	; 78
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	88 60       	ori	r24, 0x08	; 8
     db6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
     db8:	ae e4       	ldi	r26, 0x4E	; 78
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ee e4       	ldi	r30, 0x4E	; 78
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	80 61       	ori	r24, 0x10	; 16
     dc4:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
     dc6:	af e4       	ldi	r26, 0x4F	; 79
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ef e4       	ldi	r30, 0x4F	; 79
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	80 68       	ori	r24, 0x80	; 128
     dd2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
     dd4:	af e4       	ldi	r26, 0x4F	; 79
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	ef e4       	ldi	r30, 0x4F	; 79
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	8f 7b       	andi	r24, 0xBF	; 191
     de0:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
     de2:	e6 e4       	ldi	r30, 0x46	; 70
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	8f e1       	ldi	r24, 0x1F	; 31
     de8:	9e e4       	ldi	r25, 0x4E	; 78
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = Selected_Angle;
     dee:	ea e4       	ldi	r30, 0x4A	; 74
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	8f ec       	ldi	r24, 0xCF	; 207
     df4:	97 e0       	ldi	r25, 0x07	; 7
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
     dfa:	ae e4       	ldi	r26, 0x4E	; 78
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ee e4       	ldi	r30, 0x4E	; 78
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
     e08:	ae e4       	ldi	r26, 0x4E	; 78
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ee e4       	ldi	r30, 0x4E	; 78
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	82 60       	ori	r24, 0x02	; 2
     e14:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
     e16:	ae e4       	ldi	r26, 0x4E	; 78
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ee e4       	ldi	r30, 0x4E	; 78
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8b 7f       	andi	r24, 0xFB	; 251
     e22:	8c 93       	st	X, r24
}
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <TIMERS_u8TIMER0SetCallBack+0x6>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9b 83       	std	Y+3, r25	; 0x03
     e38:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	9b 81       	ldd	r25, Y+3	; 0x03
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	39 f0       	breq	.+14     	; 0xe54 <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	90 93 97 01 	sts	0x0197, r25
     e4e:	80 93 96 01 	sts	0x0196, r24
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     e54:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <TIMERS_u8TIMER0CTCSetCallBack+0x6>
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	9b 81       	ldd	r25, Y+3	; 0x03
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	39 f0       	breq	.+14     	; 0xe8e <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	90 93 99 01 	sts	0x0199, r25
     e88:	80 93 98 01 	sts	0x0198, r24
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     e8e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     eaa:	ec e5       	ldi	r30, 0x5C	; 92
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	80 83       	st	Z, r24
	
}
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
     ec6:	e2 e5       	ldi	r30, 0x52	; 82
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	80 83       	st	Z, r24
}
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
     ee4:	ea e4       	ldi	r30, 0x4A	; 74
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <TIMERS_voidTIMER1SetTimerValue+0x6>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
     f08:	ec e4       	ldi	r30, 0x4C	; 76
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
     f26:	ec e4       	ldi	r30, 0x4C	; 76
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     f5e:	80 91 9a 01 	lds	r24, 0x019A
     f62:	90 91 9b 01 	lds	r25, 0x019B
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	90 93 9b 01 	sts	0x019B, r25
     f6c:	80 93 9a 01 	sts	0x019A, r24
	if(Local_u16CounterOVF == 3907){
     f70:	80 91 9a 01 	lds	r24, 0x019A
     f74:	90 91 9b 01 	lds	r25, 0x019B
     f78:	2f e0       	ldi	r18, 0x0F	; 15
     f7a:	83 34       	cpi	r24, 0x43	; 67
     f7c:	92 07       	cpc	r25, r18
     f7e:	99 f4       	brne	.+38     	; 0xfa6 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
     f80:	e2 e5       	ldi	r30, 0x52	; 82
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 ec       	ldi	r24, 0xC0	; 192
     f86:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
     f88:	10 92 9b 01 	sts	0x019B, r1
     f8c:	10 92 9a 01 	sts	0x019A, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
     f90:	80 91 96 01 	lds	r24, 0x0196
     f94:	90 91 97 01 	lds	r25, 0x0197
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
     f9c:	e0 91 96 01 	lds	r30, 0x0196
     fa0:	f0 91 97 01 	lds	r31, 0x0197
     fa4:	09 95       	icall
		}
	}
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     ff6:	80 91 9c 01 	lds	r24, 0x019C
     ffa:	90 91 9d 01 	lds	r25, 0x019D
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	90 93 9d 01 	sts	0x019D, r25
    1004:	80 93 9c 01 	sts	0x019C, r24
	if(Local_u16CounterCTC == 10000){
    1008:	80 91 9c 01 	lds	r24, 0x019C
    100c:	90 91 9d 01 	lds	r25, 0x019D
    1010:	27 e2       	ldi	r18, 0x27	; 39
    1012:	80 31       	cpi	r24, 0x10	; 16
    1014:	92 07       	cpc	r25, r18
    1016:	79 f4       	brne	.+30     	; 0x1036 <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
    1018:	10 92 9d 01 	sts	0x019D, r1
    101c:	10 92 9c 01 	sts	0x019C, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
    1020:	80 91 98 01 	lds	r24, 0x0198
    1024:	90 91 99 01 	lds	r25, 0x0199
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	29 f0       	breq	.+10     	; 0x1036 <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
    102c:	e0 91 98 01 	lds	r30, 0x0198
    1030:	f0 91 99 01 	lds	r31, 0x0199
    1034:	09 95       	icall
		}
	}
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <Switch_Init+0x6>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <Switch_Init+0x8>
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9c 83       	std	Y+4, r25	; 0x04
    106c:	8b 83       	std	Y+3, r24	; 0x03
    106e:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    1070:	1a 82       	std	Y+2, r1	; 0x02
    1072:	19 82       	std	Y+1, r1	; 0x01
    1074:	50 c0       	rjmp	.+160    	; 0x1116 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    1076:	29 81       	ldd	r18, Y+1	; 0x01
    1078:	3a 81       	ldd	r19, Y+2	; 0x02
    107a:	c9 01       	movw	r24, r18
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	28 0f       	add	r18, r24
    1082:	39 1f       	adc	r19, r25
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	fc 01       	movw	r30, r24
    108a:	e2 0f       	add	r30, r18
    108c:	f3 1f       	adc	r31, r19
    108e:	40 81       	ld	r20, Z
    1090:	29 81       	ldd	r18, Y+1	; 0x01
    1092:	3a 81       	ldd	r19, Y+2	; 0x02
    1094:	c9 01       	movw	r24, r18
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	28 0f       	add	r18, r24
    109c:	39 1f       	adc	r19, r25
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	fc 01       	movw	r30, r24
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	84 2f       	mov	r24, r20
    10ac:	69 2f       	mov	r22, r25
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    10b4:	29 81       	ldd	r18, Y+1	; 0x01
    10b6:	3a 81       	ldd	r19, Y+2	; 0x02
    10b8:	c9 01       	movw	r24, r18
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	28 0f       	add	r18, r24
    10c0:	39 1f       	adc	r19, r25
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	fc 01       	movw	r30, r24
    10c8:	e2 0f       	add	r30, r18
    10ca:	f3 1f       	adc	r31, r19
    10cc:	50 81       	ld	r21, Z
    10ce:	29 81       	ldd	r18, Y+1	; 0x01
    10d0:	3a 81       	ldd	r19, Y+2	; 0x02
    10d2:	c9 01       	movw	r24, r18
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	28 0f       	add	r18, r24
    10da:	39 1f       	adc	r19, r25
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	fc 01       	movw	r30, r24
    10e2:	e2 0f       	add	r30, r18
    10e4:	f3 1f       	adc	r31, r19
    10e6:	41 81       	ldd	r20, Z+1	; 0x01
    10e8:	29 81       	ldd	r18, Y+1	; 0x01
    10ea:	3a 81       	ldd	r19, Y+2	; 0x02
    10ec:	c9 01       	movw	r24, r18
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	28 0f       	add	r18, r24
    10f4:	39 1f       	adc	r19, r25
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	92 81       	ldd	r25, Z+2	; 0x02
    1102:	85 2f       	mov	r24, r21
    1104:	64 2f       	mov	r22, r20
    1106:	49 2f       	mov	r20, r25
    1108:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	82 17       	cp	r24, r18
    1122:	93 07       	cpc	r25, r19
    1124:	0c f4       	brge	.+2      	; 0x1128 <Switch_Init+0xcc>
    1126:	a7 cf       	rjmp	.-178    	; 0x1076 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <Switch_GetValue+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <Switch_GetValue+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	7c 83       	std	Y+4, r23	; 0x04
    114a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    114c:	e9 81       	ldd	r30, Y+1	; 0x01
    114e:	fa 81       	ldd	r31, Y+2	; 0x02
    1150:	80 81       	ld	r24, Z
    1152:	e9 81       	ldd	r30, Y+1	; 0x01
    1154:	fa 81       	ldd	r31, Y+2	; 0x02
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	69 2f       	mov	r22, r25
    115e:	a9 01       	movw	r20, r18
    1160:	0e 94 07 11 	call	0x220e	; 0x220e <DIO_u8GetPinValue>
}
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <LCD_setPinDirection+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <LCD_setPinDirection+0x8>
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	6a 83       	std	Y+2, r22	; 0x02
    1184:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	88 30       	cpi	r24, 0x08	; 8
    118a:	08 f0       	brcs	.+2      	; 0x118e <LCD_setPinDirection+0x1c>
    118c:	d5 c0       	rjmp	.+426    	; 0x1338 <LCD_setPinDirection+0x1c6>
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	08 f0       	brcs	.+2      	; 0x1196 <LCD_setPinDirection+0x24>
    1194:	d1 c0       	rjmp	.+418    	; 0x1338 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3d 83       	std	Y+5, r19	; 0x05
    119e:	2c 83       	std	Y+4, r18	; 0x04
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <LCD_setPinDirection+0x3a>
    11aa:	43 c0       	rjmp	.+134    	; 0x1232 <LCD_setPinDirection+0xc0>
    11ac:	2c 81       	ldd	r18, Y+4	; 0x04
    11ae:	3d 81       	ldd	r19, Y+5	; 0x05
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <LCD_setPinDirection+0x4e>
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	71 f0       	breq	.+28     	; 0x11da <LCD_setPinDirection+0x68>
    11be:	bc c0       	rjmp	.+376    	; 0x1338 <LCD_setPinDirection+0x1c6>
    11c0:	2c 81       	ldd	r18, Y+4	; 0x04
    11c2:	3d 81       	ldd	r19, Y+5	; 0x05
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	09 f4       	brne	.+2      	; 0x11cc <LCD_setPinDirection+0x5a>
    11ca:	5f c0       	rjmp	.+190    	; 0x128a <LCD_setPinDirection+0x118>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <LCD_setPinDirection+0x66>
    11d6:	85 c0       	rjmp	.+266    	; 0x12e2 <LCD_setPinDirection+0x170>
    11d8:	af c0       	rjmp	.+350    	; 0x1338 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	a1 f4       	brne	.+40     	; 0x1208 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11e0:	aa e3       	ldi	r26, 0x3A	; 58
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <LCD_setPinDirection+0x8c>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <LCD_setPinDirection+0x88>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	98 c0       	rjmp	.+304    	; 0x1338 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    1208:	aa e3       	ldi	r26, 0x3A	; 58
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ea e3       	ldi	r30, 0x3A	; 58
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <LCD_setPinDirection+0xb4>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <LCD_setPinDirection+0xb0>
    122a:	80 95       	com	r24
    122c:	84 23       	and	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	83 c0       	rjmp	.+262    	; 0x1338 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	a1 f4       	brne	.+40     	; 0x1260 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1238:	a7 e3       	ldi	r26, 0x37	; 55
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e7 e3       	ldi	r30, 0x37	; 55
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <LCD_setPinDirection+0xe4>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <LCD_setPinDirection+0xe0>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	6c c0       	rjmp	.+216    	; 0x1338 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    1260:	a7 e3       	ldi	r26, 0x37	; 55
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e7 e3       	ldi	r30, 0x37	; 55
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <LCD_setPinDirection+0x10c>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <LCD_setPinDirection+0x108>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	57 c0       	rjmp	.+174    	; 0x1338 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1290:	a4 e3       	ldi	r26, 0x34	; 52
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e4 e3       	ldi	r30, 0x34	; 52
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <LCD_setPinDirection+0x13c>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <LCD_setPinDirection+0x138>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	40 c0       	rjmp	.+128    	; 0x1338 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    12b8:	a4 e3       	ldi	r26, 0x34	; 52
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e4 e3       	ldi	r30, 0x34	; 52
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <LCD_setPinDirection+0x164>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <LCD_setPinDirection+0x160>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	2b c0       	rjmp	.+86     	; 0x1338 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12e8:	a1 e3       	ldi	r26, 0x31	; 49
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e1 e3       	ldi	r30, 0x31	; 49
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <LCD_setPinDirection+0x194>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <LCD_setPinDirection+0x190>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    1310:	a1 e3       	ldi	r26, 0x31	; 49
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e1 e3       	ldi	r30, 0x31	; 49
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <LCD_setPinDirection+0x1bc>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <LCD_setPinDirection+0x1b8>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <LCD_setPinValue+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <LCD_setPinValue+0x8>
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	6a 83       	std	Y+2, r22	; 0x02
    135a:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	08 f0       	brcs	.+2      	; 0x1364 <LCD_setPinValue+0x1c>
    1362:	d5 c0       	rjmp	.+426    	; 0x150e <LCD_setPinValue+0x1c6>
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	08 f0       	brcs	.+2      	; 0x136c <LCD_setPinValue+0x24>
    136a:	d1 c0       	rjmp	.+418    	; 0x150e <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3d 83       	std	Y+5, r19	; 0x05
    1374:	2c 83       	std	Y+4, r18	; 0x04
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 05       	cpc	r25, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <LCD_setPinValue+0x3a>
    1380:	43 c0       	rjmp	.+134    	; 0x1408 <LCD_setPinValue+0xc0>
    1382:	2c 81       	ldd	r18, Y+4	; 0x04
    1384:	3d 81       	ldd	r19, Y+5	; 0x05
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <LCD_setPinValue+0x4e>
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	71 f0       	breq	.+28     	; 0x13b0 <LCD_setPinValue+0x68>
    1394:	bc c0       	rjmp	.+376    	; 0x150e <LCD_setPinValue+0x1c6>
    1396:	2c 81       	ldd	r18, Y+4	; 0x04
    1398:	3d 81       	ldd	r19, Y+5	; 0x05
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <LCD_setPinValue+0x5a>
    13a0:	5f c0       	rjmp	.+190    	; 0x1460 <LCD_setPinValue+0x118>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <LCD_setPinValue+0x66>
    13ac:	85 c0       	rjmp	.+266    	; 0x14b8 <LCD_setPinValue+0x170>
    13ae:	af c0       	rjmp	.+350    	; 0x150e <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	a1 f4       	brne	.+40     	; 0x13de <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13b6:	ab e3       	ldi	r26, 0x3B	; 59
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	eb e3       	ldi	r30, 0x3B	; 59
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <LCD_setPinValue+0x8c>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <LCD_setPinValue+0x88>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	98 c0       	rjmp	.+304    	; 0x150e <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    13de:	ab e3       	ldi	r26, 0x3B	; 59
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <LCD_setPinValue+0xb4>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <LCD_setPinValue+0xb0>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	83 c0       	rjmp	.+262    	; 0x150e <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	a1 f4       	brne	.+40     	; 0x1436 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    140e:	a8 e3       	ldi	r26, 0x38	; 56
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e8 e3       	ldi	r30, 0x38	; 56
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <LCD_setPinValue+0xe4>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <LCD_setPinValue+0xe0>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	6c c0       	rjmp	.+216    	; 0x150e <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    1436:	a8 e3       	ldi	r26, 0x38	; 56
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e8 e3       	ldi	r30, 0x38	; 56
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <LCD_setPinValue+0x10c>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <LCD_setPinValue+0x108>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	57 c0       	rjmp	.+174    	; 0x150e <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	a1 f4       	brne	.+40     	; 0x148e <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1466:	a5 e3       	ldi	r26, 0x35	; 53
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e5 e3       	ldi	r30, 0x35	; 53
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <LCD_setPinValue+0x13c>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <LCD_setPinValue+0x138>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	40 c0       	rjmp	.+128    	; 0x150e <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    148e:	a5 e3       	ldi	r26, 0x35	; 53
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e3       	ldi	r30, 0x35	; 53
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <LCD_setPinValue+0x164>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <LCD_setPinValue+0x160>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	2b c0       	rjmp	.+86     	; 0x150e <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	a1 f4       	brne	.+40     	; 0x14e6 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14be:	a2 e3       	ldi	r26, 0x32	; 50
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e2 e3       	ldi	r30, 0x32	; 50
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <LCD_setPinValue+0x194>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <LCD_setPinValue+0x190>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    14e6:	a2 e3       	ldi	r26, 0x32	; 50
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e2 e3       	ldi	r30, 0x32	; 50
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <LCD_setPinValue+0x1bc>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <LCD_setPinValue+0x1b8>
    1508:	80 95       	com	r24
    150a:	84 23       	and	r24, r20
    150c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <LCD_getPinValue+0x6>
    1524:	00 d0       	rcall	.+0      	; 0x1526 <LCD_getPinValue+0x8>
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	8a 83       	std	Y+2, r24	; 0x02
    152e:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1530:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 30       	cpi	r24, 0x08	; 8
    1536:	08 f0       	brcs	.+2      	; 0x153a <LCD_getPinValue+0x1c>
    1538:	84 c0       	rjmp	.+264    	; 0x1642 <LCD_getPinValue+0x124>
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	84 30       	cpi	r24, 0x04	; 4
    153e:	08 f0       	brcs	.+2      	; 0x1542 <LCD_getPinValue+0x24>
    1540:	80 c0       	rjmp	.+256    	; 0x1642 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3d 83       	std	Y+5, r19	; 0x05
    154a:	2c 83       	std	Y+4, r18	; 0x04
    154c:	4c 81       	ldd	r20, Y+4	; 0x04
    154e:	5d 81       	ldd	r21, Y+5	; 0x05
    1550:	41 30       	cpi	r20, 0x01	; 1
    1552:	51 05       	cpc	r21, r1
    1554:	79 f1       	breq	.+94     	; 0x15b4 <LCD_getPinValue+0x96>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	91 05       	cpc	r25, r1
    155e:	34 f4       	brge	.+12     	; 0x156c <LCD_getPinValue+0x4e>
    1560:	2c 81       	ldd	r18, Y+4	; 0x04
    1562:	3d 81       	ldd	r19, Y+5	; 0x05
    1564:	21 15       	cp	r18, r1
    1566:	31 05       	cpc	r19, r1
    1568:	69 f0       	breq	.+26     	; 0x1584 <LCD_getPinValue+0x66>
    156a:	6b c0       	rjmp	.+214    	; 0x1642 <LCD_getPinValue+0x124>
    156c:	4c 81       	ldd	r20, Y+4	; 0x04
    156e:	5d 81       	ldd	r21, Y+5	; 0x05
    1570:	42 30       	cpi	r20, 0x02	; 2
    1572:	51 05       	cpc	r21, r1
    1574:	b9 f1       	breq	.+110    	; 0x15e4 <LCD_getPinValue+0xc6>
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	91 05       	cpc	r25, r1
    157e:	09 f4       	brne	.+2      	; 0x1582 <LCD_getPinValue+0x64>
    1580:	49 c0       	rjmp	.+146    	; 0x1614 <LCD_getPinValue+0xf6>
    1582:	5f c0       	rjmp	.+190    	; 0x1642 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1584:	e9 e3       	ldi	r30, 0x39	; 57
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <LCD_getPinValue+0x7e>
    1598:	55 95       	asr	r21
    159a:	47 95       	ror	r20
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <LCD_getPinValue+0x7a>
    15a0:	ca 01       	movw	r24, r20
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	90 70       	andi	r25, 0x00	; 0
    15a6:	88 23       	and	r24, r24
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	49 c0       	rjmp	.+146    	; 0x1642 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	47 c0       	rjmp	.+142    	; 0x1642 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15b4:	e6 e3       	ldi	r30, 0x36	; 54
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <LCD_getPinValue+0xae>
    15c8:	55 95       	asr	r21
    15ca:	47 95       	ror	r20
    15cc:	8a 95       	dec	r24
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <LCD_getPinValue+0xaa>
    15d0:	ca 01       	movw	r24, r20
    15d2:	81 70       	andi	r24, 0x01	; 1
    15d4:	90 70       	andi	r25, 0x00	; 0
    15d6:	88 23       	and	r24, r24
    15d8:	19 f0       	breq	.+6      	; 0x15e0 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	31 c0       	rjmp	.+98     	; 0x1642 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15e0:	19 82       	std	Y+1, r1	; 0x01
    15e2:	2f c0       	rjmp	.+94     	; 0x1642 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15e4:	e3 e3       	ldi	r30, 0x33	; 51
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a9 01       	movw	r20, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <LCD_getPinValue+0xde>
    15f8:	55 95       	asr	r21
    15fa:	47 95       	ror	r20
    15fc:	8a 95       	dec	r24
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <LCD_getPinValue+0xda>
    1600:	ca 01       	movw	r24, r20
    1602:	81 70       	andi	r24, 0x01	; 1
    1604:	90 70       	andi	r25, 0x00	; 0
    1606:	88 23       	and	r24, r24
    1608:	19 f0       	breq	.+6      	; 0x1610 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1610:	19 82       	std	Y+1, r1	; 0x01
    1612:	17 c0       	rjmp	.+46     	; 0x1642 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1614:	e0 e3       	ldi	r30, 0x30	; 48
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a9 01       	movw	r20, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <LCD_getPinValue+0x10e>
    1628:	55 95       	asr	r21
    162a:	47 95       	ror	r20
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <LCD_getPinValue+0x10a>
    1630:	ca 01       	movw	r24, r20
    1632:	81 70       	andi	r24, 0x01	; 1
    1634:	90 70       	andi	r25, 0x00	; 0
    1636:	88 23       	and	r24, r24
    1638:	19 f0       	breq	.+6      	; 0x1640 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1640:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <LCD_setPortDirection+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <LCD_setPortDirection+0x8>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	90 f5       	brcc	.+100    	; 0x16ce <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3c 83       	std	Y+4, r19	; 0x04
    1672:	2b 83       	std	Y+3, r18	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	d1 f0       	breq	.+52     	; 0x16b2 <LCD_setPortDirection+0x5e>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	2c f4       	brge	.+10     	; 0x1692 <LCD_setPortDirection+0x3e>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	61 f0       	breq	.+24     	; 0x16a8 <LCD_setPortDirection+0x54>
    1690:	1e c0       	rjmp	.+60     	; 0x16ce <LCD_setPortDirection+0x7a>
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	81 f0       	breq	.+32     	; 0x16bc <LCD_setPortDirection+0x68>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	81 f0       	breq	.+32     	; 0x16c6 <LCD_setPortDirection+0x72>
    16a6:	13 c0       	rjmp	.+38     	; 0x16ce <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16a8:	ea e3       	ldi	r30, 0x3A	; 58
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16b2:	e7 e3       	ldi	r30, 0x37	; 55
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
    16ba:	09 c0       	rjmp	.+18     	; 0x16ce <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16bc:	e4 e3       	ldi	r30, 0x34	; 52
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	80 83       	st	Z, r24
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16c6:	e1 e3       	ldi	r30, 0x31	; 49
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	80 83       	st	Z, r24
			break;
		}
	}
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <LCD_setPortValue+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <LCD_setPortValue+0x8>
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	90 f5       	brcc	.+100    	; 0x1756 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3c 83       	std	Y+4, r19	; 0x04
    16fa:	2b 83       	std	Y+3, r18	; 0x03
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	91 05       	cpc	r25, r1
    1704:	d1 f0       	breq	.+52     	; 0x173a <LCD_setPortValue+0x5e>
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <LCD_setPortValue+0x3e>
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	61 f0       	breq	.+24     	; 0x1730 <LCD_setPortValue+0x54>
    1718:	1e c0       	rjmp	.+60     	; 0x1756 <LCD_setPortValue+0x7a>
    171a:	2b 81       	ldd	r18, Y+3	; 0x03
    171c:	3c 81       	ldd	r19, Y+4	; 0x04
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <LCD_setPortValue+0x68>
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	81 f0       	breq	.+32     	; 0x174e <LCD_setPortValue+0x72>
    172e:	13 c0       	rjmp	.+38     	; 0x1756 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	0e c0       	rjmp	.+28     	; 0x1756 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    173a:	e8 e3       	ldi	r30, 0x38	; 56
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	09 c0       	rjmp	.+18     	; 0x1756 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1744:	e5 e3       	ldi	r30, 0x35	; 53
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    174e:	e2 e3       	ldi	r30, 0x32	; 50
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	80 83       	st	Z, r24
			break;
		}
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <LCD_getPortValue+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <LCD_getPortValue+0x8>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1772:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	90 f5       	brcc	.+100    	; 0x17de <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3c 83       	std	Y+4, r19	; 0x04
    1782:	2b 83       	std	Y+3, r18	; 0x03
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	d1 f0       	breq	.+52     	; 0x17c2 <LCD_getPortValue+0x5e>
    178e:	2b 81       	ldd	r18, Y+3	; 0x03
    1790:	3c 81       	ldd	r19, Y+4	; 0x04
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	2c f4       	brge	.+10     	; 0x17a2 <LCD_getPortValue+0x3e>
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	61 f0       	breq	.+24     	; 0x17b8 <LCD_getPortValue+0x54>
    17a0:	1e c0       	rjmp	.+60     	; 0x17de <LCD_getPortValue+0x7a>
    17a2:	2b 81       	ldd	r18, Y+3	; 0x03
    17a4:	3c 81       	ldd	r19, Y+4	; 0x04
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	81 f0       	breq	.+32     	; 0x17cc <LCD_getPortValue+0x68>
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	91 05       	cpc	r25, r1
    17b4:	81 f0       	breq	.+32     	; 0x17d6 <LCD_getPortValue+0x72>
    17b6:	13 c0       	rjmp	.+38     	; 0x17de <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17b8:	e9 e3       	ldi	r30, 0x39	; 57
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	0e c0       	rjmp	.+28     	; 0x17de <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17c2:	e6 e3       	ldi	r30, 0x36	; 54
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17cc:	e3 e3       	ldi	r30, 0x33	; 51
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17d6:	e0 e3       	ldi	r30, 0x30	; 48
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    17f6:	af e5       	ldi	r26, 0x5F	; 95
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	ef e5       	ldi	r30, 0x5F	; 95
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 68       	ori	r24, 0x80	; 128
    1802:	8c 93       	st	X, r24
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1812:	af e5       	ldi	r26, 0x5F	; 95
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ef e5       	ldi	r30, 0x5F	; 95
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 77       	andi	r24, 0x7F	; 127
    181e:	8c 93       	st	X, r24
}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <setCallBack+0x6>
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	fc 01       	movw	r30, r24
    1844:	e2 56       	subi	r30, 0x62	; 98
    1846:	fe 4f       	sbci	r31, 0xFE	; 254
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1864:	a5 e5       	ldi	r26, 0x55	; 85
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e5 e5       	ldi	r30, 0x55	; 85
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8e 7f       	andi	r24, 0xFE	; 254
    1870:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1872:	a5 e5       	ldi	r26, 0x55	; 85
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e5 e5       	ldi	r30, 0x55	; 85
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8d 7f       	andi	r24, 0xFD	; 253
    187e:	8c 93       	st	X, r24
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    188e:	a5 e5       	ldi	r26, 0x55	; 85
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e5 e5       	ldi	r30, 0x55	; 85
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	82 60       	ori	r24, 0x02	; 2
    189a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    189c:	a5 e5       	ldi	r26, 0x55	; 85
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e5       	ldi	r30, 0x55	; 85
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8e 7f       	andi	r24, 0xFE	; 254
    18a8:	8c 93       	st	X, r24
}
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    18b8:	a5 e5       	ldi	r26, 0x55	; 85
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e5 e5       	ldi	r30, 0x55	; 85
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8d 7f       	andi	r24, 0xFD	; 253
    18c4:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    18c6:	a5 e5       	ldi	r26, 0x55	; 85
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	e5 e5       	ldi	r30, 0x55	; 85
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	81 60       	ori	r24, 0x01	; 1
    18d2:	8c 93       	st	X, r24
}
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    18e2:	a5 e5       	ldi	r26, 0x55	; 85
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e5 e5       	ldi	r30, 0x55	; 85
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	82 60       	ori	r24, 0x02	; 2
    18ee:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    18f0:	a5 e5       	ldi	r26, 0x55	; 85
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e5 e5       	ldi	r30, 0x55	; 85
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	81 60       	ori	r24, 0x01	; 1
    18fc:	8c 93       	st	X, r24
}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    190c:	a5 e5       	ldi	r26, 0x55	; 85
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e5 e5       	ldi	r30, 0x55	; 85
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8b 7f       	andi	r24, 0xFB	; 251
    1918:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    191a:	a5 e5       	ldi	r26, 0x55	; 85
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e5 e5       	ldi	r30, 0x55	; 85
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	87 7f       	andi	r24, 0xF7	; 247
    1926:	8c 93       	st	X, r24
}
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1936:	a5 e5       	ldi	r26, 0x55	; 85
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e5 e5       	ldi	r30, 0x55	; 85
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	88 60       	ori	r24, 0x08	; 8
    1942:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1944:	a5 e5       	ldi	r26, 0x55	; 85
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e5       	ldi	r30, 0x55	; 85
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8b 7f       	andi	r24, 0xFB	; 251
    1950:	8c 93       	st	X, r24
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1960:	a5 e5       	ldi	r26, 0x55	; 85
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e5 e5       	ldi	r30, 0x55	; 85
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	87 7f       	andi	r24, 0xF7	; 247
    196c:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    196e:	a5 e5       	ldi	r26, 0x55	; 85
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e5       	ldi	r30, 0x55	; 85
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	84 60       	ori	r24, 0x04	; 4
    197a:	8c 93       	st	X, r24
}
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    198a:	a5 e5       	ldi	r26, 0x55	; 85
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e5 e5       	ldi	r30, 0x55	; 85
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	88 60       	ori	r24, 0x08	; 8
    1996:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1998:	a5 e5       	ldi	r26, 0x55	; 85
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e5 e5       	ldi	r30, 0x55	; 85
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	84 60       	ori	r24, 0x04	; 4
    19a4:	8c 93       	st	X, r24
}
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    19b4:	a4 e5       	ldi	r26, 0x54	; 84
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e4 e5       	ldi	r30, 0x54	; 84
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	80 64       	ori	r24, 0x40	; 64
    19c0:	8c 93       	st	X, r24
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    19d0:	a4 e5       	ldi	r26, 0x54	; 84
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e4 e5       	ldi	r30, 0x54	; 84
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8f 7b       	andi	r24, 0xBF	; 191
    19dc:	8c 93       	st	X, r24
}
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    19ec:	0e 94 6d 0c 	call	0x18da	; 0x18da <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    19f0:	ab e5       	ldi	r26, 0x5B	; 91
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	eb e5       	ldi	r30, 0x5B	; 91
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 64       	ori	r24, 0x40	; 64
    19fc:	8c 93       	st	X, r24
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1a0c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1a10:	ab e5       	ldi	r26, 0x5B	; 91
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	eb e5       	ldi	r30, 0x5B	; 91
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	8c 93       	st	X, r24
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	3a 87       	std	Y+10, r19	; 0x0a
    1a44:	29 87       	std	Y+9, r18	; 0x09
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	e9 f1       	breq	.+122    	; 0x1aca <EXTI_INTEnable+0xa6>
    1a50:	29 85       	ldd	r18, Y+9	; 0x09
    1a52:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a54:	22 30       	cpi	r18, 0x02	; 2
    1a56:	31 05       	cpc	r19, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <EXTI_INTEnable+0x38>
    1a5a:	69 c0       	rjmp	.+210    	; 0x1b2e <EXTI_INTEnable+0x10a>
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <EXTI_INTEnable+0x42>
    1a64:	7f c0       	rjmp	.+254    	; 0x1b64 <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1a66:	ab e5       	ldi	r26, 0x5B	; 91
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	eb e5       	ldi	r30, 0x5B	; 91
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 64       	ori	r24, 0x40	; 64
    1a72:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	38 87       	std	Y+8, r19	; 0x08
    1a7c:	2f 83       	std	Y+7, r18	; 0x07
    1a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a80:	98 85       	ldd	r25, Y+8	; 0x08
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	91 05       	cpc	r25, r1
    1a86:	c1 f0       	breq	.+48     	; 0x1ab8 <EXTI_INTEnable+0x94>
    1a88:	2f 81       	ldd	r18, Y+7	; 0x07
    1a8a:	38 85       	ldd	r19, Y+8	; 0x08
    1a8c:	22 30       	cpi	r18, 0x02	; 2
    1a8e:	31 05       	cpc	r19, r1
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <EXTI_INTEnable+0x78>
    1a92:	8f 81       	ldd	r24, Y+7	; 0x07
    1a94:	98 85       	ldd	r25, Y+8	; 0x08
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	61 f0       	breq	.+24     	; 0x1ab2 <EXTI_INTEnable+0x8e>
    1a9a:	64 c0       	rjmp	.+200    	; 0x1b64 <EXTI_INTEnable+0x140>
    1a9c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a9e:	38 85       	ldd	r19, Y+8	; 0x08
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <EXTI_INTEnable+0x9a>
    1aa6:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa8:	98 85       	ldd	r25, Y+8	; 0x08
    1aaa:	83 30       	cpi	r24, 0x03	; 3
    1aac:	91 05       	cpc	r25, r1
    1aae:	51 f0       	breq	.+20     	; 0x1ac4 <EXTI_INTEnable+0xa0>
    1ab0:	59 c0       	rjmp	.+178    	; 0x1b64 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    1ab2:	0e 94 2e 0c 	call	0x185c	; 0x185c <EXTI0_LowLevel_MODE>
    1ab6:	56 c0       	rjmp	.+172    	; 0x1b64 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    1ab8:	0e 94 43 0c 	call	0x1886	; 0x1886 <EXTI0_FALLING_MODE>
    1abc:	53 c0       	rjmp	.+166    	; 0x1b64 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1abe:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <EXTI0_AnyLogicalChange_MODE>
    1ac2:	50 c0       	rjmp	.+160    	; 0x1b64 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    1ac4:	0e 94 6d 0c 	call	0x18da	; 0x18da <EXTI0_RISING_MODE>
    1ac8:	4d c0       	rjmp	.+154    	; 0x1b64 <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1aca:	ab e5       	ldi	r26, 0x5B	; 91
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	eb e5       	ldi	r30, 0x5B	; 91
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 68       	ori	r24, 0x80	; 128
    1ad6:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3e 83       	std	Y+6, r19	; 0x06
    1ae0:	2d 83       	std	Y+5, r18	; 0x05
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	c1 f0       	breq	.+48     	; 0x1b1c <EXTI_INTEnable+0xf8>
    1aec:	2d 81       	ldd	r18, Y+5	; 0x05
    1aee:	3e 81       	ldd	r19, Y+6	; 0x06
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <EXTI_INTEnable+0xdc>
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <EXTI_INTEnable+0xf2>
    1afe:	32 c0       	rjmp	.+100    	; 0x1b64 <EXTI_INTEnable+0x140>
    1b00:	2d 81       	ldd	r18, Y+5	; 0x05
    1b02:	3e 81       	ldd	r19, Y+6	; 0x06
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	61 f0       	breq	.+24     	; 0x1b22 <EXTI_INTEnable+0xfe>
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	51 f0       	breq	.+20     	; 0x1b28 <EXTI_INTEnable+0x104>
    1b14:	27 c0       	rjmp	.+78     	; 0x1b64 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1b16:	0e 94 82 0c 	call	0x1904	; 0x1904 <EXTI1_LowLevel_MODE>
    1b1a:	24 c0       	rjmp	.+72     	; 0x1b64 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    1b1c:	0e 94 97 0c 	call	0x192e	; 0x192e <EXTI1_FALLING_MODE>
    1b20:	21 c0       	rjmp	.+66     	; 0x1b64 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    1b22:	0e 94 ac 0c 	call	0x1958	; 0x1958 <EXTI1_AnyLogicalChange_MODE>
    1b26:	1e c0       	rjmp	.+60     	; 0x1b64 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1b28:	0e 94 c1 0c 	call	0x1982	; 0x1982 <EXTI1_RISING_MODE>
    1b2c:	1b c0       	rjmp	.+54     	; 0x1b64 <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1b2e:	ab e5       	ldi	r26, 0x5B	; 91
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	eb e5       	ldi	r30, 0x5B	; 91
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 62       	ori	r24, 0x20	; 32
    1b3a:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3c 83       	std	Y+4, r19	; 0x04
    1b44:	2b 83       	std	Y+3, r18	; 0x03
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	41 f0       	breq	.+16     	; 0x1b60 <EXTI_INTEnable+0x13c>
    1b50:	2b 81       	ldd	r18, Y+3	; 0x03
    1b52:	3c 81       	ldd	r19, Y+4	; 0x04
    1b54:	23 30       	cpi	r18, 0x03	; 3
    1b56:	31 05       	cpc	r19, r1
    1b58:	29 f4       	brne	.+10     	; 0x1b64 <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1b5a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <EXTI2_RISING_MODE>
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    1b60:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    1b64:	2a 96       	adiw	r28, 0x0a	; 10
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <EXTI_voidINTDisable+0x6>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	3b 83       	std	Y+3, r19	; 0x03
    1b8c:	2a 83       	std	Y+2, r18	; 0x02
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	9b 81       	ldd	r25, Y+3	; 0x03
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	89 f0       	breq	.+34     	; 0x1bba <EXTI_voidINTDisable+0x44>
    1b98:	2a 81       	ldd	r18, Y+2	; 0x02
    1b9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	a1 f0       	breq	.+40     	; 0x1bca <EXTI_voidINTDisable+0x54>
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	b9 f4       	brne	.+46     	; 0x1bd8 <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1baa:	ab e5       	ldi	r26, 0x5B	; 91
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e5       	ldi	r30, 0x5B	; 91
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8f 7b       	andi	r24, 0xBF	; 191
    1bb6:	8c 93       	st	X, r24
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1bba:	ab e5       	ldi	r26, 0x5B	; 91
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	eb e5       	ldi	r30, 0x5B	; 91
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 77       	andi	r24, 0x7F	; 127
    1bc6:	8c 93       	st	X, r24
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1bca:	ab e5       	ldi	r26, 0x5B	; 91
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb e5       	ldi	r30, 0x5B	; 91
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 7d       	andi	r24, 0xDF	; 223
    1bd6:	8c 93       	st	X, r24
			break;
	}
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    1c0e:	80 91 9e 01 	lds	r24, 0x019E
    1c12:	90 91 9f 01 	lds	r25, 0x019F
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	29 f0       	breq	.+10     	; 0x1c24 <__vector_1+0x40>
		EXTI[0]();
    1c1a:	e0 91 9e 01 	lds	r30, 0x019E
    1c1e:	f0 91 9f 01 	lds	r31, 0x019F
    1c22:	09 95       	icall
	}

}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	ff 91       	pop	r31
    1c2a:	ef 91       	pop	r30
    1c2c:	bf 91       	pop	r27
    1c2e:	af 91       	pop	r26
    1c30:	9f 91       	pop	r25
    1c32:	8f 91       	pop	r24
    1c34:	7f 91       	pop	r23
    1c36:	6f 91       	pop	r22
    1c38:	5f 91       	pop	r21
    1c3a:	4f 91       	pop	r20
    1c3c:	3f 91       	pop	r19
    1c3e:	2f 91       	pop	r18
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	0f 90       	pop	r0
    1c46:	1f 90       	pop	r1
    1c48:	18 95       	reti

00001c4a <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1c4a:	1f 92       	push	r1
    1c4c:	0f 92       	push	r0
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	0f 92       	push	r0
    1c52:	11 24       	eor	r1, r1
    1c54:	2f 93       	push	r18
    1c56:	3f 93       	push	r19
    1c58:	4f 93       	push	r20
    1c5a:	5f 93       	push	r21
    1c5c:	6f 93       	push	r22
    1c5e:	7f 93       	push	r23
    1c60:	8f 93       	push	r24
    1c62:	9f 93       	push	r25
    1c64:	af 93       	push	r26
    1c66:	bf 93       	push	r27
    1c68:	ef 93       	push	r30
    1c6a:	ff 93       	push	r31
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    1c74:	80 91 a0 01 	lds	r24, 0x01A0
    1c78:	90 91 a1 01 	lds	r25, 0x01A1
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	29 f0       	breq	.+10     	; 0x1c8a <__vector_2+0x40>
			EXTI[1]();
    1c80:	e0 91 a0 01 	lds	r30, 0x01A0
    1c84:	f0 91 a1 01 	lds	r31, 0x01A1
    1c88:	09 95       	icall
	}

}
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	ff 91       	pop	r31
    1c90:	ef 91       	pop	r30
    1c92:	bf 91       	pop	r27
    1c94:	af 91       	pop	r26
    1c96:	9f 91       	pop	r25
    1c98:	8f 91       	pop	r24
    1c9a:	7f 91       	pop	r23
    1c9c:	6f 91       	pop	r22
    1c9e:	5f 91       	pop	r21
    1ca0:	4f 91       	pop	r20
    1ca2:	3f 91       	pop	r19
    1ca4:	2f 91       	pop	r18
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	0f 90       	pop	r0
    1cac:	1f 90       	pop	r1
    1cae:	18 95       	reti

00001cb0 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1cb0:	1f 92       	push	r1
    1cb2:	0f 92       	push	r0
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	0f 92       	push	r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	2f 93       	push	r18
    1cbc:	3f 93       	push	r19
    1cbe:	4f 93       	push	r20
    1cc0:	5f 93       	push	r21
    1cc2:	6f 93       	push	r22
    1cc4:	7f 93       	push	r23
    1cc6:	8f 93       	push	r24
    1cc8:	9f 93       	push	r25
    1cca:	af 93       	push	r26
    1ccc:	bf 93       	push	r27
    1cce:	ef 93       	push	r30
    1cd0:	ff 93       	push	r31
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    1cda:	80 91 a2 01 	lds	r24, 0x01A2
    1cde:	90 91 a3 01 	lds	r25, 0x01A3
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	29 f0       	breq	.+10     	; 0x1cf0 <__vector_3+0x40>
			EXTI[2]();
    1ce6:	e0 91 a2 01 	lds	r30, 0x01A2
    1cea:	f0 91 a3 01 	lds	r31, 0x01A3
    1cee:	09 95       	icall
	}

}
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	ff 91       	pop	r31
    1cf6:	ef 91       	pop	r30
    1cf8:	bf 91       	pop	r27
    1cfa:	af 91       	pop	r26
    1cfc:	9f 91       	pop	r25
    1cfe:	8f 91       	pop	r24
    1d00:	7f 91       	pop	r23
    1d02:	6f 91       	pop	r22
    1d04:	5f 91       	pop	r21
    1d06:	4f 91       	pop	r20
    1d08:	3f 91       	pop	r19
    1d0a:	2f 91       	pop	r18
    1d0c:	0f 90       	pop	r0
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	0f 90       	pop	r0
    1d12:	1f 90       	pop	r1
    1d14:	18 95       	reti

00001d16 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    1d1e:	ea e3       	ldi	r30, 0x3A	; 58
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	87 e0       	ldi	r24, 0x07	; 7
    1d24:	80 83       	st	Z, r24
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    1d26:	e7 e3       	ldi	r30, 0x37	; 55
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    1d2c:	e4 e3       	ldi	r30, 0x34	; 52
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	8f ef       	ldi	r24, 0xFF	; 255
    1d32:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1d34:	e1 e3       	ldi	r30, 0x31	; 49
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    1d3a:	eb e3       	ldi	r30, 0x3B	; 59
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    1d40:	e8 e3       	ldi	r30, 0x38	; 56
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1d46:	e5 e3       	ldi	r30, 0x35	; 53
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    1d4c:	e2 e3       	ldi	r30, 0x32	; 50
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	10 82       	st	Z, r1

}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	2e 97       	sbiw	r28, 0x0e	; 14
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	6b 83       	std	Y+3, r22	; 0x03
    1d70:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	84 30       	cpi	r24, 0x04	; 4
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <DIO_u8SetPinDirection+0x26>
    1d7c:	0c c1       	rjmp	.+536    	; 0x1f96 <DIO_u8SetPinDirection+0x23e>
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	88 30       	cpi	r24, 0x08	; 8
    1d82:	08 f0       	brcs	.+2      	; 0x1d86 <DIO_u8SetPinDirection+0x2e>
    1d84:	08 c1       	rjmp	.+528    	; 0x1f96 <DIO_u8SetPinDirection+0x23e>
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	21 f0       	breq	.+8      	; 0x1d94 <DIO_u8SetPinDirection+0x3c>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	88 23       	and	r24, r24
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <DIO_u8SetPinDirection+0x3c>
    1d92:	01 c1       	rjmp	.+514    	; 0x1f96 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	3e 87       	std	Y+14, r19	; 0x0e
    1d9c:	2d 87       	std	Y+13, r18	; 0x0d
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	91 05       	cpc	r25, r1
    1da6:	09 f4       	brne	.+2      	; 0x1daa <DIO_u8SetPinDirection+0x52>
    1da8:	4f c0       	rjmp	.+158    	; 0x1e48 <DIO_u8SetPinDirection+0xf0>
    1daa:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dac:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <DIO_u8SetPinDirection+0x66>
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	71 f0       	breq	.+28     	; 0x1dd8 <DIO_u8SetPinDirection+0x80>
    1dbc:	ed c0       	rjmp	.+474    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
    1dbe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dc0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <DIO_u8SetPinDirection+0x72>
    1dc8:	77 c0       	rjmp	.+238    	; 0x1eb8 <DIO_u8SetPinDirection+0x160>
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <DIO_u8SetPinDirection+0x7e>
    1dd4:	a9 c0       	rjmp	.+338    	; 0x1f28 <DIO_u8SetPinDirection+0x1d0>
    1dd6:	e0 c0       	rjmp	.+448    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	3c 87       	std	Y+12, r19	; 0x0c
    1de0:	2b 87       	std	Y+11, r18	; 0x0b
    1de2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	d1 f0       	breq	.+52     	; 0x1e1e <DIO_u8SetPinDirection+0xc6>
    1dea:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dec:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dee:	21 30       	cpi	r18, 0x01	; 1
    1df0:	31 05       	cpc	r19, r1
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <DIO_u8SetPinDirection+0x9e>
    1df4:	d1 c0       	rjmp	.+418    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1df6:	aa e3       	ldi	r26, 0x3A	; 58
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	ea e3       	ldi	r30, 0x3A	; 58
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <DIO_u8SetPinDirection+0xbc>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <DIO_u8SetPinDirection+0xb8>
    1e18:	84 2b       	or	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	bd c0       	rjmp	.+378    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1e1e:	aa e3       	ldi	r26, 0x3A	; 58
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	ea e3       	ldi	r30, 0x3A	; 58
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <DIO_u8SetPinDirection+0xe4>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <DIO_u8SetPinDirection+0xe0>
    1e40:	80 95       	com	r24
    1e42:	84 23       	and	r24, r20
    1e44:	8c 93       	st	X, r24
    1e46:	a8 c0       	rjmp	.+336    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	3a 87       	std	Y+10, r19	; 0x0a
    1e50:	29 87       	std	Y+9, r18	; 0x09
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	d1 f0       	breq	.+52     	; 0x1e8e <DIO_u8SetPinDirection+0x136>
    1e5a:	29 85       	ldd	r18, Y+9	; 0x09
    1e5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e5e:	21 30       	cpi	r18, 0x01	; 1
    1e60:	31 05       	cpc	r19, r1
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <DIO_u8SetPinDirection+0x10e>
    1e64:	99 c0       	rjmp	.+306    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1e66:	a7 e3       	ldi	r26, 0x37	; 55
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e7 e3       	ldi	r30, 0x37	; 55
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	48 2f       	mov	r20, r24
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 2e       	mov	r0, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <DIO_u8SetPinDirection+0x12c>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	0a 94       	dec	r0
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <DIO_u8SetPinDirection+0x128>
    1e88:	84 2b       	or	r24, r20
    1e8a:	8c 93       	st	X, r24
    1e8c:	85 c0       	rjmp	.+266    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1e8e:	a7 e3       	ldi	r26, 0x37	; 55
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e7 e3       	ldi	r30, 0x37	; 55
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_u8SetPinDirection+0x154>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_u8SetPinDirection+0x150>
    1eb0:	80 95       	com	r24
    1eb2:	84 23       	and	r24, r20
    1eb4:	8c 93       	st	X, r24
    1eb6:	70 c0       	rjmp	.+224    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	38 87       	std	Y+8, r19	; 0x08
    1ec0:	2f 83       	std	Y+7, r18	; 0x07
    1ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec4:	98 85       	ldd	r25, Y+8	; 0x08
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	d1 f0       	breq	.+52     	; 0x1efe <DIO_u8SetPinDirection+0x1a6>
    1eca:	2f 81       	ldd	r18, Y+7	; 0x07
    1ecc:	38 85       	ldd	r19, Y+8	; 0x08
    1ece:	21 30       	cpi	r18, 0x01	; 1
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <DIO_u8SetPinDirection+0x17e>
    1ed4:	61 c0       	rjmp	.+194    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1ed6:	a4 e3       	ldi	r26, 0x34	; 52
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e4 e3       	ldi	r30, 0x34	; 52
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_u8SetPinDirection+0x19c>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_u8SetPinDirection+0x198>
    1ef8:	84 2b       	or	r24, r20
    1efa:	8c 93       	st	X, r24
    1efc:	4d c0       	rjmp	.+154    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1efe:	a4 e3       	ldi	r26, 0x34	; 52
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e4 e3       	ldi	r30, 0x34	; 52
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 2e       	mov	r0, r18
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <DIO_u8SetPinDirection+0x1c4>
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	0a 94       	dec	r0
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <DIO_u8SetPinDirection+0x1c0>
    1f20:	80 95       	com	r24
    1f22:	84 23       	and	r24, r20
    1f24:	8c 93       	st	X, r24
    1f26:	38 c0       	rjmp	.+112    	; 0x1f98 <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3e 83       	std	Y+6, r19	; 0x06
    1f30:	2d 83       	std	Y+5, r18	; 0x05
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	c9 f0       	breq	.+50     	; 0x1f6c <DIO_u8SetPinDirection+0x214>
    1f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f3e:	21 30       	cpi	r18, 0x01	; 1
    1f40:	31 05       	cpc	r19, r1
    1f42:	51 f5       	brne	.+84     	; 0x1f98 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1f44:	a1 e3       	ldi	r26, 0x31	; 49
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e1 e3       	ldi	r30, 0x31	; 49
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <DIO_u8SetPinDirection+0x20a>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <DIO_u8SetPinDirection+0x206>
    1f66:	84 2b       	or	r24, r20
    1f68:	8c 93       	st	X, r24
    1f6a:	16 c0       	rjmp	.+44     	; 0x1f98 <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1f6c:	a1 e3       	ldi	r26, 0x31	; 49
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e1 e3       	ldi	r30, 0x31	; 49
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	48 2f       	mov	r20, r24
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	02 2e       	mov	r0, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <DIO_u8SetPinDirection+0x232>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <DIO_u8SetPinDirection+0x22e>
    1f8e:	80 95       	com	r24
    1f90:	84 23       	and	r24, r20
    1f92:	8c 93       	st	X, r24
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1f96:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9a:	2e 96       	adiw	r28, 0x0e	; 14
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	2f 97       	sbiw	r28, 0x0f	; 15
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
    1fc2:	6c 83       	std	Y+4, r22	; 0x04
    1fc4:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	84 30       	cpi	r24, 0x04	; 4
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <DIO_u8SetPinValue+0x26>
    1fd0:	13 c1       	rjmp	.+550    	; 0x21f8 <DIO_u8SetPinValue+0x24c>
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <DIO_u8SetPinValue+0x2e>
    1fd8:	0f c1       	rjmp	.+542    	; 0x21f8 <DIO_u8SetPinValue+0x24c>
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	88 23       	and	r24, r24
    1fde:	21 f0       	breq	.+8      	; 0x1fe8 <DIO_u8SetPinValue+0x3c>
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <DIO_u8SetPinValue+0x3c>
    1fe6:	08 c1       	rjmp	.+528    	; 0x21f8 <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	3f 87       	std	Y+15, r19	; 0x0f
    1ff0:	2e 87       	std	Y+14, r18	; 0x0e
    1ff2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <DIO_u8SetPinValue+0x52>
    1ffc:	50 c0       	rjmp	.+160    	; 0x209e <DIO_u8SetPinValue+0xf2>
    1ffe:	2e 85       	ldd	r18, Y+14	; 0x0e
    2000:	3f 85       	ldd	r19, Y+15	; 0x0f
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	2c f4       	brge	.+10     	; 0x2012 <DIO_u8SetPinValue+0x66>
    2008:	8e 85       	ldd	r24, Y+14	; 0x0e
    200a:	9f 85       	ldd	r25, Y+15	; 0x0f
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	71 f0       	breq	.+28     	; 0x202c <DIO_u8SetPinValue+0x80>
    2010:	f4 c0       	rjmp	.+488    	; 0x21fa <DIO_u8SetPinValue+0x24e>
    2012:	2e 85       	ldd	r18, Y+14	; 0x0e
    2014:	3f 85       	ldd	r19, Y+15	; 0x0f
    2016:	22 30       	cpi	r18, 0x02	; 2
    2018:	31 05       	cpc	r19, r1
    201a:	09 f4       	brne	.+2      	; 0x201e <DIO_u8SetPinValue+0x72>
    201c:	79 c0       	rjmp	.+242    	; 0x2110 <DIO_u8SetPinValue+0x164>
    201e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2020:	9f 85       	ldd	r25, Y+15	; 0x0f
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	91 05       	cpc	r25, r1
    2026:	09 f4       	brne	.+2      	; 0x202a <DIO_u8SetPinValue+0x7e>
    2028:	ad c0       	rjmp	.+346    	; 0x2184 <DIO_u8SetPinValue+0x1d8>
    202a:	e7 c0       	rjmp	.+462    	; 0x21fa <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	3d 87       	std	Y+13, r19	; 0x0d
    2034:	2c 87       	std	Y+12, r18	; 0x0c
    2036:	8c 85       	ldd	r24, Y+12	; 0x0c
    2038:	9d 85       	ldd	r25, Y+13	; 0x0d
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	c9 f0       	breq	.+50     	; 0x2070 <DIO_u8SetPinValue+0xc4>
    203e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2040:	3d 85       	ldd	r19, Y+13	; 0x0d
    2042:	21 30       	cpi	r18, 0x01	; 1
    2044:	31 05       	cpc	r19, r1
    2046:	49 f5       	brne	.+82     	; 0x209a <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2048:	ab e3       	ldi	r26, 0x3B	; 59
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	eb e3       	ldi	r30, 0x3B	; 59
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <DIO_u8SetPinValue+0xba>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <DIO_u8SetPinValue+0xb6>
    206a:	84 2b       	or	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	c5 c0       	rjmp	.+394    	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2070:	ab e3       	ldi	r26, 0x3B	; 59
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	eb e3       	ldi	r30, 0x3B	; 59
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	48 2f       	mov	r20, r24
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 2e       	mov	r0, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <DIO_u8SetPinValue+0xe2>
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	0a 94       	dec	r0
    2090:	e2 f7       	brpl	.-8      	; 0x208a <DIO_u8SetPinValue+0xde>
    2092:	80 95       	com	r24
    2094:	84 23       	and	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	b0 c0       	rjmp	.+352    	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    209a:	1a 82       	std	Y+2, r1	; 0x02
    209c:	ae c0       	rjmp	.+348    	; 0x21fa <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3b 87       	std	Y+11, r19	; 0x0b
    20a6:	2a 87       	std	Y+10, r18	; 0x0a
    20a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	c9 f0       	breq	.+50     	; 0x20e2 <DIO_u8SetPinValue+0x136>
    20b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    20b2:	3b 85       	ldd	r19, Y+11	; 0x0b
    20b4:	21 30       	cpi	r18, 0x01	; 1
    20b6:	31 05       	cpc	r19, r1
    20b8:	49 f5       	brne	.+82     	; 0x210c <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    20ba:	a8 e3       	ldi	r26, 0x38	; 56
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e8 e3       	ldi	r30, 0x38	; 56
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	48 2f       	mov	r20, r24
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	02 2e       	mov	r0, r18
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <DIO_u8SetPinValue+0x12c>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	0a 94       	dec	r0
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <DIO_u8SetPinValue+0x128>
    20dc:	84 2b       	or	r24, r20
    20de:	8c 93       	st	X, r24
    20e0:	8c c0       	rjmp	.+280    	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    20e2:	a8 e3       	ldi	r26, 0x38	; 56
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8c 81       	ldd	r24, Y+4	; 0x04
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <DIO_u8SetPinValue+0x154>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <DIO_u8SetPinValue+0x150>
    2104:	80 95       	com	r24
    2106:	84 23       	and	r24, r20
    2108:	8c 93       	st	X, r24
    210a:	77 c0       	rjmp	.+238    	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    210c:	1a 82       	std	Y+2, r1	; 0x02
    210e:	75 c0       	rjmp	.+234    	; 0x21fa <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	39 87       	std	Y+9, r19	; 0x09
    2118:	28 87       	std	Y+8, r18	; 0x08
    211a:	88 85       	ldd	r24, Y+8	; 0x08
    211c:	99 85       	ldd	r25, Y+9	; 0x09
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	31 f0       	breq	.+12     	; 0x212e <DIO_u8SetPinValue+0x182>
    2122:	28 85       	ldd	r18, Y+8	; 0x08
    2124:	39 85       	ldd	r19, Y+9	; 0x09
    2126:	21 30       	cpi	r18, 0x01	; 1
    2128:	31 05       	cpc	r19, r1
    212a:	b1 f0       	breq	.+44     	; 0x2158 <DIO_u8SetPinValue+0x1ac>
    212c:	29 c0       	rjmp	.+82     	; 0x2180 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    212e:	a5 e3       	ldi	r26, 0x35	; 53
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e3       	ldi	r30, 0x35	; 53
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 2e       	mov	r0, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <DIO_u8SetPinValue+0x1a0>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <DIO_u8SetPinValue+0x19c>
    2150:	80 95       	com	r24
    2152:	84 23       	and	r24, r20
    2154:	8c 93       	st	X, r24
    2156:	51 c0       	rjmp	.+162    	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2158:	a5 e3       	ldi	r26, 0x35	; 53
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e5 e3       	ldi	r30, 0x35	; 53
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	48 2f       	mov	r20, r24
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 2e       	mov	r0, r18
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_u8SetPinValue+0x1ca>
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	0a 94       	dec	r0
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <DIO_u8SetPinValue+0x1c6>
    217a:	84 2b       	or	r24, r20
    217c:	8c 93       	st	X, r24
    217e:	3d c0       	rjmp	.+122    	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2180:	1a 82       	std	Y+2, r1	; 0x02
    2182:	3b c0       	rjmp	.+118    	; 0x21fa <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	3f 83       	std	Y+7, r19	; 0x07
    218c:	2e 83       	std	Y+6, r18	; 0x06
    218e:	8e 81       	ldd	r24, Y+6	; 0x06
    2190:	9f 81       	ldd	r25, Y+7	; 0x07
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	31 f0       	breq	.+12     	; 0x21a2 <DIO_u8SetPinValue+0x1f6>
    2196:	2e 81       	ldd	r18, Y+6	; 0x06
    2198:	3f 81       	ldd	r19, Y+7	; 0x07
    219a:	21 30       	cpi	r18, 0x01	; 1
    219c:	31 05       	cpc	r19, r1
    219e:	b1 f0       	breq	.+44     	; 0x21cc <DIO_u8SetPinValue+0x220>
    21a0:	29 c0       	rjmp	.+82     	; 0x21f4 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    21a2:	a5 e3       	ldi	r26, 0x35	; 53
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e3       	ldi	r30, 0x35	; 53
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	48 2f       	mov	r20, r24
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 2e       	mov	r0, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <DIO_u8SetPinValue+0x214>
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	0a 94       	dec	r0
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <DIO_u8SetPinValue+0x210>
    21c4:	80 95       	com	r24
    21c6:	84 23       	and	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	17 c0       	rjmp	.+46     	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    21cc:	a2 e3       	ldi	r26, 0x32	; 50
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e2 e3       	ldi	r30, 0x32	; 50
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	48 2f       	mov	r20, r24
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	02 2e       	mov	r0, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <DIO_u8SetPinValue+0x23e>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	0a 94       	dec	r0
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <DIO_u8SetPinValue+0x23a>
    21ee:	84 2b       	or	r24, r20
    21f0:	8c 93       	st	X, r24
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    21f4:	1a 82       	std	Y+2, r1	; 0x02
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    21f8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21fc:	2f 96       	adiw	r28, 0x0f	; 15
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	28 97       	sbiw	r28, 0x08	; 8
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	8b 83       	std	Y+3, r24	; 0x03
    2224:	6c 83       	std	Y+4, r22	; 0x04
    2226:	5e 83       	std	Y+6, r21	; 0x06
    2228:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	84 30       	cpi	r24, 0x04	; 4
    2232:	08 f0       	brcs	.+2      	; 0x2236 <DIO_u8GetPinValue+0x28>
    2234:	9f c0       	rjmp	.+318    	; 0x2374 <DIO_u8GetPinValue+0x166>
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	88 30       	cpi	r24, 0x08	; 8
    223a:	08 f0       	brcs	.+2      	; 0x223e <DIO_u8GetPinValue+0x30>
    223c:	9b c0       	rjmp	.+310    	; 0x2374 <DIO_u8GetPinValue+0x166>
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	09 f4       	brne	.+2      	; 0x2248 <DIO_u8GetPinValue+0x3a>
    2246:	96 c0       	rjmp	.+300    	; 0x2374 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	38 87       	std	Y+8, r19	; 0x08
    2250:	2f 83       	std	Y+7, r18	; 0x07
    2252:	4f 81       	ldd	r20, Y+7	; 0x07
    2254:	58 85       	ldd	r21, Y+8	; 0x08
    2256:	41 30       	cpi	r20, 0x01	; 1
    2258:	51 05       	cpc	r21, r1
    225a:	a9 f1       	breq	.+106    	; 0x22c6 <DIO_u8GetPinValue+0xb8>
    225c:	8f 81       	ldd	r24, Y+7	; 0x07
    225e:	98 85       	ldd	r25, Y+8	; 0x08
    2260:	82 30       	cpi	r24, 0x02	; 2
    2262:	91 05       	cpc	r25, r1
    2264:	34 f4       	brge	.+12     	; 0x2272 <DIO_u8GetPinValue+0x64>
    2266:	2f 81       	ldd	r18, Y+7	; 0x07
    2268:	38 85       	ldd	r19, Y+8	; 0x08
    226a:	21 15       	cp	r18, r1
    226c:	31 05       	cpc	r19, r1
    226e:	71 f0       	breq	.+28     	; 0x228c <DIO_u8GetPinValue+0x7e>
    2270:	82 c0       	rjmp	.+260    	; 0x2376 <DIO_u8GetPinValue+0x168>
    2272:	4f 81       	ldd	r20, Y+7	; 0x07
    2274:	58 85       	ldd	r21, Y+8	; 0x08
    2276:	42 30       	cpi	r20, 0x02	; 2
    2278:	51 05       	cpc	r21, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <DIO_u8GetPinValue+0x70>
    227c:	41 c0       	rjmp	.+130    	; 0x2300 <DIO_u8GetPinValue+0xf2>
    227e:	8f 81       	ldd	r24, Y+7	; 0x07
    2280:	98 85       	ldd	r25, Y+8	; 0x08
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	91 05       	cpc	r25, r1
    2286:	09 f4       	brne	.+2      	; 0x228a <DIO_u8GetPinValue+0x7c>
    2288:	58 c0       	rjmp	.+176    	; 0x233a <DIO_u8GetPinValue+0x12c>
    228a:	75 c0       	rjmp	.+234    	; 0x2376 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    228c:	e9 e3       	ldi	r30, 0x39	; 57
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	8c 81       	ldd	r24, Y+4	; 0x04
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a9 01       	movw	r20, r18
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <DIO_u8GetPinValue+0x96>
    22a0:	55 95       	asr	r21
    22a2:	47 95       	ror	r20
    22a4:	8a 95       	dec	r24
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <DIO_u8GetPinValue+0x92>
    22a8:	ca 01       	movw	r24, r20
    22aa:	81 70       	andi	r24, 0x01	; 1
    22ac:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	88 23       	and	r24, r24
    22b2:	21 f4       	brne	.+8      	; 0x22bc <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    22b4:	ed 81       	ldd	r30, Y+5	; 0x05
    22b6:	fe 81       	ldd	r31, Y+6	; 0x06
    22b8:	10 82       	st	Z, r1
    22ba:	5d c0       	rjmp	.+186    	; 0x2376 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    22bc:	ed 81       	ldd	r30, Y+5	; 0x05
    22be:	fe 81       	ldd	r31, Y+6	; 0x06
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	80 83       	st	Z, r24
    22c4:	58 c0       	rjmp	.+176    	; 0x2376 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    22c6:	e6 e3       	ldi	r30, 0x36	; 54
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	a9 01       	movw	r20, r18
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <DIO_u8GetPinValue+0xd0>
    22da:	55 95       	asr	r21
    22dc:	47 95       	ror	r20
    22de:	8a 95       	dec	r24
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <DIO_u8GetPinValue+0xcc>
    22e2:	ca 01       	movw	r24, r20
    22e4:	81 70       	andi	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	88 23       	and	r24, r24
    22ec:	21 f4       	brne	.+8      	; 0x22f6 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    22ee:	ed 81       	ldd	r30, Y+5	; 0x05
    22f0:	fe 81       	ldd	r31, Y+6	; 0x06
    22f2:	10 82       	st	Z, r1
    22f4:	40 c0       	rjmp	.+128    	; 0x2376 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    22f6:	ed 81       	ldd	r30, Y+5	; 0x05
    22f8:	fe 81       	ldd	r31, Y+6	; 0x06
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	80 83       	st	Z, r24
    22fe:	3b c0       	rjmp	.+118    	; 0x2376 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    2300:	e3 e3       	ldi	r30, 0x33	; 51
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	88 2f       	mov	r24, r24
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	a9 01       	movw	r20, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <DIO_u8GetPinValue+0x10a>
    2314:	55 95       	asr	r21
    2316:	47 95       	ror	r20
    2318:	8a 95       	dec	r24
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <DIO_u8GetPinValue+0x106>
    231c:	ca 01       	movw	r24, r20
    231e:	81 70       	andi	r24, 0x01	; 1
    2320:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	88 23       	and	r24, r24
    2326:	21 f4       	brne	.+8      	; 0x2330 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2328:	ed 81       	ldd	r30, Y+5	; 0x05
    232a:	fe 81       	ldd	r31, Y+6	; 0x06
    232c:	10 82       	st	Z, r1
    232e:	23 c0       	rjmp	.+70     	; 0x2376 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2330:	ed 81       	ldd	r30, Y+5	; 0x05
    2332:	fe 81       	ldd	r31, Y+6	; 0x06
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 83       	st	Z, r24
    2338:	1e c0       	rjmp	.+60     	; 0x2376 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    233a:	e0 e3       	ldi	r30, 0x30	; 48
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	8c 81       	ldd	r24, Y+4	; 0x04
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	a9 01       	movw	r20, r18
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <DIO_u8GetPinValue+0x144>
    234e:	55 95       	asr	r21
    2350:	47 95       	ror	r20
    2352:	8a 95       	dec	r24
    2354:	e2 f7       	brpl	.-8      	; 0x234e <DIO_u8GetPinValue+0x140>
    2356:	ca 01       	movw	r24, r20
    2358:	81 70       	andi	r24, 0x01	; 1
    235a:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 23       	and	r24, r24
    2360:	21 f4       	brne	.+8      	; 0x236a <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2362:	ed 81       	ldd	r30, Y+5	; 0x05
    2364:	fe 81       	ldd	r31, Y+6	; 0x06
    2366:	10 82       	st	Z, r1
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    236a:	ed 81       	ldd	r30, Y+5	; 0x05
    236c:	fe 81       	ldd	r31, Y+6	; 0x06
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	80 83       	st	Z, r24
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2374:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2378:	28 96       	adiw	r28, 0x08	; 8
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <DIO_getPinValueWithoutPointer+0x6>
    2390:	00 d0       	rcall	.+0      	; 0x2392 <DIO_getPinValueWithoutPointer+0x8>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	8a 83       	std	Y+2, r24	; 0x02
    239a:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    239c:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	88 30       	cpi	r24, 0x08	; 8
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <DIO_getPinValueWithoutPointer+0x1c>
    23a4:	6b c0       	rjmp	.+214    	; 0x247c <DIO_getPinValueWithoutPointer+0xf2>
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	84 30       	cpi	r24, 0x04	; 4
    23aa:	08 f0       	brcs	.+2      	; 0x23ae <DIO_getPinValueWithoutPointer+0x24>
    23ac:	67 c0       	rjmp	.+206    	; 0x247c <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	3d 83       	std	Y+5, r19	; 0x05
    23b6:	2c 83       	std	Y+4, r18	; 0x04
    23b8:	4c 81       	ldd	r20, Y+4	; 0x04
    23ba:	5d 81       	ldd	r21, Y+5	; 0x05
    23bc:	41 30       	cpi	r20, 0x01	; 1
    23be:	51 05       	cpc	r21, r1
    23c0:	41 f1       	breq	.+80     	; 0x2412 <DIO_getPinValueWithoutPointer+0x88>
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	9d 81       	ldd	r25, Y+5	; 0x05
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	91 05       	cpc	r25, r1
    23ca:	34 f4       	brge	.+12     	; 0x23d8 <DIO_getPinValueWithoutPointer+0x4e>
    23cc:	2c 81       	ldd	r18, Y+4	; 0x04
    23ce:	3d 81       	ldd	r19, Y+5	; 0x05
    23d0:	21 15       	cp	r18, r1
    23d2:	31 05       	cpc	r19, r1
    23d4:	61 f0       	breq	.+24     	; 0x23ee <DIO_getPinValueWithoutPointer+0x64>
    23d6:	52 c0       	rjmp	.+164    	; 0x247c <DIO_getPinValueWithoutPointer+0xf2>
    23d8:	4c 81       	ldd	r20, Y+4	; 0x04
    23da:	5d 81       	ldd	r21, Y+5	; 0x05
    23dc:	42 30       	cpi	r20, 0x02	; 2
    23de:	51 05       	cpc	r21, r1
    23e0:	51 f1       	breq	.+84     	; 0x2436 <DIO_getPinValueWithoutPointer+0xac>
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	9d 81       	ldd	r25, Y+5	; 0x05
    23e6:	83 30       	cpi	r24, 0x03	; 3
    23e8:	91 05       	cpc	r25, r1
    23ea:	b9 f1       	breq	.+110    	; 0x245a <DIO_getPinValueWithoutPointer+0xd0>
    23ec:	47 c0       	rjmp	.+142    	; 0x247c <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    23ee:	e9 e3       	ldi	r30, 0x39	; 57
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	a9 01       	movw	r20, r18
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <DIO_getPinValueWithoutPointer+0x7c>
    2402:	55 95       	asr	r21
    2404:	47 95       	ror	r20
    2406:	8a 95       	dec	r24
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <DIO_getPinValueWithoutPointer+0x78>
    240a:	ca 01       	movw	r24, r20
    240c:	81 70       	andi	r24, 0x01	; 1
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	35 c0       	rjmp	.+106    	; 0x247c <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    2412:	e6 e3       	ldi	r30, 0x36	; 54
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a9 01       	movw	r20, r18
    2424:	02 c0       	rjmp	.+4      	; 0x242a <DIO_getPinValueWithoutPointer+0xa0>
    2426:	55 95       	asr	r21
    2428:	47 95       	ror	r20
    242a:	8a 95       	dec	r24
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <DIO_getPinValueWithoutPointer+0x9c>
    242e:	ca 01       	movw	r24, r20
    2430:	81 70       	andi	r24, 0x01	; 1
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	23 c0       	rjmp	.+70     	; 0x247c <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    2436:	e3 e3       	ldi	r30, 0x33	; 51
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a9 01       	movw	r20, r18
    2448:	02 c0       	rjmp	.+4      	; 0x244e <DIO_getPinValueWithoutPointer+0xc4>
    244a:	55 95       	asr	r21
    244c:	47 95       	ror	r20
    244e:	8a 95       	dec	r24
    2450:	e2 f7       	brpl	.-8      	; 0x244a <DIO_getPinValueWithoutPointer+0xc0>
    2452:	ca 01       	movw	r24, r20
    2454:	81 70       	andi	r24, 0x01	; 1
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	11 c0       	rjmp	.+34     	; 0x247c <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    245a:	e0 e3       	ldi	r30, 0x30	; 48
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	88 2f       	mov	r24, r24
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a9 01       	movw	r20, r18
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <DIO_getPinValueWithoutPointer+0xe8>
    246e:	55 95       	asr	r21
    2470:	47 95       	ror	r20
    2472:	8a 95       	dec	r24
    2474:	e2 f7       	brpl	.-8      	; 0x246e <DIO_getPinValueWithoutPointer+0xe4>
    2476:	ca 01       	movw	r24, r20
    2478:	81 70       	andi	r24, 0x01	; 1
    247a:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	2d 97       	sbiw	r28, 0x0d	; 13
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	3c 87       	std	Y+12, r19	; 0x0c
    24ae:	2b 87       	std	Y+11, r18	; 0x0b
    24b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	91 05       	cpc	r25, r1
    24b8:	71 f1       	breq	.+92     	; 0x2516 <DIO_u8SetPortDirection+0x88>
    24ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    24bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    24be:	22 30       	cpi	r18, 0x02	; 2
    24c0:	31 05       	cpc	r19, r1
    24c2:	2c f4       	brge	.+10     	; 0x24ce <DIO_u8SetPortDirection+0x40>
    24c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f0       	breq	.+26     	; 0x24e6 <DIO_u8SetPortDirection+0x58>
    24cc:	6b c0       	rjmp	.+214    	; 0x25a4 <DIO_u8SetPortDirection+0x116>
    24ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    24d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    24d2:	22 30       	cpi	r18, 0x02	; 2
    24d4:	31 05       	cpc	r19, r1
    24d6:	b9 f1       	breq	.+110    	; 0x2546 <DIO_u8SetPortDirection+0xb8>
    24d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24da:	9c 85       	ldd	r25, Y+12	; 0x0c
    24dc:	83 30       	cpi	r24, 0x03	; 3
    24de:	91 05       	cpc	r25, r1
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <DIO_u8SetPortDirection+0x56>
    24e2:	49 c0       	rjmp	.+146    	; 0x2576 <DIO_u8SetPortDirection+0xe8>
    24e4:	5f c0       	rjmp	.+190    	; 0x25a4 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	3a 87       	std	Y+10, r19	; 0x0a
    24ee:	29 87       	std	Y+9, r18	; 0x09
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	31 f0       	breq	.+12     	; 0x2504 <DIO_u8SetPortDirection+0x76>
    24f8:	29 85       	ldd	r18, Y+9	; 0x09
    24fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    24fc:	21 30       	cpi	r18, 0x01	; 1
    24fe:	31 05       	cpc	r19, r1
    2500:	29 f0       	breq	.+10     	; 0x250c <DIO_u8SetPortDirection+0x7e>
    2502:	50 c0       	rjmp	.+160    	; 0x25a4 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    2504:	ea e3       	ldi	r30, 0x3A	; 58
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	10 82       	st	Z, r1
    250a:	4c c0       	rjmp	.+152    	; 0x25a4 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    250c:	ea e3       	ldi	r30, 0x3A	; 58
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	8f ef       	ldi	r24, 0xFF	; 255
    2512:	80 83       	st	Z, r24
    2514:	47 c0       	rjmp	.+142    	; 0x25a4 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	38 87       	std	Y+8, r19	; 0x08
    251e:	2f 83       	std	Y+7, r18	; 0x07
    2520:	8f 81       	ldd	r24, Y+7	; 0x07
    2522:	98 85       	ldd	r25, Y+8	; 0x08
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	31 f0       	breq	.+12     	; 0x2534 <DIO_u8SetPortDirection+0xa6>
    2528:	2f 81       	ldd	r18, Y+7	; 0x07
    252a:	38 85       	ldd	r19, Y+8	; 0x08
    252c:	21 30       	cpi	r18, 0x01	; 1
    252e:	31 05       	cpc	r19, r1
    2530:	29 f0       	breq	.+10     	; 0x253c <DIO_u8SetPortDirection+0xae>
    2532:	38 c0       	rjmp	.+112    	; 0x25a4 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    2534:	e7 e3       	ldi	r30, 0x37	; 55
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	10 82       	st	Z, r1
    253a:	34 c0       	rjmp	.+104    	; 0x25a4 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    253c:	e7 e3       	ldi	r30, 0x37	; 55
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	8f ef       	ldi	r24, 0xFF	; 255
    2542:	80 83       	st	Z, r24
    2544:	2f c0       	rjmp	.+94     	; 0x25a4 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	3e 83       	std	Y+6, r19	; 0x06
    254e:	2d 83       	std	Y+5, r18	; 0x05
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	31 f0       	breq	.+12     	; 0x2564 <DIO_u8SetPortDirection+0xd6>
    2558:	2d 81       	ldd	r18, Y+5	; 0x05
    255a:	3e 81       	ldd	r19, Y+6	; 0x06
    255c:	21 30       	cpi	r18, 0x01	; 1
    255e:	31 05       	cpc	r19, r1
    2560:	29 f0       	breq	.+10     	; 0x256c <DIO_u8SetPortDirection+0xde>
    2562:	20 c0       	rjmp	.+64     	; 0x25a4 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2564:	e4 e3       	ldi	r30, 0x34	; 52
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	10 82       	st	Z, r1
    256a:	1c c0       	rjmp	.+56     	; 0x25a4 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    256c:	e4 e3       	ldi	r30, 0x34	; 52
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	8f ef       	ldi	r24, 0xFF	; 255
    2572:	80 83       	st	Z, r24
    2574:	17 c0       	rjmp	.+46     	; 0x25a4 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3c 83       	std	Y+4, r19	; 0x04
    257e:	2b 83       	std	Y+3, r18	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	31 f0       	breq	.+12     	; 0x2594 <DIO_u8SetPortDirection+0x106>
    2588:	2b 81       	ldd	r18, Y+3	; 0x03
    258a:	3c 81       	ldd	r19, Y+4	; 0x04
    258c:	21 30       	cpi	r18, 0x01	; 1
    258e:	31 05       	cpc	r19, r1
    2590:	29 f0       	breq	.+10     	; 0x259c <DIO_u8SetPortDirection+0x10e>
    2592:	08 c0       	rjmp	.+16     	; 0x25a4 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2594:	e1 e3       	ldi	r30, 0x31	; 49
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	10 82       	st	Z, r1
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    259c:	e1 e3       	ldi	r30, 0x31	; 49
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	8f ef       	ldi	r24, 0xFF	; 255
    25a2:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    25a4:	2d 96       	adiw	r28, 0x0d	; 13
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    25be:	a7 e2       	ldi	r26, 0x27	; 39
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e7 e2       	ldi	r30, 0x27	; 39
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8f 77       	andi	r24, 0x7F	; 127
    25ca:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    25cc:	a7 e2       	ldi	r26, 0x27	; 39
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e7 e2       	ldi	r30, 0x27	; 39
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	80 64       	ori	r24, 0x40	; 64
    25d8:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    25da:	a7 e2       	ldi	r26, 0x27	; 39
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e7 e2       	ldi	r30, 0x27	; 39
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	8f 7d       	andi	r24, 0xDF	; 223
    25e6:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    25e8:	a6 e2       	ldi	r26, 0x26	; 38
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e6 e2       	ldi	r30, 0x26	; 38
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	8f 7d       	andi	r24, 0xDF	; 223
    25f4:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    25f6:	a6 e2       	ldi	r26, 0x26	; 38
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e6 e2       	ldi	r30, 0x26	; 38
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	84 60       	ori	r24, 0x04	; 4
    2602:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2604:	a6 e2       	ldi	r26, 0x26	; 38
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e6 e2       	ldi	r30, 0x26	; 38
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	82 60       	ori	r24, 0x02	; 2
    2610:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2612:	a6 e2       	ldi	r26, 0x26	; 38
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e6 e2       	ldi	r30, 0x26	; 38
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	8e 7f       	andi	r24, 0xFE	; 254
    261e:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2620:	a6 e2       	ldi	r26, 0x26	; 38
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e6 e2       	ldi	r30, 0x26	; 38
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	80 68       	ori	r24, 0x80	; 128
    262c:	8c 93       	st	X, r24

}
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	28 97       	sbiw	r28, 0x08	; 8
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	8e 83       	std	Y+6, r24	; 0x06
    264a:	78 87       	std	Y+8, r23	; 0x08
    264c:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2652:	19 82       	std	Y+1, r1	; 0x01
    2654:	1a 82       	std	Y+2, r1	; 0x02
    2656:	1b 82       	std	Y+3, r1	; 0x03
    2658:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    265a:	8e 81       	ldd	r24, Y+6	; 0x06
    265c:	80 32       	cpi	r24, 0x20	; 32
    265e:	08 f0       	brcs	.+2      	; 0x2662 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2660:	5b c0       	rjmp	.+182    	; 0x2718 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2662:	8f 81       	ldd	r24, Y+7	; 0x07
    2664:	98 85       	ldd	r25, Y+8	; 0x08
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	09 f4       	brne	.+2      	; 0x266c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    266a:	56 c0       	rjmp	.+172    	; 0x2718 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    266c:	a7 e2       	ldi	r26, 0x27	; 39
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e7 e2       	ldi	r30, 0x27	; 39
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	80 7e       	andi	r24, 0xE0	; 224
    2678:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    267a:	a7 e2       	ldi	r26, 0x27	; 39
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e7 e2       	ldi	r30, 0x27	; 39
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	90 81       	ld	r25, Z
    2684:	8e 81       	ldd	r24, Y+6	; 0x06
    2686:	89 2b       	or	r24, r25
    2688:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    268a:	a6 e2       	ldi	r26, 0x26	; 38
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e6 e2       	ldi	r30, 0x26	; 38
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	80 64       	ori	r24, 0x40	; 64
    2696:	8c 93       	st	X, r24
    2698:	0b c0       	rjmp	.+22     	; 0x26b0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	ab 81       	ldd	r26, Y+3	; 0x03
    26a0:	bc 81       	ldd	r27, Y+4	; 0x04
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	a1 1d       	adc	r26, r1
    26a6:	b1 1d       	adc	r27, r1
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	ab 83       	std	Y+3, r26	; 0x03
    26ae:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    26b0:	e6 e2       	ldi	r30, 0x26	; 38
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	82 95       	swap	r24
    26b8:	8f 70       	andi	r24, 0x0F	; 15
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	81 70       	andi	r24, 0x01	; 1
    26c0:	90 70       	andi	r25, 0x00	; 0
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	61 f4       	brne	.+24     	; 0x26de <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ca:	ab 81       	ldd	r26, Y+3	; 0x03
    26cc:	bc 81       	ldd	r27, Y+4	; 0x04
    26ce:	80 35       	cpi	r24, 0x50	; 80
    26d0:	23 ec       	ldi	r18, 0xC3	; 195
    26d2:	92 07       	cpc	r25, r18
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	a2 07       	cpc	r26, r18
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	b2 07       	cpc	r27, r18
    26dc:	f0 f2       	brcs	.-68     	; 0x269a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    26de:	e6 e2       	ldi	r30, 0x26	; 38
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	82 95       	swap	r24
    26e6:	8f 70       	andi	r24, 0x0F	; 15
    26e8:	88 2f       	mov	r24, r24
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	81 70       	andi	r24, 0x01	; 1
    26ee:	90 70       	andi	r25, 0x00	; 0
    26f0:	88 23       	and	r24, r24
    26f2:	81 f0       	breq	.+32     	; 0x2714 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    26f4:	a6 e2       	ldi	r26, 0x26	; 38
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e6 e2       	ldi	r30, 0x26	; 38
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	80 61       	ori	r24, 0x10	; 16
    2700:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2702:	e4 e2       	ldi	r30, 0x24	; 36
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	ef 81       	ldd	r30, Y+7	; 0x07
    270c:	f8 85       	ldd	r31, Y+8	; 0x08
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	03 c0       	rjmp	.+6      	; 0x271a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2714:	1d 82       	std	Y+5, r1	; 0x05
    2716:	01 c0       	rjmp	.+2      	; 0x271a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2718:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    271c:	28 96       	adiw	r28, 0x08	; 8
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2734:	00 d0       	rcall	.+0      	; 0x2736 <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	8a 83       	std	Y+2, r24	; 0x02
    273c:	7c 83       	std	Y+4, r23	; 0x04
    273e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	80 32       	cpi	r24, 0x20	; 32
    2748:	78 f5       	brcc	.+94     	; 0x27a8 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	59 f1       	breq	.+86     	; 0x27a8 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2752:	80 91 a6 01 	lds	r24, 0x01A6
    2756:	88 23       	and	r24, r24
    2758:	39 f5       	brne	.+78     	; 0x27a8 <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	80 93 a6 01 	sts	0x01A6, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	90 93 a5 01 	sts	0x01A5, r25
    2768:	80 93 a4 01 	sts	0x01A4, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    276c:	a6 e2       	ldi	r26, 0x26	; 38
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e6 e2       	ldi	r30, 0x26	; 38
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	88 60       	ori	r24, 0x08	; 8
    2778:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    277a:	a7 e2       	ldi	r26, 0x27	; 39
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e7 e2       	ldi	r30, 0x27	; 39
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	80 7e       	andi	r24, 0xE0	; 224
    2786:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2788:	a7 e2       	ldi	r26, 0x27	; 39
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e7 e2       	ldi	r30, 0x27	; 39
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	90 81       	ld	r25, Z
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	89 2b       	or	r24, r25
    2796:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2798:	a6 e2       	ldi	r26, 0x26	; 38
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e6 e2       	ldi	r30, 0x26	; 38
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	80 64       	ori	r24, 0x40	; 64
    27a4:	8c 93       	st	X, r24
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    27a8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <ADC_u8GetADCRegValue+0x6>
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	9b 83       	std	Y+3, r25	; 0x03
    27c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	9b 81       	ldd	r25, Y+3	; 0x03
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	39 f0       	breq	.+14     	; 0x27e4 <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    27d6:	e4 e2       	ldi	r30, 0x24	; 36
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	9b 83       	std	Y+3, r25	; 0x03
    27e0:	8a 83       	std	Y+2, r24	; 0x02
    27e2:	01 c0       	rjmp	.+2      	; 0x27e6 <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    27e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    27f4:	1f 92       	push	r1
    27f6:	0f 92       	push	r0
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	0f 92       	push	r0
    27fc:	11 24       	eor	r1, r1
    27fe:	2f 93       	push	r18
    2800:	3f 93       	push	r19
    2802:	4f 93       	push	r20
    2804:	5f 93       	push	r21
    2806:	6f 93       	push	r22
    2808:	7f 93       	push	r23
    280a:	8f 93       	push	r24
    280c:	9f 93       	push	r25
    280e:	af 93       	push	r26
    2810:	bf 93       	push	r27
    2812:	ef 93       	push	r30
    2814:	ff 93       	push	r31
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    281e:	80 91 a4 01 	lds	r24, 0x01A4
    2822:	90 91 a5 01 	lds	r25, 0x01A5
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	99 f0       	breq	.+38     	; 0x2850 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    282a:	10 92 a6 01 	sts	0x01A6, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    282e:	a6 e2       	ldi	r26, 0x26	; 38
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e6 e2       	ldi	r30, 0x26	; 38
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	87 7f       	andi	r24, 0xF7	; 247
    283a:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    283c:	20 91 a4 01 	lds	r18, 0x01A4
    2840:	30 91 a5 01 	lds	r19, 0x01A5
    2844:	e4 e2       	ldi	r30, 0x24	; 36
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	f9 01       	movw	r30, r18
    284e:	09 95       	icall
	}
}
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	ff 91       	pop	r31
    2856:	ef 91       	pop	r30
    2858:	bf 91       	pop	r27
    285a:	af 91       	pop	r26
    285c:	9f 91       	pop	r25
    285e:	8f 91       	pop	r24
    2860:	7f 91       	pop	r23
    2862:	6f 91       	pop	r22
    2864:	5f 91       	pop	r21
    2866:	4f 91       	pop	r20
    2868:	3f 91       	pop	r19
    286a:	2f 91       	pop	r18
    286c:	0f 90       	pop	r0
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	0f 90       	pop	r0
    2872:	1f 90       	pop	r1
    2874:	18 95       	reti

00002876 <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    287e:	83 e0       	ldi	r24, 0x03	; 3
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	41 e0       	ldi	r20, 0x01	; 1
    2884:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2888:	83 e0       	ldi	r24, 0x03	; 3
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2892:	83 e0       	ldi	r24, 0x03	; 3
    2894:	62 e0       	ldi	r22, 0x02	; 2
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	66 e0       	ldi	r22, 0x06	; 6
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
}
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <ActivatePins1+0x6>
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <ActivatePins1+0x8>
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	6a 83       	std	Y+2, r22	; 0x02
    28bc:	4b 83       	std	Y+3, r20	; 0x03
    28be:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	49 81       	ldd	r20, Y+1	; 0x01
    28c6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    28ca:	83 e0       	ldi	r24, 0x03	; 3
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	4a 81       	ldd	r20, Y+2	; 0x02
    28d0:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    28d4:	83 e0       	ldi	r24, 0x03	; 3
    28d6:	62 e0       	ldi	r22, 0x02	; 2
    28d8:	4b 81       	ldd	r20, Y+3	; 0x03
    28da:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	66 e0       	ldi	r22, 0x06	; 6
    28e2:	4c 81       	ldd	r20, Y+4	; 0x04
    28e4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
}
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <ActivatePins2+0x6>
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <ActivatePins2+0x8>
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	6a 83       	std	Y+2, r22	; 0x02
    2906:	4b 83       	std	Y+3, r20	; 0x03
    2908:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	66 e0       	ldi	r22, 0x06	; 6
    290e:	4c 81       	ldd	r20, Y+4	; 0x04
    2910:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2914:	83 e0       	ldi	r24, 0x03	; 3
    2916:	62 e0       	ldi	r22, 0x02	; 2
    2918:	4b 81       	ldd	r20, Y+3	; 0x03
    291a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    291e:	83 e0       	ldi	r24, 0x03	; 3
    2920:	61 e0       	ldi	r22, 0x01	; 1
    2922:	4a 81       	ldd	r20, Y+2	; 0x02
    2924:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	49 81       	ldd	r20, Y+1	; 0x01
    292e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
}
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	29 97       	sbiw	r28, 0x09	; 9
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	9a 83       	std	Y+2, r25	; 0x02
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    295a:	29 81       	ldd	r18, Y+1	; 0x01
    295c:	3a 81       	ldd	r19, Y+2	; 0x02
    295e:	39 87       	std	Y+9, r19	; 0x09
    2960:	28 87       	std	Y+8, r18	; 0x08
    2962:	88 85       	ldd	r24, Y+8	; 0x08
    2964:	99 85       	ldd	r25, Y+9	; 0x09
    2966:	8a 35       	cpi	r24, 0x5A	; 90
    2968:	91 05       	cpc	r25, r1
    296a:	31 f0       	breq	.+12     	; 0x2978 <SelectStepAngle+0x38>
    296c:	28 85       	ldd	r18, Y+8	; 0x08
    296e:	39 85       	ldd	r19, Y+9	; 0x09
    2970:	24 3b       	cpi	r18, 0xB4	; 180
    2972:	31 05       	cpc	r19, r1
    2974:	f1 f0       	breq	.+60     	; 0x29b2 <SelectStepAngle+0x72>
    2976:	39 c0       	rjmp	.+114    	; 0x29ea <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	3f 83       	std	Y+7, r19	; 0x07
    2980:	2e 83       	std	Y+6, r18	; 0x06
    2982:	8e 81       	ldd	r24, Y+6	; 0x06
    2984:	9f 81       	ldd	r25, Y+7	; 0x07
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	31 f0       	breq	.+12     	; 0x2996 <SelectStepAngle+0x56>
    298a:	2e 81       	ldd	r18, Y+6	; 0x06
    298c:	3f 81       	ldd	r19, Y+7	; 0x07
    298e:	21 30       	cpi	r18, 0x01	; 1
    2990:	31 05       	cpc	r19, r1
    2992:	41 f0       	breq	.+16     	; 0x29a4 <SelectStepAngle+0x64>
    2994:	2a c0       	rjmp	.+84     	; 0x29ea <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	21 e0       	ldi	r18, 0x01	; 1
    299e:	0e 94 56 14 	call	0x28ac	; 0x28ac <ActivatePins1>
    29a2:	23 c0       	rjmp	.+70     	; 0x29ea <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	40 e0       	ldi	r20, 0x00	; 0
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <ActivatePins2>
    29b0:	1c c0       	rjmp	.+56     	; 0x29ea <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	28 2f       	mov	r18, r24
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	3d 83       	std	Y+5, r19	; 0x05
    29ba:	2c 83       	std	Y+4, r18	; 0x04
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	9d 81       	ldd	r25, Y+5	; 0x05
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	31 f0       	breq	.+12     	; 0x29d0 <SelectStepAngle+0x90>
    29c4:	2c 81       	ldd	r18, Y+4	; 0x04
    29c6:	3d 81       	ldd	r19, Y+5	; 0x05
    29c8:	21 30       	cpi	r18, 0x01	; 1
    29ca:	31 05       	cpc	r19, r1
    29cc:	41 f0       	breq	.+16     	; 0x29de <SelectStepAngle+0x9e>
    29ce:	0d c0       	rjmp	.+26     	; 0x29ea <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <ActivatePins2>
    29dc:	06 c0       	rjmp	.+12     	; 0x29ea <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	0e 94 56 14 	call	0x28ac	; 0x28ac <ActivatePins1>
						break;
				}
				break;
	}
}
    29ea:	29 96       	adiw	r28, 0x09	; 9
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"



void Servo_Init(){
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    2a04:	0e 94 c3 06 	call	0xd86	; 0xd86 <TIMERS_voidTimer1Init>
}
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <Servo_SetAngle+0x6>
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Servo_Angle);
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a20:	0e 94 6b 07 	call	0xed6	; 0xed6 <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	e9 97       	sbiw	r28, 0x39	; 57
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	64 e0       	ldi	r22, 0x04	; 4
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_setPinValue>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	a0 e8       	ldi	r26, 0x80	; 128
    2a5a:	bf e3       	ldi	r27, 0x3F	; 63
    2a5c:	8d ab       	std	Y+53, r24	; 0x35
    2a5e:	9e ab       	std	Y+54, r25	; 0x36
    2a60:	af ab       	std	Y+55, r26	; 0x37
    2a62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a64:	6d a9       	ldd	r22, Y+53	; 0x35
    2a66:	7e a9       	ldd	r23, Y+54	; 0x36
    2a68:	8f a9       	ldd	r24, Y+55	; 0x37
    2a6a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	4a e7       	ldi	r20, 0x7A	; 122
    2a72:	55 e4       	ldi	r21, 0x45	; 69
    2a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	89 ab       	std	Y+49, r24	; 0x31
    2a7e:	9a ab       	std	Y+50, r25	; 0x32
    2a80:	ab ab       	std	Y+51, r26	; 0x33
    2a82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a84:	69 a9       	ldd	r22, Y+49	; 0x31
    2a86:	7a a9       	ldd	r23, Y+50	; 0x32
    2a88:	8b a9       	ldd	r24, Y+51	; 0x33
    2a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	2c f4       	brge	.+10     	; 0x2aa6 <LCD_sendCommand+0x78>
		__ticks = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	98 ab       	std	Y+48, r25	; 0x30
    2aa2:	8f a7       	std	Y+47, r24	; 0x2f
    2aa4:	3f c0       	rjmp	.+126    	; 0x2b24 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    2aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    2aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    2aac:	9c a9       	ldd	r25, Y+52	; 0x34
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	3f ef       	ldi	r19, 0xFF	; 255
    2ab2:	4f e7       	ldi	r20, 0x7F	; 127
    2ab4:	57 e4       	ldi	r21, 0x47	; 71
    2ab6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aba:	18 16       	cp	r1, r24
    2abc:	4c f5       	brge	.+82     	; 0x2b10 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abe:	6d a9       	ldd	r22, Y+53	; 0x35
    2ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	40 e2       	ldi	r20, 0x20	; 32
    2acc:	51 e4       	ldi	r21, 0x41	; 65
    2ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	98 ab       	std	Y+48, r25	; 0x30
    2ae4:	8f a7       	std	Y+47, r24	; 0x2f
    2ae6:	0f c0       	rjmp	.+30     	; 0x2b06 <LCD_sendCommand+0xd8>
    2ae8:	80 e9       	ldi	r24, 0x90	; 144
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	9e a7       	std	Y+46, r25	; 0x2e
    2aee:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2af0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2af2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD_sendCommand+0xc6>
    2af8:	9e a7       	std	Y+46, r25	; 0x2e
    2afa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afe:	98 a9       	ldd	r25, Y+48	; 0x30
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	98 ab       	std	Y+48, r25	; 0x30
    2b04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b08:	98 a9       	ldd	r25, Y+48	; 0x30
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	69 f7       	brne	.-38     	; 0x2ae8 <LCD_sendCommand+0xba>
    2b0e:	14 c0       	rjmp	.+40     	; 0x2b38 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b10:	69 a9       	ldd	r22, Y+49	; 0x31
    2b12:	7a a9       	ldd	r23, Y+50	; 0x32
    2b14:	8b a9       	ldd	r24, Y+51	; 0x33
    2b16:	9c a9       	ldd	r25, Y+52	; 0x34
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	98 ab       	std	Y+48, r25	; 0x30
    2b22:	8f a7       	std	Y+47, r24	; 0x2f
    2b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b26:	98 a9       	ldd	r25, Y+48	; 0x30
    2b28:	9c a7       	std	Y+44, r25	; 0x2c
    2b2a:	8b a7       	std	Y+43, r24	; 0x2b
    2b2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <LCD_sendCommand+0x102>
    2b34:	9c a7       	std	Y+44, r25	; 0x2c
    2b36:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	65 e0       	ldi	r22, 0x05	; 5
    2b3e:	70 e0       	ldi	r23, 0x00	; 0
    2b40:	41 e0       	ldi	r20, 0x01	; 1
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_setPinValue>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e8       	ldi	r26, 0x80	; 128
    2b4e:	bf e3       	ldi	r27, 0x3F	; 63
    2b50:	8f a3       	std	Y+39, r24	; 0x27
    2b52:	98 a7       	std	Y+40, r25	; 0x28
    2b54:	a9 a7       	std	Y+41, r26	; 0x29
    2b56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b58:	6f a1       	ldd	r22, Y+39	; 0x27
    2b5a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b5c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a e7       	ldi	r20, 0x7A	; 122
    2b66:	55 e4       	ldi	r21, 0x45	; 69
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	8b a3       	std	Y+35, r24	; 0x23
    2b72:	9c a3       	std	Y+36, r25	; 0x24
    2b74:	ad a3       	std	Y+37, r26	; 0x25
    2b76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b78:	6b a1       	ldd	r22, Y+35	; 0x23
    2b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <LCD_sendCommand+0x16c>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9a a3       	std	Y+34, r25	; 0x22
    2b96:	89 a3       	std	Y+33, r24	; 0x21
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2b9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bae:	18 16       	cp	r1, r24
    2bb0:	4c f5       	brge	.+82     	; 0x2c04 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9a a3       	std	Y+34, r25	; 0x22
    2bd8:	89 a3       	std	Y+33, r24	; 0x21
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <LCD_sendCommand+0x1cc>
    2bdc:	80 e9       	ldi	r24, 0x90	; 144
    2bde:	91 e0       	ldi	r25, 0x01	; 1
    2be0:	98 a3       	std	Y+32, r25	; 0x20
    2be2:	8f 8f       	std	Y+31, r24	; 0x1f
    2be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be6:	98 a1       	ldd	r25, Y+32	; 0x20
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_sendCommand+0x1ba>
    2bec:	98 a3       	std	Y+32, r25	; 0x20
    2bee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9a a3       	std	Y+34, r25	; 0x22
    2bf8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <LCD_sendCommand+0x1ae>
    2c02:	14 c0       	rjmp	.+40     	; 0x2c2c <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	6b a1       	ldd	r22, Y+35	; 0x23
    2c06:	7c a1       	ldd	r23, Y+36	; 0x24
    2c08:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9a a3       	std	Y+34, r25	; 0x22
    2c16:	89 a3       	std	Y+33, r24	; 0x21
    2c18:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c1e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <LCD_sendCommand+0x1f6>
    2c28:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2c2c:	89 ad       	ldd	r24, Y+57	; 0x39
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	b9 01       	movw	r22, r18
    2c38:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_setPortValue>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e8       	ldi	r26, 0x80	; 128
    2c42:	bf e3       	ldi	r27, 0x3F	; 63
    2c44:	89 8f       	std	Y+25, r24	; 0x19
    2c46:	9a 8f       	std	Y+26, r25	; 0x1a
    2c48:	ab 8f       	std	Y+27, r26	; 0x1b
    2c4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a e7       	ldi	r20, 0x7A	; 122
    2c5a:	55 e4       	ldi	r21, 0x45	; 69
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8d 8b       	std	Y+21, r24	; 0x15
    2c66:	9e 8b       	std	Y+22, r25	; 0x16
    2c68:	af 8b       	std	Y+23, r26	; 0x17
    2c6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c70:	8f 89       	ldd	r24, Y+23	; 0x17
    2c72:	98 8d       	ldd	r25, Y+24	; 0x18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <LCD_sendCommand+0x260>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9c 8b       	std	Y+20, r25	; 0x14
    2c8a:	8b 8b       	std	Y+19, r24	; 0x13
    2c8c:	3f c0       	rjmp	.+126    	; 0x2d0c <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	4c f5       	brge	.+82     	; 0x2cf8 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	9c 8b       	std	Y+20, r25	; 0x14
    2ccc:	8b 8b       	std	Y+19, r24	; 0x13
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <LCD_sendCommand+0x2c0>
    2cd0:	80 e9       	ldi	r24, 0x90	; 144
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	9a 8b       	std	Y+18, r25	; 0x12
    2cd6:	89 8b       	std	Y+17, r24	; 0x11
    2cd8:	89 89       	ldd	r24, Y+17	; 0x11
    2cda:	9a 89       	ldd	r25, Y+18	; 0x12
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <LCD_sendCommand+0x2ae>
    2ce0:	9a 8b       	std	Y+18, r25	; 0x12
    2ce2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <LCD_sendCommand+0x2a2>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	9c 8b       	std	Y+20, r25	; 0x14
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	98 8b       	std	Y+16, r25	; 0x10
    2d12:	8f 87       	std	Y+15, r24	; 0x0f
    2d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d16:	98 89       	ldd	r25, Y+16	; 0x10
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_sendCommand+0x2ea>
    2d1c:	98 8b       	std	Y+16, r25	; 0x10
    2d1e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2d20:	83 e0       	ldi	r24, 0x03	; 3
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	65 e0       	ldi	r22, 0x05	; 5
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	40 e0       	ldi	r20, 0x00	; 0
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_setPinValue>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e8       	ldi	r26, 0x80	; 128
    2d36:	bf e3       	ldi	r27, 0x3F	; 63
    2d38:	8b 87       	std	Y+11, r24	; 0x0b
    2d3a:	9c 87       	std	Y+12, r25	; 0x0c
    2d3c:	ad 87       	std	Y+13, r26	; 0x0d
    2d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	4a e7       	ldi	r20, 0x7A	; 122
    2d4e:	55 e4       	ldi	r21, 0x45	; 69
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	8f 83       	std	Y+7, r24	; 0x07
    2d5a:	98 87       	std	Y+8, r25	; 0x08
    2d5c:	a9 87       	std	Y+9, r26	; 0x09
    2d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d60:	6f 81       	ldd	r22, Y+7	; 0x07
    2d62:	78 85       	ldd	r23, Y+8	; 0x08
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	2c f4       	brge	.+10     	; 0x2d82 <LCD_sendCommand+0x354>
		__ticks = 1;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
    2d80:	3f c0       	rjmp	.+126    	; 0x2e00 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	78 85       	ldd	r23, Y+8	; 0x08
    2d86:	89 85       	ldd	r24, Y+9	; 0x09
    2d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	4c f5       	brge	.+82     	; 0x2dec <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e2       	ldi	r20, 0x20	; 32
    2da8:	51 e4       	ldi	r21, 0x41	; 65
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
    2dc2:	0f c0       	rjmp	.+30     	; 0x2de2 <LCD_sendCommand+0x3b4>
    2dc4:	80 e9       	ldi	r24, 0x90	; 144
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_sendCommand+0x3a2>
    2dd4:	9c 83       	std	Y+4, r25	; 0x04
    2dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de2:	8d 81       	ldd	r24, Y+5	; 0x05
    2de4:	9e 81       	ldd	r25, Y+6	; 0x06
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <LCD_sendCommand+0x396>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dec:	6f 81       	ldd	r22, Y+7	; 0x07
    2dee:	78 85       	ldd	r23, Y+8	; 0x08
    2df0:	89 85       	ldd	r24, Y+9	; 0x09
    2df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	f1 f7       	brne	.-4      	; 0x2e0c <LCD_sendCommand+0x3de>
    2e10:	9a 83       	std	Y+2, r25	; 0x02
    2e12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2e14:	e9 96       	adiw	r28, 0x39	; 57
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	e9 97       	sbiw	r28, 0x39	; 57
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2e3c:	83 e0       	ldi	r24, 0x03	; 3
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	64 e0       	ldi	r22, 0x04	; 4
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_setPinValue>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a0 e8       	ldi	r26, 0x80	; 128
    2e52:	bf e3       	ldi	r27, 0x3F	; 63
    2e54:	8d ab       	std	Y+53, r24	; 0x35
    2e56:	9e ab       	std	Y+54, r25	; 0x36
    2e58:	af ab       	std	Y+55, r26	; 0x37
    2e5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e60:	8f a9       	ldd	r24, Y+55	; 0x37
    2e62:	98 ad       	ldd	r25, Y+56	; 0x38
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	55 e4       	ldi	r21, 0x45	; 69
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	89 ab       	std	Y+49, r24	; 0x31
    2e76:	9a ab       	std	Y+50, r25	; 0x32
    2e78:	ab ab       	std	Y+51, r26	; 0x33
    2e7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e80:	8b a9       	ldd	r24, Y+51	; 0x33
    2e82:	9c a9       	ldd	r25, Y+52	; 0x34
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <LCD_displayCharacter+0x78>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	98 ab       	std	Y+48, r25	; 0x30
    2e9a:	8f a7       	std	Y+47, r24	; 0x2f
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    2e9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ea0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ea2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6d a9       	ldd	r22, Y+53	; 0x35
    2eb8:	7e a9       	ldd	r23, Y+54	; 0x36
    2eba:	8f a9       	ldd	r24, Y+55	; 0x37
    2ebc:	98 ad       	ldd	r25, Y+56	; 0x38
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	98 ab       	std	Y+48, r25	; 0x30
    2edc:	8f a7       	std	Y+47, r24	; 0x2f
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <LCD_displayCharacter+0xd8>
    2ee0:	80 e9       	ldi	r24, 0x90	; 144
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	9e a7       	std	Y+46, r25	; 0x2e
    2ee6:	8d a7       	std	Y+45, r24	; 0x2d
    2ee8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eea:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_displayCharacter+0xc6>
    2ef0:	9e a7       	std	Y+46, r25	; 0x2e
    2ef2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	98 ab       	std	Y+48, r25	; 0x30
    2efc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f00:	98 a9       	ldd	r25, Y+48	; 0x30
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <LCD_displayCharacter+0xba>
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	98 ab       	std	Y+48, r25	; 0x30
    2f1a:	8f a7       	std	Y+47, r24	; 0x2f
    2f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f20:	9c a7       	std	Y+44, r25	; 0x2c
    2f22:	8b a7       	std	Y+43, r24	; 0x2b
    2f24:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f26:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_displayCharacter+0x102>
    2f2c:	9c a7       	std	Y+44, r25	; 0x2c
    2f2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2f30:	83 e0       	ldi	r24, 0x03	; 3
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	65 e0       	ldi	r22, 0x05	; 5
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	50 e0       	ldi	r21, 0x00	; 0
    2f3c:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_setPinValue>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	a0 e8       	ldi	r26, 0x80	; 128
    2f46:	bf e3       	ldi	r27, 0x3F	; 63
    2f48:	8f a3       	std	Y+39, r24	; 0x27
    2f4a:	98 a7       	std	Y+40, r25	; 0x28
    2f4c:	a9 a7       	std	Y+41, r26	; 0x29
    2f4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f50:	6f a1       	ldd	r22, Y+39	; 0x27
    2f52:	78 a5       	ldd	r23, Y+40	; 0x28
    2f54:	89 a5       	ldd	r24, Y+41	; 0x29
    2f56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	4a e7       	ldi	r20, 0x7A	; 122
    2f5e:	55 e4       	ldi	r21, 0x45	; 69
    2f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	8b a3       	std	Y+35, r24	; 0x23
    2f6a:	9c a3       	std	Y+36, r25	; 0x24
    2f6c:	ad a3       	std	Y+37, r26	; 0x25
    2f6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f70:	6b a1       	ldd	r22, Y+35	; 0x23
    2f72:	7c a1       	ldd	r23, Y+36	; 0x24
    2f74:	8d a1       	ldd	r24, Y+37	; 0x25
    2f76:	9e a1       	ldd	r25, Y+38	; 0x26
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e8       	ldi	r20, 0x80	; 128
    2f7e:	5f e3       	ldi	r21, 0x3F	; 63
    2f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	2c f4       	brge	.+10     	; 0x2f92 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9a a3       	std	Y+34, r25	; 0x22
    2f8e:	89 a3       	std	Y+33, r24	; 0x21
    2f90:	3f c0       	rjmp	.+126    	; 0x3010 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2f92:	6b a1       	ldd	r22, Y+35	; 0x23
    2f94:	7c a1       	ldd	r23, Y+36	; 0x24
    2f96:	8d a1       	ldd	r24, Y+37	; 0x25
    2f98:	9e a1       	ldd	r25, Y+38	; 0x26
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f e7       	ldi	r20, 0x7F	; 127
    2fa0:	57 e4       	ldi	r21, 0x47	; 71
    2fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa6:	18 16       	cp	r1, r24
    2fa8:	4c f5       	brge	.+82     	; 0x2ffc <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2faa:	6f a1       	ldd	r22, Y+39	; 0x27
    2fac:	78 a5       	ldd	r23, Y+40	; 0x28
    2fae:	89 a5       	ldd	r24, Y+41	; 0x29
    2fb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	9a a3       	std	Y+34, r25	; 0x22
    2fd0:	89 a3       	std	Y+33, r24	; 0x21
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <LCD_displayCharacter+0x1cc>
    2fd4:	80 e9       	ldi	r24, 0x90	; 144
    2fd6:	91 e0       	ldi	r25, 0x01	; 1
    2fd8:	98 a3       	std	Y+32, r25	; 0x20
    2fda:	8f 8f       	std	Y+31, r24	; 0x1f
    2fdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fde:	98 a1       	ldd	r25, Y+32	; 0x20
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_displayCharacter+0x1ba>
    2fe4:	98 a3       	std	Y+32, r25	; 0x20
    2fe6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fea:	9a a1       	ldd	r25, Y+34	; 0x22
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9a a3       	std	Y+34, r25	; 0x22
    2ff0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	69 f7       	brne	.-38     	; 0x2fd4 <LCD_displayCharacter+0x1ae>
    2ffa:	14 c0       	rjmp	.+40     	; 0x3024 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    3000:	8d a1       	ldd	r24, Y+37	; 0x25
    3002:	9e a1       	ldd	r25, Y+38	; 0x26
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9a a3       	std	Y+34, r25	; 0x22
    300e:	89 a3       	std	Y+33, r24	; 0x21
    3010:	89 a1       	ldd	r24, Y+33	; 0x21
    3012:	9a a1       	ldd	r25, Y+34	; 0x22
    3014:	9e 8f       	std	Y+30, r25	; 0x1e
    3016:	8d 8f       	std	Y+29, r24	; 0x1d
    3018:	8d 8d       	ldd	r24, Y+29	; 0x1d
    301a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <LCD_displayCharacter+0x1f6>
    3020:	9e 8f       	std	Y+30, r25	; 0x1e
    3022:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    3024:	89 ad       	ldd	r24, Y+57	; 0x39
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	b9 01       	movw	r22, r18
    3030:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <LCD_setPortValue>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e8       	ldi	r26, 0x80	; 128
    303a:	bf e3       	ldi	r27, 0x3F	; 63
    303c:	89 8f       	std	Y+25, r24	; 0x19
    303e:	9a 8f       	std	Y+26, r25	; 0x1a
    3040:	ab 8f       	std	Y+27, r26	; 0x1b
    3042:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	69 8d       	ldd	r22, Y+25	; 0x19
    3046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a e7       	ldi	r20, 0x7A	; 122
    3052:	55 e4       	ldi	r21, 0x45	; 69
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8d 8b       	std	Y+21, r24	; 0x15
    305e:	9e 8b       	std	Y+22, r25	; 0x16
    3060:	af 8b       	std	Y+23, r26	; 0x17
    3062:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3064:	6d 89       	ldd	r22, Y+21	; 0x15
    3066:	7e 89       	ldd	r23, Y+22	; 0x16
    3068:	8f 89       	ldd	r24, Y+23	; 0x17
    306a:	98 8d       	ldd	r25, Y+24	; 0x18
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	5f e3       	ldi	r21, 0x3F	; 63
    3074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <LCD_displayCharacter+0x260>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9c 8b       	std	Y+20, r25	; 0x14
    3082:	8b 8b       	std	Y+19, r24	; 0x13
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    3086:	6d 89       	ldd	r22, Y+21	; 0x15
    3088:	7e 89       	ldd	r23, Y+22	; 0x16
    308a:	8f 89       	ldd	r24, Y+23	; 0x17
    308c:	98 8d       	ldd	r25, Y+24	; 0x18
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3f ef       	ldi	r19, 0xFF	; 255
    3092:	4f e7       	ldi	r20, 0x7F	; 127
    3094:	57 e4       	ldi	r21, 0x47	; 71
    3096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	69 8d       	ldd	r22, Y+25	; 0x19
    30a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9c 8b       	std	Y+20, r25	; 0x14
    30c4:	8b 8b       	std	Y+19, r24	; 0x13
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <LCD_displayCharacter+0x2c0>
    30c8:	80 e9       	ldi	r24, 0x90	; 144
    30ca:	91 e0       	ldi	r25, 0x01	; 1
    30cc:	9a 8b       	std	Y+18, r25	; 0x12
    30ce:	89 8b       	std	Y+17, r24	; 0x11
    30d0:	89 89       	ldd	r24, Y+17	; 0x11
    30d2:	9a 89       	ldd	r25, Y+18	; 0x12
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <LCD_displayCharacter+0x2ae>
    30d8:	9a 8b       	std	Y+18, r25	; 0x12
    30da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	8b 89       	ldd	r24, Y+19	; 0x13
    30de:	9c 89       	ldd	r25, Y+20	; 0x14
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	9c 8b       	std	Y+20, r25	; 0x14
    30e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	8b 89       	ldd	r24, Y+19	; 0x13
    30e8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <LCD_displayCharacter+0x2a2>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	6d 89       	ldd	r22, Y+21	; 0x15
    30f2:	7e 89       	ldd	r23, Y+22	; 0x16
    30f4:	8f 89       	ldd	r24, Y+23	; 0x17
    30f6:	98 8d       	ldd	r25, Y+24	; 0x18
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9c 8b       	std	Y+20, r25	; 0x14
    3102:	8b 8b       	std	Y+19, r24	; 0x13
    3104:	8b 89       	ldd	r24, Y+19	; 0x13
    3106:	9c 89       	ldd	r25, Y+20	; 0x14
    3108:	98 8b       	std	Y+16, r25	; 0x10
    310a:	8f 87       	std	Y+15, r24	; 0x0f
    310c:	8f 85       	ldd	r24, Y+15	; 0x0f
    310e:	98 89       	ldd	r25, Y+16	; 0x10
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_displayCharacter+0x2ea>
    3114:	98 8b       	std	Y+16, r25	; 0x10
    3116:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3118:	83 e0       	ldi	r24, 0x03	; 3
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_setPinValue>
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	a0 e8       	ldi	r26, 0x80	; 128
    312e:	bf e3       	ldi	r27, 0x3F	; 63
    3130:	8b 87       	std	Y+11, r24	; 0x0b
    3132:	9c 87       	std	Y+12, r25	; 0x0c
    3134:	ad 87       	std	Y+13, r26	; 0x0d
    3136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3138:	6b 85       	ldd	r22, Y+11	; 0x0b
    313a:	7c 85       	ldd	r23, Y+12	; 0x0c
    313c:	8d 85       	ldd	r24, Y+13	; 0x0d
    313e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4a e7       	ldi	r20, 0x7A	; 122
    3146:	55 e4       	ldi	r21, 0x45	; 69
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	8f 83       	std	Y+7, r24	; 0x07
    3152:	98 87       	std	Y+8, r25	; 0x08
    3154:	a9 87       	std	Y+9, r26	; 0x09
    3156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3158:	6f 81       	ldd	r22, Y+7	; 0x07
    315a:	78 85       	ldd	r23, Y+8	; 0x08
    315c:	89 85       	ldd	r24, Y+9	; 0x09
    315e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f e3       	ldi	r21, 0x3F	; 63
    3168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	2c f4       	brge	.+10     	; 0x317a <LCD_displayCharacter+0x354>
		__ticks = 1;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9e 83       	std	Y+6, r25	; 0x06
    3176:	8d 83       	std	Y+5, r24	; 0x05
    3178:	3f c0       	rjmp	.+126    	; 0x31f8 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    317a:	6f 81       	ldd	r22, Y+7	; 0x07
    317c:	78 85       	ldd	r23, Y+8	; 0x08
    317e:	89 85       	ldd	r24, Y+9	; 0x09
    3180:	9a 85       	ldd	r25, Y+10	; 0x0a
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	3f ef       	ldi	r19, 0xFF	; 255
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	57 e4       	ldi	r21, 0x47	; 71
    318a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    318e:	18 16       	cp	r1, r24
    3190:	4c f5       	brge	.+82     	; 0x31e4 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3192:	6b 85       	ldd	r22, Y+11	; 0x0b
    3194:	7c 85       	ldd	r23, Y+12	; 0x0c
    3196:	8d 85       	ldd	r24, Y+13	; 0x0d
    3198:	9e 85       	ldd	r25, Y+14	; 0x0e
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e2       	ldi	r20, 0x20	; 32
    31a0:	51 e4       	ldi	r21, 0x41	; 65
    31a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
    31ba:	0f c0       	rjmp	.+30     	; 0x31da <LCD_displayCharacter+0x3b4>
    31bc:	80 e9       	ldi	r24, 0x90	; 144
    31be:	91 e0       	ldi	r25, 0x01	; 1
    31c0:	9c 83       	std	Y+4, r25	; 0x04
    31c2:	8b 83       	std	Y+3, r24	; 0x03
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	9c 81       	ldd	r25, Y+4	; 0x04
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_displayCharacter+0x3a2>
    31cc:	9c 83       	std	Y+4, r25	; 0x04
    31ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d0:	8d 81       	ldd	r24, Y+5	; 0x05
    31d2:	9e 81       	ldd	r25, Y+6	; 0x06
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	69 f7       	brne	.-38     	; 0x31bc <LCD_displayCharacter+0x396>
    31e2:	14 c0       	rjmp	.+40     	; 0x320c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	9e 81       	ldd	r25, Y+6	; 0x06
    31fc:	9a 83       	std	Y+2, r25	; 0x02
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <LCD_displayCharacter+0x3de>
    3208:	9a 83       	std	Y+2, r25	; 0x02
    320a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    320c:	e9 96       	adiw	r28, 0x39	; 57
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <LCD_display_WriteNumber>:

void LCD_display_WriteNumber(u32 num){
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	a6 97       	sbiw	r28, 0x26	; 38
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	6b a3       	std	Y+35, r22	; 0x23
    3238:	7c a3       	std	Y+36, r23	; 0x24
    323a:	8d a3       	std	Y+37, r24	; 0x25
    323c:	9e a3       	std	Y+38, r25	; 0x26
    u8 str[32];
    sprintf(str, "%lu", num);
    323e:	8d b7       	in	r24, 0x3d	; 61
    3240:	9e b7       	in	r25, 0x3e	; 62
    3242:	08 97       	sbiw	r24, 0x08	; 8
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	9e bf       	out	0x3e, r25	; 62
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	8d bf       	out	0x3d, r24	; 61
    324e:	ed b7       	in	r30, 0x3d	; 61
    3250:	fe b7       	in	r31, 0x3e	; 62
    3252:	31 96       	adiw	r30, 0x01	; 1
    3254:	ce 01       	movw	r24, r28
    3256:	03 96       	adiw	r24, 0x03	; 3
    3258:	91 83       	std	Z+1, r25	; 0x01
    325a:	80 83       	st	Z, r24
    325c:	80 e6       	ldi	r24, 0x60	; 96
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	93 83       	std	Z+3, r25	; 0x03
    3262:	82 83       	std	Z+2, r24	; 0x02
    3264:	8b a1       	ldd	r24, Y+35	; 0x23
    3266:	9c a1       	ldd	r25, Y+36	; 0x24
    3268:	ad a1       	ldd	r26, Y+37	; 0x25
    326a:	be a1       	ldd	r27, Y+38	; 0x26
    326c:	84 83       	std	Z+4, r24	; 0x04
    326e:	95 83       	std	Z+5, r25	; 0x05
    3270:	a6 83       	std	Z+6, r26	; 0x06
    3272:	b7 83       	std	Z+7, r27	; 0x07
    3274:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <sprintf>
    3278:	8d b7       	in	r24, 0x3d	; 61
    327a:	9e b7       	in	r25, 0x3e	; 62
    327c:	08 96       	adiw	r24, 0x08	; 8
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	9e bf       	out	0x3e, r25	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	8d bf       	out	0x3d, r24	; 61
    for (int i = 0; i < strlen(str); i++)
    3288:	1a 82       	std	Y+2, r1	; 0x02
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	0f c0       	rjmp	.+30     	; 0x32ac <LCD_display_WriteNumber+0x8e>
    {
    	LCD_displayCharacter(str[i]);
    328e:	29 81       	ldd	r18, Y+1	; 0x01
    3290:	3a 81       	ldd	r19, Y+2	; 0x02
    3292:	ce 01       	movw	r24, r28
    3294:	03 96       	adiw	r24, 0x03	; 3
    3296:	fc 01       	movw	r30, r24
    3298:	e2 0f       	add	r30, r18
    329a:	f3 1f       	adc	r31, r19
    329c:	80 81       	ld	r24, Z
    329e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>
}

void LCD_display_WriteNumber(u32 num){
    u8 str[32];
    sprintf(str, "%lu", num);
    for (int i = 0; i < strlen(str); i++)
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	9a 81       	ldd	r25, Y+2	; 0x02
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	9a 83       	std	Y+2, r25	; 0x02
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	09 81       	ldd	r16, Y+1	; 0x01
    32ae:	1a 81       	ldd	r17, Y+2	; 0x02
    32b0:	ce 01       	movw	r24, r28
    32b2:	03 96       	adiw	r24, 0x03	; 3
    32b4:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <strlen>
    32b8:	08 17       	cp	r16, r24
    32ba:	19 07       	cpc	r17, r25
    32bc:	40 f3       	brcs	.-48     	; 0x328e <LCD_display_WriteNumber+0x70>
    {
    	LCD_displayCharacter(str[i]);
    }
}
    32be:	a6 96       	adiw	r28, 0x26	; 38
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	1f 91       	pop	r17
    32d0:	0f 91       	pop	r16
    32d2:	08 95       	ret

000032d4 <LCD_init>:


void LCD_init(void)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	2e 97       	sbiw	r28, 0x0e	; 14
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    32e8:	83 e0       	ldi	r24, 0x03	; 3
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	64 e0       	ldi	r22, 0x04	; 4
    32ee:	70 e0       	ldi	r23, 0x00	; 0
    32f0:	41 e0       	ldi	r20, 0x01	; 1
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	0e 94 b9 08 	call	0x1172	; 0x1172 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	65 e0       	ldi	r22, 0x05	; 5
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	0e 94 b9 08 	call	0x1172	; 0x1172 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    3308:	82 e0       	ldi	r24, 0x02	; 2
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	6f ef       	ldi	r22, 0xFF	; 255
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_setPortDirection>
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	a0 ea       	ldi	r26, 0xA0	; 160
    331a:	b1 e4       	ldi	r27, 0x41	; 65
    331c:	8b 87       	std	Y+11, r24	; 0x0b
    331e:	9c 87       	std	Y+12, r25	; 0x0c
    3320:	ad 87       	std	Y+13, r26	; 0x0d
    3322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3324:	6b 85       	ldd	r22, Y+11	; 0x0b
    3326:	7c 85       	ldd	r23, Y+12	; 0x0c
    3328:	8d 85       	ldd	r24, Y+13	; 0x0d
    332a:	9e 85       	ldd	r25, Y+14	; 0x0e
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	4a e7       	ldi	r20, 0x7A	; 122
    3332:	55 e4       	ldi	r21, 0x45	; 69
    3334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	8f 83       	std	Y+7, r24	; 0x07
    333e:	98 87       	std	Y+8, r25	; 0x08
    3340:	a9 87       	std	Y+9, r26	; 0x09
    3342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3344:	6f 81       	ldd	r22, Y+7	; 0x07
    3346:	78 85       	ldd	r23, Y+8	; 0x08
    3348:	89 85       	ldd	r24, Y+9	; 0x09
    334a:	9a 85       	ldd	r25, Y+10	; 0x0a
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e8       	ldi	r20, 0x80	; 128
    3352:	5f e3       	ldi	r21, 0x3F	; 63
    3354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3358:	88 23       	and	r24, r24
    335a:	2c f4       	brge	.+10     	; 0x3366 <LCD_init+0x92>
		__ticks = 1;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
    3364:	3f c0       	rjmp	.+126    	; 0x33e4 <LCD_init+0x110>
	else if (__tmp > 65535)
    3366:	6f 81       	ldd	r22, Y+7	; 0x07
    3368:	78 85       	ldd	r23, Y+8	; 0x08
    336a:	89 85       	ldd	r24, Y+9	; 0x09
    336c:	9a 85       	ldd	r25, Y+10	; 0x0a
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	3f ef       	ldi	r19, 0xFF	; 255
    3372:	4f e7       	ldi	r20, 0x7F	; 127
    3374:	57 e4       	ldi	r21, 0x47	; 71
    3376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    337a:	18 16       	cp	r1, r24
    337c:	4c f5       	brge	.+82     	; 0x33d0 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    337e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3380:	7c 85       	ldd	r23, Y+12	; 0x0c
    3382:	8d 85       	ldd	r24, Y+13	; 0x0d
    3384:	9e 85       	ldd	r25, Y+14	; 0x0e
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e2       	ldi	r20, 0x20	; 32
    338c:	51 e4       	ldi	r21, 0x41	; 65
    338e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	bc 01       	movw	r22, r24
    3398:	cd 01       	movw	r24, r26
    339a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	9e 83       	std	Y+6, r25	; 0x06
    33a4:	8d 83       	std	Y+5, r24	; 0x05
    33a6:	0f c0       	rjmp	.+30     	; 0x33c6 <LCD_init+0xf2>
    33a8:	80 e9       	ldi	r24, 0x90	; 144
    33aa:	91 e0       	ldi	r25, 0x01	; 1
    33ac:	9c 83       	std	Y+4, r25	; 0x04
    33ae:	8b 83       	std	Y+3, r24	; 0x03
    33b0:	8b 81       	ldd	r24, Y+3	; 0x03
    33b2:	9c 81       	ldd	r25, Y+4	; 0x04
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <LCD_init+0xe0>
    33b8:	9c 83       	std	Y+4, r25	; 0x04
    33ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33bc:	8d 81       	ldd	r24, Y+5	; 0x05
    33be:	9e 81       	ldd	r25, Y+6	; 0x06
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	9e 83       	std	Y+6, r25	; 0x06
    33c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	69 f7       	brne	.-38     	; 0x33a8 <LCD_init+0xd4>
    33ce:	14 c0       	rjmp	.+40     	; 0x33f8 <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d0:	6f 81       	ldd	r22, Y+7	; 0x07
    33d2:	78 85       	ldd	r23, Y+8	; 0x08
    33d4:	89 85       	ldd	r24, Y+9	; 0x09
    33d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	9e 83       	std	Y+6, r25	; 0x06
    33e2:	8d 83       	std	Y+5, r24	; 0x05
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	9a 83       	std	Y+2, r25	; 0x02
    33ea:	89 83       	std	Y+1, r24	; 0x01
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	9a 81       	ldd	r25, Y+2	; 0x02
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	f1 f7       	brne	.-4      	; 0x33f0 <LCD_init+0x11c>
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    33f8:	88 e3       	ldi	r24, 0x38	; 56
    33fa:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    33fe:	8c e0       	ldi	r24, 0x0C	; 12
    3400:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
}
    340a:	2e 96       	adiw	r28, 0x0e	; 14
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	00 d0       	rcall	.+0      	; 0x3422 <LCD_GoToXY+0x6>
    3422:	00 d0       	rcall	.+0      	; 0x3424 <LCD_GoToXY+0x8>
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	89 83       	std	Y+1, r24	; 0x01
    342a:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	88 32       	cpi	r24, 0x28	; 40
    3430:	c0 f4       	brcc	.+48     	; 0x3462 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	3c 83       	std	Y+4, r19	; 0x04
    343a:	2b 83       	std	Y+3, r18	; 0x03
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	9c 81       	ldd	r25, Y+4	; 0x04
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	31 f0       	breq	.+12     	; 0x3450 <LCD_GoToXY+0x34>
    3444:	2b 81       	ldd	r18, Y+3	; 0x03
    3446:	3c 81       	ldd	r19, Y+4	; 0x04
    3448:	21 30       	cpi	r18, 0x01	; 1
    344a:	31 05       	cpc	r19, r1
    344c:	31 f0       	breq	.+12     	; 0x345a <LCD_GoToXY+0x3e>
    344e:	09 c0       	rjmp	.+18     	; 0x3462 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3450:	8a 81       	ldd	r24, Y+2	; 0x02
    3452:	80 58       	subi	r24, 0x80	; 128
    3454:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
    3458:	04 c0       	rjmp	.+8      	; 0x3462 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	80 54       	subi	r24, 0x40	; 64
    345e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
			break;
		}
	}
}
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	00 d0       	rcall	.+0      	; 0x3476 <LCD_displayString+0x6>
    3476:	0f 92       	push	r0
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	9b 83       	std	Y+3, r25	; 0x03
    347e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3480:	19 82       	std	Y+1, r1	; 0x01
    3482:	0e c0       	rjmp	.+28     	; 0x34a0 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	28 2f       	mov	r18, r24
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	9b 81       	ldd	r25, Y+3	; 0x03
    348e:	fc 01       	movw	r30, r24
    3490:	e2 0f       	add	r30, r18
    3492:	f3 1f       	adc	r31, r19
    3494:	80 81       	ld	r24, Z
    3496:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>
		i++;
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	8f 5f       	subi	r24, 0xFF	; 255
    349e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	28 2f       	mov	r18, r24
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	9b 81       	ldd	r25, Y+3	; 0x03
    34aa:	fc 01       	movw	r30, r24
    34ac:	e2 0f       	add	r30, r18
    34ae:	f3 1f       	adc	r31, r19
    34b0:	80 81       	ld	r24, Z
    34b2:	88 23       	and	r24, r24
    34b4:	39 f7       	brne	.-50     	; 0x3484 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	28 97       	sbiw	r28, 0x08	; 8
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	8b 83       	std	Y+3, r24	; 0x03
    34d8:	6c 83       	std	Y+4, r22	; 0x04
    34da:	5e 83       	std	Y+6, r21	; 0x06
    34dc:	4d 83       	std	Y+5, r20	; 0x05
    34de:	38 87       	std	Y+8, r19	; 0x08
    34e0:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    34e2:	1a 82       	std	Y+2, r1	; 0x02
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	88 23       	and	r24, r24
    34ec:	49 f4       	brne	.+18     	; 0x3500 <LCD_String_xy+0x3e>
    34ee:	8c 81       	ldd	r24, Y+4	; 0x04
    34f0:	80 31       	cpi	r24, 0x10	; 16
    34f2:	30 f4       	brcc	.+12     	; 0x3500 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    34f4:	8c 81       	ldd	r24, Y+4	; 0x04
    34f6:	8f 70       	andi	r24, 0x0F	; 15
    34f8:	80 68       	ori	r24, 0x80	; 128
    34fa:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
    34fe:	3a c0       	rjmp	.+116    	; 0x3574 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3500:	8b 81       	ldd	r24, Y+3	; 0x03
    3502:	81 30       	cpi	r24, 0x01	; 1
    3504:	b9 f5       	brne	.+110    	; 0x3574 <LCD_String_xy+0xb2>
    3506:	8c 81       	ldd	r24, Y+4	; 0x04
    3508:	80 31       	cpi	r24, 0x10	; 16
    350a:	a0 f5       	brcc	.+104    	; 0x3574 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    350c:	8c 81       	ldd	r24, Y+4	; 0x04
    350e:	8f 70       	andi	r24, 0x0F	; 15
    3510:	80 6c       	ori	r24, 0xC0	; 192
    3512:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
    3516:	2e c0       	rjmp	.+92     	; 0x3574 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	28 2f       	mov	r18, r24
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	fc 01       	movw	r30, r24
    3524:	e2 0f       	add	r30, r18
    3526:	f3 1f       	adc	r31, r19
    3528:	80 81       	ld	r24, Z
    352a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>
		i++;
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	8f 5f       	subi	r24, 0xFF	; 255
    3532:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	88 23       	and	r24, r24
    3538:	71 f4       	brne	.+28     	; 0x3556 <LCD_String_xy+0x94>
    353a:	8c 81       	ldd	r24, Y+4	; 0x04
    353c:	83 30       	cpi	r24, 0x03	; 3
    353e:	58 f0       	brcs	.+22     	; 0x3556 <LCD_String_xy+0x94>
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	8b 30       	cpi	r24, 0x0B	; 11
    3544:	41 f4       	brne	.+16     	; 0x3556 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_GoToXY>
			c++;
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	8f 5f       	subi	r24, 0xFF	; 255
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	0b c0       	rjmp	.+22     	; 0x356c <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	81 30       	cpi	r24, 0x01	; 1
    355a:	41 f4       	brne	.+16     	; 0x356c <LCD_String_xy+0xaa>
    355c:	8c 81       	ldd	r24, Y+4	; 0x04
    355e:	83 30       	cpi	r24, 0x03	; 3
    3560:	28 f0       	brcs	.+10     	; 0x356c <LCD_String_xy+0xaa>
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	8b 30       	cpi	r24, 0x0B	; 11
    3566:	11 f4       	brne	.+4      	; 0x356c <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    3568:	0e 94 ce 1a 	call	0x359c	; 0x359c <LCD_ClearScreen>
		}

		*count = c;
    356c:	ef 81       	ldd	r30, Y+7	; 0x07
    356e:	f8 85       	ldd	r31, Y+8	; 0x08
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3574:	8a 81       	ldd	r24, Y+2	; 0x02
    3576:	28 2f       	mov	r18, r24
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	fc 01       	movw	r30, r24
    3580:	e2 0f       	add	r30, r18
    3582:	f3 1f       	adc	r31, r19
    3584:	80 81       	ld	r24, Z
    3586:	88 23       	and	r24, r24
    3588:	39 f6       	brne	.-114    	; 0x3518 <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    358a:	28 96       	adiw	r28, 0x08	; 8
    358c:	0f b6       	in	r0, 0x3f	; 63
    358e:	f8 94       	cli
    3590:	de bf       	out	0x3e, r29	; 62
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	cd bf       	out	0x3d, r28	; 61
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	2e 97       	sbiw	r28, 0x0e	; 14
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a0 e0       	ldi	r26, 0x00	; 0
    35bc:	b0 e4       	ldi	r27, 0x40	; 64
    35be:	8b 87       	std	Y+11, r24	; 0x0b
    35c0:	9c 87       	std	Y+12, r25	; 0x0c
    35c2:	ad 87       	std	Y+13, r26	; 0x0d
    35c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    35cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	4a e7       	ldi	r20, 0x7A	; 122
    35d4:	55 e4       	ldi	r21, 0x45	; 69
    35d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	8f 83       	std	Y+7, r24	; 0x07
    35e0:	98 87       	std	Y+8, r25	; 0x08
    35e2:	a9 87       	std	Y+9, r26	; 0x09
    35e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e8       	ldi	r20, 0x80	; 128
    35f4:	5f e3       	ldi	r21, 0x3F	; 63
    35f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	2c f4       	brge	.+10     	; 0x3608 <LCD_ClearScreen+0x6c>
		__ticks = 1;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	9e 83       	std	Y+6, r25	; 0x06
    3604:	8d 83       	std	Y+5, r24	; 0x05
    3606:	3f c0       	rjmp	.+126    	; 0x3686 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3608:	6f 81       	ldd	r22, Y+7	; 0x07
    360a:	78 85       	ldd	r23, Y+8	; 0x08
    360c:	89 85       	ldd	r24, Y+9	; 0x09
    360e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	3f ef       	ldi	r19, 0xFF	; 255
    3614:	4f e7       	ldi	r20, 0x7F	; 127
    3616:	57 e4       	ldi	r21, 0x47	; 71
    3618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    361c:	18 16       	cp	r1, r24
    361e:	4c f5       	brge	.+82     	; 0x3672 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3620:	6b 85       	ldd	r22, Y+11	; 0x0b
    3622:	7c 85       	ldd	r23, Y+12	; 0x0c
    3624:	8d 85       	ldd	r24, Y+13	; 0x0d
    3626:	9e 85       	ldd	r25, Y+14	; 0x0e
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e2       	ldi	r20, 0x20	; 32
    362e:	51 e4       	ldi	r21, 0x41	; 65
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9e 83       	std	Y+6, r25	; 0x06
    3646:	8d 83       	std	Y+5, r24	; 0x05
    3648:	0f c0       	rjmp	.+30     	; 0x3668 <LCD_ClearScreen+0xcc>
    364a:	80 e9       	ldi	r24, 0x90	; 144
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	9c 83       	std	Y+4, r25	; 0x04
    3650:	8b 83       	std	Y+3, r24	; 0x03
    3652:	8b 81       	ldd	r24, Y+3	; 0x03
    3654:	9c 81       	ldd	r25, Y+4	; 0x04
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <LCD_ClearScreen+0xba>
    365a:	9c 83       	std	Y+4, r25	; 0x04
    365c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	9e 81       	ldd	r25, Y+6	; 0x06
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3668:	8d 81       	ldd	r24, Y+5	; 0x05
    366a:	9e 81       	ldd	r25, Y+6	; 0x06
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	69 f7       	brne	.-38     	; 0x364a <LCD_ClearScreen+0xae>
    3670:	14 c0       	rjmp	.+40     	; 0x369a <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3672:	6f 81       	ldd	r22, Y+7	; 0x07
    3674:	78 85       	ldd	r23, Y+8	; 0x08
    3676:	89 85       	ldd	r24, Y+9	; 0x09
    3678:	9a 85       	ldd	r25, Y+10	; 0x0a
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	9e 83       	std	Y+6, r25	; 0x06
    3684:	8d 83       	std	Y+5, r24	; 0x05
    3686:	8d 81       	ldd	r24, Y+5	; 0x05
    3688:	9e 81       	ldd	r25, Y+6	; 0x06
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	9a 81       	ldd	r25, Y+2	; 0x02
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <LCD_ClearScreen+0xf6>
    3696:	9a 83       	std	Y+2, r25	; 0x02
    3698:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    369a:	2e 96       	adiw	r28, 0x0e	; 14
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	cf 91       	pop	r28
    36a8:	df 91       	pop	r29
    36aa:	08 95       	ret

000036ac <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    36ac:	df 93       	push	r29
    36ae:	cf 93       	push	r28
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	2e 97       	sbiw	r28, 0x0e	; 14
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    36c0:	88 e1       	ldi	r24, 0x18	; 24
    36c2:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a0 ea       	ldi	r26, 0xA0	; 160
    36cc:	b1 e4       	ldi	r27, 0x41	; 65
    36ce:	8b 87       	std	Y+11, r24	; 0x0b
    36d0:	9c 87       	std	Y+12, r25	; 0x0c
    36d2:	ad 87       	std	Y+13, r26	; 0x0d
    36d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    36da:	8d 85       	ldd	r24, Y+13	; 0x0d
    36dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	4a e7       	ldi	r20, 0x7A	; 122
    36e4:	55 e4       	ldi	r21, 0x45	; 69
    36e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	8f 83       	std	Y+7, r24	; 0x07
    36f0:	98 87       	std	Y+8, r25	; 0x08
    36f2:	a9 87       	std	Y+9, r26	; 0x09
    36f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36f6:	6f 81       	ldd	r22, Y+7	; 0x07
    36f8:	78 85       	ldd	r23, Y+8	; 0x08
    36fa:	89 85       	ldd	r24, Y+9	; 0x09
    36fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e8       	ldi	r20, 0x80	; 128
    3704:	5f e3       	ldi	r21, 0x3F	; 63
    3706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    370a:	88 23       	and	r24, r24
    370c:	2c f4       	brge	.+10     	; 0x3718 <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	9e 83       	std	Y+6, r25	; 0x06
    3714:	8d 83       	std	Y+5, r24	; 0x05
    3716:	3f c0       	rjmp	.+126    	; 0x3796 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3718:	6f 81       	ldd	r22, Y+7	; 0x07
    371a:	78 85       	ldd	r23, Y+8	; 0x08
    371c:	89 85       	ldd	r24, Y+9	; 0x09
    371e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	3f ef       	ldi	r19, 0xFF	; 255
    3724:	4f e7       	ldi	r20, 0x7F	; 127
    3726:	57 e4       	ldi	r21, 0x47	; 71
    3728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    372c:	18 16       	cp	r1, r24
    372e:	4c f5       	brge	.+82     	; 0x3782 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3730:	6b 85       	ldd	r22, Y+11	; 0x0b
    3732:	7c 85       	ldd	r23, Y+12	; 0x0c
    3734:	8d 85       	ldd	r24, Y+13	; 0x0d
    3736:	9e 85       	ldd	r25, Y+14	; 0x0e
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e2       	ldi	r20, 0x20	; 32
    373e:	51 e4       	ldi	r21, 0x41	; 65
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	9e 83       	std	Y+6, r25	; 0x06
    3756:	8d 83       	std	Y+5, r24	; 0x05
    3758:	0f c0       	rjmp	.+30     	; 0x3778 <LCD_ShiftingLeft+0xcc>
    375a:	80 e9       	ldi	r24, 0x90	; 144
    375c:	91 e0       	ldi	r25, 0x01	; 1
    375e:	9c 83       	std	Y+4, r25	; 0x04
    3760:	8b 83       	std	Y+3, r24	; 0x03
    3762:	8b 81       	ldd	r24, Y+3	; 0x03
    3764:	9c 81       	ldd	r25, Y+4	; 0x04
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <LCD_ShiftingLeft+0xba>
    376a:	9c 83       	std	Y+4, r25	; 0x04
    376c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376e:	8d 81       	ldd	r24, Y+5	; 0x05
    3770:	9e 81       	ldd	r25, Y+6	; 0x06
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	9e 83       	std	Y+6, r25	; 0x06
    3776:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3778:	8d 81       	ldd	r24, Y+5	; 0x05
    377a:	9e 81       	ldd	r25, Y+6	; 0x06
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	69 f7       	brne	.-38     	; 0x375a <LCD_ShiftingLeft+0xae>
    3780:	14 c0       	rjmp	.+40     	; 0x37aa <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3782:	6f 81       	ldd	r22, Y+7	; 0x07
    3784:	78 85       	ldd	r23, Y+8	; 0x08
    3786:	89 85       	ldd	r24, Y+9	; 0x09
    3788:	9a 85       	ldd	r25, Y+10	; 0x0a
    378a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	9e 83       	std	Y+6, r25	; 0x06
    3794:	8d 83       	std	Y+5, r24	; 0x05
    3796:	8d 81       	ldd	r24, Y+5	; 0x05
    3798:	9e 81       	ldd	r25, Y+6	; 0x06
    379a:	9a 83       	std	Y+2, r25	; 0x02
    379c:	89 83       	std	Y+1, r24	; 0x01
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	9a 81       	ldd	r25, Y+2	; 0x02
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <LCD_ShiftingLeft+0xf6>
    37a6:	9a 83       	std	Y+2, r25	; 0x02
    37a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    37aa:	2e 96       	adiw	r28, 0x0e	; 14
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	cf 91       	pop	r28
    37b8:	df 91       	pop	r29
    37ba:	08 95       	ret

000037bc <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    37bc:	df 93       	push	r29
    37be:	cf 93       	push	r28
    37c0:	cd b7       	in	r28, 0x3d	; 61
    37c2:	de b7       	in	r29, 0x3e	; 62
    37c4:	2e 97       	sbiw	r28, 0x0e	; 14
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	f8 94       	cli
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    37d0:	8c e1       	ldi	r24, 0x1C	; 28
    37d2:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	a0 ea       	ldi	r26, 0xA0	; 160
    37dc:	b1 e4       	ldi	r27, 0x41	; 65
    37de:	8b 87       	std	Y+11, r24	; 0x0b
    37e0:	9c 87       	std	Y+12, r25	; 0x0c
    37e2:	ad 87       	std	Y+13, r26	; 0x0d
    37e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	4a e7       	ldi	r20, 0x7A	; 122
    37f4:	55 e4       	ldi	r21, 0x45	; 69
    37f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	8f 83       	std	Y+7, r24	; 0x07
    3800:	98 87       	std	Y+8, r25	; 0x08
    3802:	a9 87       	std	Y+9, r26	; 0x09
    3804:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3806:	6f 81       	ldd	r22, Y+7	; 0x07
    3808:	78 85       	ldd	r23, Y+8	; 0x08
    380a:	89 85       	ldd	r24, Y+9	; 0x09
    380c:	9a 85       	ldd	r25, Y+10	; 0x0a
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	40 e8       	ldi	r20, 0x80	; 128
    3814:	5f e3       	ldi	r21, 0x3F	; 63
    3816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    381a:	88 23       	and	r24, r24
    381c:	2c f4       	brge	.+10     	; 0x3828 <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	9e 83       	std	Y+6, r25	; 0x06
    3824:	8d 83       	std	Y+5, r24	; 0x05
    3826:	3f c0       	rjmp	.+126    	; 0x38a6 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3828:	6f 81       	ldd	r22, Y+7	; 0x07
    382a:	78 85       	ldd	r23, Y+8	; 0x08
    382c:	89 85       	ldd	r24, Y+9	; 0x09
    382e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	3f ef       	ldi	r19, 0xFF	; 255
    3834:	4f e7       	ldi	r20, 0x7F	; 127
    3836:	57 e4       	ldi	r21, 0x47	; 71
    3838:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    383c:	18 16       	cp	r1, r24
    383e:	4c f5       	brge	.+82     	; 0x3892 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3840:	6b 85       	ldd	r22, Y+11	; 0x0b
    3842:	7c 85       	ldd	r23, Y+12	; 0x0c
    3844:	8d 85       	ldd	r24, Y+13	; 0x0d
    3846:	9e 85       	ldd	r25, Y+14	; 0x0e
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e2       	ldi	r20, 0x20	; 32
    384e:	51 e4       	ldi	r21, 0x41	; 65
    3850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	bc 01       	movw	r22, r24
    385a:	cd 01       	movw	r24, r26
    385c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	9e 83       	std	Y+6, r25	; 0x06
    3866:	8d 83       	std	Y+5, r24	; 0x05
    3868:	0f c0       	rjmp	.+30     	; 0x3888 <LCD_ShiftingRight+0xcc>
    386a:	80 e9       	ldi	r24, 0x90	; 144
    386c:	91 e0       	ldi	r25, 0x01	; 1
    386e:	9c 83       	std	Y+4, r25	; 0x04
    3870:	8b 83       	std	Y+3, r24	; 0x03
    3872:	8b 81       	ldd	r24, Y+3	; 0x03
    3874:	9c 81       	ldd	r25, Y+4	; 0x04
    3876:	01 97       	sbiw	r24, 0x01	; 1
    3878:	f1 f7       	brne	.-4      	; 0x3876 <LCD_ShiftingRight+0xba>
    387a:	9c 83       	std	Y+4, r25	; 0x04
    387c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	9e 83       	std	Y+6, r25	; 0x06
    3886:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3888:	8d 81       	ldd	r24, Y+5	; 0x05
    388a:	9e 81       	ldd	r25, Y+6	; 0x06
    388c:	00 97       	sbiw	r24, 0x00	; 0
    388e:	69 f7       	brne	.-38     	; 0x386a <LCD_ShiftingRight+0xae>
    3890:	14 c0       	rjmp	.+40     	; 0x38ba <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3892:	6f 81       	ldd	r22, Y+7	; 0x07
    3894:	78 85       	ldd	r23, Y+8	; 0x08
    3896:	89 85       	ldd	r24, Y+9	; 0x09
    3898:	9a 85       	ldd	r25, Y+10	; 0x0a
    389a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	9e 83       	std	Y+6, r25	; 0x06
    38a4:	8d 83       	std	Y+5, r24	; 0x05
    38a6:	8d 81       	ldd	r24, Y+5	; 0x05
    38a8:	9e 81       	ldd	r25, Y+6	; 0x06
    38aa:	9a 83       	std	Y+2, r25	; 0x02
    38ac:	89 83       	std	Y+1, r24	; 0x01
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	9a 81       	ldd	r25, Y+2	; 0x02
    38b2:	01 97       	sbiw	r24, 0x01	; 1
    38b4:	f1 f7       	brne	.-4      	; 0x38b2 <LCD_ShiftingRight+0xf6>
    38b6:	9a 83       	std	Y+2, r25	; 0x02
    38b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    38ba:	2e 96       	adiw	r28, 0x0e	; 14
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	08 95       	ret

000038cc <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    38cc:	0f 93       	push	r16
    38ce:	df 93       	push	r29
    38d0:	cf 93       	push	r28
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	28 97       	sbiw	r28, 0x08	; 8
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	8b 83       	std	Y+3, r24	; 0x03
    38e4:	7d 83       	std	Y+5, r23	; 0x05
    38e6:	6c 83       	std	Y+4, r22	; 0x04
    38e8:	4e 83       	std	Y+6, r20	; 0x06
    38ea:	2f 83       	std	Y+7, r18	; 0x07
    38ec:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    38ee:	88 85       	ldd	r24, Y+8	; 0x08
    38f0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    38f4:	1a 82       	std	Y+2, r1	; 0x02
    38f6:	19 82       	std	Y+1, r1	; 0x01
    38f8:	0f c0       	rjmp	.+30     	; 0x3918 <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    38fa:	29 81       	ldd	r18, Y+1	; 0x01
    38fc:	3a 81       	ldd	r19, Y+2	; 0x02
    38fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3900:	9d 81       	ldd	r25, Y+5	; 0x05
    3902:	fc 01       	movw	r30, r24
    3904:	e2 0f       	add	r30, r18
    3906:	f3 1f       	adc	r31, r19
    3908:	80 81       	ld	r24, Z
    390a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	9a 81       	ldd	r25, Y+2	; 0x02
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	9a 81       	ldd	r25, Y+2	; 0x02
    391c:	88 30       	cpi	r24, 0x08	; 8
    391e:	91 05       	cpc	r25, r1
    3920:	64 f3       	brlt	.-40     	; 0x38fa <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3922:	8e 81       	ldd	r24, Y+6	; 0x06
    3924:	6f 81       	ldd	r22, Y+7	; 0x07
    3926:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    392a:	8b 81       	ldd	r24, Y+3	; 0x03
    392c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3930:	8f 81       	ldd	r24, Y+7	; 0x07
    3932:	80 31       	cpi	r24, 0x10	; 16
    3934:	48 f0       	brcs	.+18     	; 0x3948 <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3936:	0e 94 ce 1a 	call	0x359c	; 0x359c <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>
	}
}
    3948:	28 96       	adiw	r28, 0x08	; 8
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	de bf       	out	0x3e, r29	; 62
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	cd bf       	out	0x3d, r28	; 61
    3954:	cf 91       	pop	r28
    3956:	df 91       	pop	r29
    3958:	0f 91       	pop	r16
    395a:	08 95       	ret

0000395c <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	28 97       	sbiw	r28, 0x08	; 8
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	6d 83       	std	Y+5, r22	; 0x05
    3972:	7e 83       	std	Y+6, r23	; 0x06
    3974:	8f 83       	std	Y+7, r24	; 0x07
    3976:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    3978:	6d 81       	ldd	r22, Y+5	; 0x05
    397a:	7e 81       	ldd	r23, Y+6	; 0x06
    397c:	8f 81       	ldd	r24, Y+7	; 0x07
    397e:	98 85       	ldd	r25, Y+8	; 0x08
    3980:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	9c 83       	std	Y+4, r25	; 0x04
    398a:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    398c:	8b 81       	ldd	r24, Y+3	; 0x03
    398e:	9c 81       	ldd	r25, Y+4	; 0x04
    3990:	aa 27       	eor	r26, r26
    3992:	97 fd       	sbrc	r25, 7
    3994:	a0 95       	com	r26
    3996:	ba 2f       	mov	r27, r26
    3998:	bc 01       	movw	r22, r24
    399a:	cd 01       	movw	r24, r26
    399c:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    39a0:	9b 01       	movw	r18, r22
    39a2:	ac 01       	movw	r20, r24
    39a4:	6d 81       	ldd	r22, Y+5	; 0x05
    39a6:	7e 81       	ldd	r23, Y+6	; 0x06
    39a8:	8f 81       	ldd	r24, Y+7	; 0x07
    39aa:	98 85       	ldd	r25, Y+8	; 0x08
    39ac:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	4a e7       	ldi	r20, 0x7A	; 122
    39be:	54 e4       	ldi	r21, 0x44	; 68
    39c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	bc 01       	movw	r22, r24
    39ca:	cd 01       	movw	r24, r26
    39cc:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	9a 83       	std	Y+2, r25	; 0x02
    39d6:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    39d8:	8b 81       	ldd	r24, Y+3	; 0x03
    39da:	9c 81       	ldd	r25, Y+4	; 0x04
    39dc:	84 36       	cpi	r24, 0x64	; 100
    39de:	91 05       	cpc	r25, r1
    39e0:	54 f0       	brlt	.+20     	; 0x39f6 <displayFloatOnLCD+0x9a>
    	integerPart /= 10;
    39e2:	8b 81       	ldd	r24, Y+3	; 0x03
    39e4:	9c 81       	ldd	r25, Y+4	; 0x04
    39e6:	2a e0       	ldi	r18, 0x0A	; 10
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	b9 01       	movw	r22, r18
    39ec:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <__divmodhi4>
    39f0:	cb 01       	movw	r24, r22
    39f2:	9c 83       	std	Y+4, r25	; 0x04
    39f4:	8b 83       	std	Y+3, r24	; 0x03
    }
    LCD_display_WriteNumber(integerPart);
    39f6:	8b 81       	ldd	r24, Y+3	; 0x03
    39f8:	9c 81       	ldd	r25, Y+4	; 0x04
    39fa:	aa 27       	eor	r26, r26
    39fc:	97 fd       	sbrc	r25, 7
    39fe:	a0 95       	com	r26
    3a00:	ba 2f       	mov	r27, r26
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_display_WriteNumber>
    LCD_displayCharacter('.');
    3a0a:	8e e2       	ldi	r24, 0x2E	; 46
    3a0c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>
    LCD_display_WriteNumber(decimalPart);
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	9a 81       	ldd	r25, Y+2	; 0x02
    3a14:	aa 27       	eor	r26, r26
    3a16:	97 fd       	sbrc	r25, 7
    3a18:	a0 95       	com	r26
    3a1a:	ba 2f       	mov	r27, r26
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_display_WriteNumber>
    
}
    3a24:	28 96       	adiw	r28, 0x08	; 8
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	cf 91       	pop	r28
    3a32:	df 91       	pop	r29
    3a34:	08 95       	ret

00003a36 <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    3a36:	df 93       	push	r29
    3a38:	cf 93       	push	r28
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <displayMinusNumbers+0x6>
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <displayMinusNumbers+0x8>
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	69 83       	std	Y+1, r22	; 0x01
    3a44:	7a 83       	std	Y+2, r23	; 0x02
    3a46:	8b 83       	std	Y+3, r24	; 0x03
    3a48:	9c 83       	std	Y+4, r25	; 0x04
	
	LCD_displayCharacter('-');
    3a4a:	8d e2       	ldi	r24, 0x2D	; 45
    3a4c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <LCD_displayCharacter>
	number = -number;
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	9a 81       	ldd	r25, Y+2	; 0x02
    3a54:	ab 81       	ldd	r26, Y+3	; 0x03
    3a56:	bc 81       	ldd	r27, Y+4	; 0x04
    3a58:	b0 58       	subi	r27, 0x80	; 128
    3a5a:	89 83       	std	Y+1, r24	; 0x01
    3a5c:	9a 83       	std	Y+2, r25	; 0x02
    3a5e:	ab 83       	std	Y+3, r26	; 0x03
    3a60:	bc 83       	std	Y+4, r27	; 0x04
    LCD_display_WriteNumber(number);   
    3a62:	69 81       	ldd	r22, Y+1	; 0x01
    3a64:	7a 81       	ldd	r23, Y+2	; 0x02
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	bc 01       	movw	r22, r24
    3a74:	cd 01       	movw	r24, r26
    3a76:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_display_WriteNumber>
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	cf 91       	pop	r28
    3a84:	df 91       	pop	r29
    3a86:	08 95       	ret

00003a88 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	65 97       	sbiw	r28, 0x15	; 21
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	f8 94       	cli
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	cd bf       	out	0x3d, r28	; 61
    3a9c:	9d 8b       	std	Y+21, r25	; 0x15
    3a9e:	8c 8b       	std	Y+20, r24	; 0x14
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    3aa4:	1f 86       	std	Y+15, r1	; 0x0f
	
	if(Copy_pu8ReturnedKey != NULL){
    3aa6:	8c 89       	ldd	r24, Y+20	; 0x14
    3aa8:	9d 89       	ldd	r25, Y+21	; 0x15
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <KPD_u8GetKeyState+0x28>
    3aae:	f0 c0       	rjmp	.+480    	; 0x3c90 <KPD_u8GetKeyState+0x208>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
    3ab0:	ec 89       	ldd	r30, Y+20	; 0x14
    3ab2:	fd 89       	ldd	r31, Y+21	; 0x15
    3ab4:	8f ef       	ldi	r24, 0xFF	; 255
    3ab6:	80 83       	st	Z, r24
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    3ab8:	19 8a       	std	Y+17, r1	; 0x11
    3aba:	e5 c0       	rjmp	.+458    	; 0x3c86 <KPD_u8GetKeyState+0x1fe>
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    3abc:	89 89       	ldd	r24, Y+17	; 0x11
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	e3 57       	subi	r30, 0x73	; 115
    3ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac8:	90 81       	ld	r25, Z
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	69 2f       	mov	r22, r25
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    3ad4:	18 8a       	std	Y+16, r1	; 0x10
    3ad6:	c1 c0       	rjmp	.+386    	; 0x3c5a <KPD_u8GetKeyState+0x1d2>
				DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3ad8:	88 89       	ldd	r24, Y+16	; 0x10
    3ada:	88 2f       	mov	r24, r24
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	fc 01       	movw	r30, r24
    3ae0:	ef 56       	subi	r30, 0x6F	; 111
    3ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae4:	90 81       	ld	r25, Z
    3ae6:	9e 01       	movw	r18, r28
    3ae8:	2d 5e       	subi	r18, 0xED	; 237
    3aea:	3f 4f       	sbci	r19, 0xFF	; 255
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	69 2f       	mov	r22, r25
    3af0:	a9 01       	movw	r20, r18
    3af2:	0e 94 07 11 	call	0x220e	; 0x220e <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
    3af6:	8b 89       	ldd	r24, Y+19	; 0x13
    3af8:	88 23       	and	r24, r24
    3afa:	09 f0       	breq	.+2      	; 0x3afe <KPD_u8GetKeyState+0x76>
    3afc:	ab c0       	rjmp	.+342    	; 0x3c54 <KPD_u8GetKeyState+0x1cc>
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	a0 ea       	ldi	r26, 0xA0	; 160
    3b04:	b1 e4       	ldi	r27, 0x41	; 65
    3b06:	8b 87       	std	Y+11, r24	; 0x0b
    3b08:	9c 87       	std	Y+12, r25	; 0x0c
    3b0a:	ad 87       	std	Y+13, r26	; 0x0d
    3b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	4a e7       	ldi	r20, 0x7A	; 122
    3b1c:	55 e4       	ldi	r21, 0x45	; 69
    3b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	8f 83       	std	Y+7, r24	; 0x07
    3b28:	98 87       	std	Y+8, r25	; 0x08
    3b2a:	a9 87       	std	Y+9, r26	; 0x09
    3b2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b30:	78 85       	ldd	r23, Y+8	; 0x08
    3b32:	89 85       	ldd	r24, Y+9	; 0x09
    3b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	40 e8       	ldi	r20, 0x80	; 128
    3b3c:	5f e3       	ldi	r21, 0x3F	; 63
    3b3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b42:	88 23       	and	r24, r24
    3b44:	2c f4       	brge	.+10     	; 0x3b50 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	9e 83       	std	Y+6, r25	; 0x06
    3b4c:	8d 83       	std	Y+5, r24	; 0x05
    3b4e:	3f c0       	rjmp	.+126    	; 0x3bce <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    3b50:	6f 81       	ldd	r22, Y+7	; 0x07
    3b52:	78 85       	ldd	r23, Y+8	; 0x08
    3b54:	89 85       	ldd	r24, Y+9	; 0x09
    3b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	3f ef       	ldi	r19, 0xFF	; 255
    3b5c:	4f e7       	ldi	r20, 0x7F	; 127
    3b5e:	57 e4       	ldi	r21, 0x47	; 71
    3b60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b64:	18 16       	cp	r1, r24
    3b66:	4c f5       	brge	.+82     	; 0x3bba <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	40 e2       	ldi	r20, 0x20	; 32
    3b76:	51 e4       	ldi	r21, 0x41	; 65
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	bc 01       	movw	r22, r24
    3b82:	cd 01       	movw	r24, r26
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9e 83       	std	Y+6, r25	; 0x06
    3b8e:	8d 83       	std	Y+5, r24	; 0x05
    3b90:	0f c0       	rjmp	.+30     	; 0x3bb0 <KPD_u8GetKeyState+0x128>
    3b92:	80 e9       	ldi	r24, 0x90	; 144
    3b94:	91 e0       	ldi	r25, 0x01	; 1
    3b96:	9c 83       	std	Y+4, r25	; 0x04
    3b98:	8b 83       	std	Y+3, r24	; 0x03
    3b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9e:	01 97       	sbiw	r24, 0x01	; 1
    3ba0:	f1 f7       	brne	.-4      	; 0x3b9e <KPD_u8GetKeyState+0x116>
    3ba2:	9c 83       	std	Y+4, r25	; 0x04
    3ba4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	9e 83       	std	Y+6, r25	; 0x06
    3bae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb4:	00 97       	sbiw	r24, 0x00	; 0
    3bb6:	69 f7       	brne	.-38     	; 0x3b92 <KPD_u8GetKeyState+0x10a>
    3bb8:	14 c0       	rjmp	.+40     	; 0x3be2 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bba:	6f 81       	ldd	r22, Y+7	; 0x07
    3bbc:	78 85       	ldd	r23, Y+8	; 0x08
    3bbe:	89 85       	ldd	r24, Y+9	; 0x09
    3bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	9e 83       	std	Y+6, r25	; 0x06
    3bcc:	8d 83       	std	Y+5, r24	; 0x05
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	9a 83       	std	Y+2, r25	; 0x02
    3bd4:	89 83       	std	Y+1, r24	; 0x01
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	f1 f7       	brne	.-4      	; 0x3bda <KPD_u8GetKeyState+0x152>
    3bde:	9a 83       	std	Y+2, r25	; 0x02
    3be0:	89 83       	std	Y+1, r24	; 0x01
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3be2:	88 89       	ldd	r24, Y+16	; 0x10
    3be4:	88 2f       	mov	r24, r24
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	fc 01       	movw	r30, r24
    3bea:	ef 56       	subi	r30, 0x6F	; 111
    3bec:	fe 4f       	sbci	r31, 0xFE	; 254
    3bee:	90 81       	ld	r25, Z
    3bf0:	9e 01       	movw	r18, r28
    3bf2:	2d 5e       	subi	r18, 0xED	; 237
    3bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	69 2f       	mov	r22, r25
    3bfa:	a9 01       	movw	r20, r18
    3bfc:	0e 94 07 11 	call	0x220e	; 0x220e <DIO_u8GetPinValue>
    3c00:	0f c0       	rjmp	.+30     	; 0x3c20 <KPD_u8GetKeyState+0x198>
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3c02:	88 89       	ldd	r24, Y+16	; 0x10
    3c04:	88 2f       	mov	r24, r24
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	fc 01       	movw	r30, r24
    3c0a:	ef 56       	subi	r30, 0x6F	; 111
    3c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0e:	90 81       	ld	r25, Z
    3c10:	9e 01       	movw	r18, r28
    3c12:	2d 5e       	subi	r18, 0xED	; 237
    3c14:	3f 4f       	sbci	r19, 0xFF	; 255
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	69 2f       	mov	r22, r25
    3c1a:	a9 01       	movw	r20, r18
    3c1c:	0e 94 07 11 	call	0x220e	; 0x220e <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
    3c20:	8b 89       	ldd	r24, Y+19	; 0x13
    3c22:	88 23       	and	r24, r24
    3c24:	71 f3       	breq	.-36     	; 0x3c02 <KPD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					}
					
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3c26:	89 89       	ldd	r24, Y+17	; 0x11
    3c28:	48 2f       	mov	r20, r24
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	88 89       	ldd	r24, Y+16	; 0x10
    3c2e:	28 2f       	mov	r18, r24
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	ca 01       	movw	r24, r20
    3c34:	88 0f       	add	r24, r24
    3c36:	99 1f       	adc	r25, r25
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	82 0f       	add	r24, r18
    3c3e:	93 1f       	adc	r25, r19
    3c40:	fc 01       	movw	r30, r24
    3c42:	e3 58       	subi	r30, 0x83	; 131
    3c44:	fe 4f       	sbci	r31, 0xFE	; 254
    3c46:	80 81       	ld	r24, Z
    3c48:	ec 89       	ldd	r30, Y+20	; 0x14
    3c4a:	fd 89       	ldd	r31, Y+21	; 0x15
    3c4c:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	8f 87       	std	Y+15, r24	; 0x0f
    3c52:	07 c0       	rjmp	.+14     	; 0x3c62 <KPD_u8GetKeyState+0x1da>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    3c54:	88 89       	ldd	r24, Y+16	; 0x10
    3c56:	8f 5f       	subi	r24, 0xFF	; 255
    3c58:	88 8b       	std	Y+16, r24	; 0x10
    3c5a:	88 89       	ldd	r24, Y+16	; 0x10
    3c5c:	84 30       	cpi	r24, 0x04	; 4
    3c5e:	08 f4       	brcc	.+2      	; 0x3c62 <KPD_u8GetKeyState+0x1da>
    3c60:	3b cf       	rjmp	.-394    	; 0x3ad8 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    3c62:	89 89       	ldd	r24, Y+17	; 0x11
    3c64:	88 2f       	mov	r24, r24
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	fc 01       	movw	r30, r24
    3c6a:	e3 57       	subi	r30, 0x73	; 115
    3c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c6e:	90 81       	ld	r25, Z
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	69 2f       	mov	r22, r25
    3c74:	41 e0       	ldi	r20, 0x01	; 1
    3c76:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
			if(Local_u8Flag){
    3c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c7c:	88 23       	and	r24, r24
    3c7e:	49 f4       	brne	.+18     	; 0x3c92 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
	
	if(Copy_pu8ReturnedKey != NULL){
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    3c80:	89 89       	ldd	r24, Y+17	; 0x11
    3c82:	8f 5f       	subi	r24, 0xFF	; 255
    3c84:	89 8b       	std	Y+17, r24	; 0x11
    3c86:	89 89       	ldd	r24, Y+17	; 0x11
    3c88:	84 30       	cpi	r24, 0x04	; 4
    3c8a:	08 f4       	brcc	.+2      	; 0x3c8e <KPD_u8GetKeyState+0x206>
    3c8c:	17 cf       	rjmp	.-466    	; 0x3abc <KPD_u8GetKeyState+0x34>
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <KPD_u8GetKeyState+0x20a>
				break;
			}
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    3c90:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    3c92:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3c94:	65 96       	adiw	r28, 0x15	; 21
    3c96:	0f b6       	in	r0, 0x3f	; 63
    3c98:	f8 94       	cli
    3c9a:	de bf       	out	0x3e, r29	; 62
    3c9c:	0f be       	out	0x3f, r0	; 63
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	cf 91       	pop	r28
    3ca2:	df 91       	pop	r29
    3ca4:	08 95       	ret

00003ca6 <KPD_voidInit>:




void KPD_voidInit(void){
    3ca6:	df 93       	push	r29
    3ca8:	cf 93       	push	r28
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <KPD_voidInit+0x6>
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i <= 3; i++){
    3cb0:	1a 82       	std	Y+2, r1	; 0x02
    3cb2:	19 82       	std	Y+1, r1	; 0x01
    3cb4:	31 c0       	rjmp	.+98     	; 0x3d18 <KPD_voidInit+0x72>
		/* Rows */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT);
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	fc 01       	movw	r30, r24
    3cbc:	e3 57       	subi	r30, 0x73	; 115
    3cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc0:	90 81       	ld	r25, Z
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	69 2f       	mov	r22, r25
    3cc6:	41 e0       	ldi	r20, 0x01	; 1
    3cc8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT_HIGH);
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd0:	fc 01       	movw	r30, r24
    3cd2:	e3 57       	subi	r30, 0x73	; 115
    3cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd6:	90 81       	ld	r25, Z
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	69 2f       	mov	r22, r25
    3cdc:	41 e0       	ldi	r20, 0x01	; 1
    3cde:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	ef 56       	subi	r30, 0x6F	; 111
    3cea:	fe 4f       	sbci	r31, 0xFE	; 254
    3cec:	90 81       	ld	r25, Z
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	69 2f       	mov	r22, r25
    3cf2:	40 e0       	ldi	r20, 0x00	; 0
    3cf4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	ef 56       	subi	r30, 0x6F	; 111
    3d00:	fe 4f       	sbci	r31, 0xFE	; 254
    3d02:	90 81       	ld	r25, Z
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	69 2f       	mov	r22, r25
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>




void KPD_voidInit(void){
	for(int i = 0; i <= 3; i++){
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	9a 81       	ldd	r25, Y+2	; 0x02
    3d12:	01 96       	adiw	r24, 0x01	; 1
    3d14:	9a 83       	std	Y+2, r25	; 0x02
    3d16:	89 83       	std	Y+1, r24	; 0x01
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1c:	84 30       	cpi	r24, 0x04	; 4
    3d1e:	91 05       	cpc	r25, r1
    3d20:	54 f2       	brlt	.-108    	; 0x3cb6 <KPD_voidInit+0x10>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
	}
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	08 95       	ret

00003d2c <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <DC_Motor_Init+0x6>
    3d32:	0f 92       	push	r0
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	8a 83       	std	Y+2, r24	; 0x02
    3d3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    3d40:	8a 81       	ldd	r24, Y+2	; 0x02
    3d42:	81 30       	cpi	r24, 0x01	; 1
    3d44:	81 f4       	brne	.+32     	; 0x3d66 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	61 e0       	ldi	r22, 0x01	; 1
    3d4a:	41 e0       	ldi	r20, 0x01	; 1
    3d4c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	63 e0       	ldi	r22, 0x03	; 3
    3d54:	41 e0       	ldi	r20, 0x01	; 1
    3d56:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	62 e0       	ldi	r22, 0x02	; 2
    3d5e:	41 e0       	ldi	r20, 0x01	; 1
    3d60:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
    3d64:	14 c0       	rjmp	.+40     	; 0x3d8e <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    3d66:	8b 81       	ldd	r24, Y+3	; 0x03
    3d68:	81 30       	cpi	r24, 0x01	; 1
    3d6a:	81 f4       	brne	.+32     	; 0x3d8c <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	62 e0       	ldi	r22, 0x02	; 2
    3d70:	41 e0       	ldi	r20, 0x01	; 1
    3d72:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    3d76:	81 e0       	ldi	r24, 0x01	; 1
    3d78:	61 e0       	ldi	r22, 0x01	; 1
    3d7a:	41 e0       	ldi	r20, 0x01	; 1
    3d7c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	41 e0       	ldi	r20, 0x01	; 1
    3d86:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPinDirection>
    3d8a:	01 c0       	rjmp	.+2      	; 0x3d8e <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3d8c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	cf 91       	pop	r28
    3d98:	df 91       	pop	r29
    3d9a:	08 95       	ret

00003d9c <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	29 97       	sbiw	r28, 0x09	; 9
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	8a 83       	std	Y+2, r24	; 0x02
    3db2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	28 2f       	mov	r18, r24
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	39 87       	std	Y+9, r19	; 0x09
    3dc0:	28 87       	std	Y+8, r18	; 0x08
    3dc2:	88 85       	ldd	r24, Y+8	; 0x08
    3dc4:	99 85       	ldd	r25, Y+9	; 0x09
    3dc6:	00 97       	sbiw	r24, 0x00	; 0
    3dc8:	31 f0       	breq	.+12     	; 0x3dd6 <DC_Motor_Rotate+0x3a>
    3dca:	28 85       	ldd	r18, Y+8	; 0x08
    3dcc:	39 85       	ldd	r19, Y+9	; 0x09
    3dce:	21 30       	cpi	r18, 0x01	; 1
    3dd0:	31 05       	cpc	r19, r1
    3dd2:	89 f1       	breq	.+98     	; 0x3e36 <DC_Motor_Rotate+0x9a>
    3dd4:	60 c0       	rjmp	.+192    	; 0x3e96 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    3dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd8:	28 2f       	mov	r18, r24
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	3f 83       	std	Y+7, r19	; 0x07
    3dde:	2e 83       	std	Y+6, r18	; 0x06
    3de0:	8e 81       	ldd	r24, Y+6	; 0x06
    3de2:	9f 81       	ldd	r25, Y+7	; 0x07
    3de4:	00 97       	sbiw	r24, 0x00	; 0
    3de6:	a9 f0       	breq	.+42     	; 0x3e12 <DC_Motor_Rotate+0x76>
    3de8:	2e 81       	ldd	r18, Y+6	; 0x06
    3dea:	3f 81       	ldd	r19, Y+7	; 0x07
    3dec:	21 30       	cpi	r18, 0x01	; 1
    3dee:	31 05       	cpc	r19, r1
    3df0:	01 f5       	brne	.+64     	; 0x3e32 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	41 e0       	ldi	r20, 0x01	; 1
    3df8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	63 e0       	ldi	r22, 0x03	; 3
    3e00:	41 e0       	ldi	r20, 0x01	; 1
    3e02:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	62 e0       	ldi	r22, 0x02	; 2
    3e0a:	40 e0       	ldi	r20, 0x00	; 0
    3e0c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
    3e10:	43 c0       	rjmp	.+134    	; 0x3e98 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	61 e0       	ldi	r22, 0x01	; 1
    3e16:	41 e0       	ldi	r20, 0x01	; 1
    3e18:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	63 e0       	ldi	r22, 0x03	; 3
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	62 e0       	ldi	r22, 0x02	; 2
    3e2a:	41 e0       	ldi	r20, 0x01	; 1
    3e2c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
    3e30:	33 c0       	rjmp	.+102    	; 0x3e98 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3e32:	19 82       	std	Y+1, r1	; 0x01
    3e34:	31 c0       	rjmp	.+98     	; 0x3e98 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    3e36:	8b 81       	ldd	r24, Y+3	; 0x03
    3e38:	28 2f       	mov	r18, r24
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	3d 83       	std	Y+5, r19	; 0x05
    3e3e:	2c 83       	std	Y+4, r18	; 0x04
    3e40:	8c 81       	ldd	r24, Y+4	; 0x04
    3e42:	9d 81       	ldd	r25, Y+5	; 0x05
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	a9 f0       	breq	.+42     	; 0x3e72 <DC_Motor_Rotate+0xd6>
    3e48:	2c 81       	ldd	r18, Y+4	; 0x04
    3e4a:	3d 81       	ldd	r19, Y+5	; 0x05
    3e4c:	21 30       	cpi	r18, 0x01	; 1
    3e4e:	31 05       	cpc	r19, r1
    3e50:	01 f5       	brne	.+64     	; 0x3e92 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	62 e0       	ldi	r22, 0x02	; 2
    3e56:	41 e0       	ldi	r20, 0x01	; 1
    3e58:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	61 e0       	ldi	r22, 0x01	; 1
    3e60:	41 e0       	ldi	r20, 0x01	; 1
    3e62:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	40 e0       	ldi	r20, 0x00	; 0
    3e6c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
    3e70:	13 c0       	rjmp	.+38     	; 0x3e98 <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	62 e0       	ldi	r22, 0x02	; 2
    3e76:	41 e0       	ldi	r20, 0x01	; 1
    3e78:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	61 e0       	ldi	r22, 0x01	; 1
    3e80:	40 e0       	ldi	r20, 0x00	; 0
    3e82:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	41 e0       	ldi	r20, 0x01	; 1
    3e8c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
    3e90:	03 c0       	rjmp	.+6      	; 0x3e98 <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    3e92:	19 82       	std	Y+1, r1	; 0x01
    3e94:	01 c0       	rjmp	.+2      	; 0x3e98 <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    3e96:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e9a:	29 96       	adiw	r28, 0x09	; 9
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	cd bf       	out	0x3d, r28	; 61
    3ea6:	cf 91       	pop	r28
    3ea8:	df 91       	pop	r29
    3eaa:	08 95       	ret

00003eac <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    3eac:	df 93       	push	r29
    3eae:	cf 93       	push	r28
    3eb0:	00 d0       	rcall	.+0      	; 0x3eb2 <DC_Motor_Stop+0x6>
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    3eb6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    3ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebe:	88 23       	and	r24, r24
    3ec0:	31 f4       	brne	.+12     	; 0x3ece <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	61 e0       	ldi	r22, 0x01	; 1
    3ec6:	40 e0       	ldi	r20, 0x00	; 0
    3ec8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
    3ecc:	0a c0       	rjmp	.+20     	; 0x3ee2 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    3ece:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed0:	81 30       	cpi	r24, 0x01	; 1
    3ed2:	31 f4       	brne	.+12     	; 0x3ee0 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	62 e0       	ldi	r22, 0x02	; 2
    3ed8:	40 e0       	ldi	r20, 0x00	; 0
    3eda:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
    3ede:	01 c0       	rjmp	.+2      	; 0x3ee2 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    3ee0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    3ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ee4:	0f 90       	pop	r0
    3ee6:	0f 90       	pop	r0
    3ee8:	cf 91       	pop	r28
    3eea:	df 91       	pop	r29
    3eec:	08 95       	ret

00003eee <SevenSegment_Init>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevenSegment_Private.h"

void SevenSegment_Init(u8 Copy_u8PortId){
    3eee:	df 93       	push	r29
    3ef0:	cf 93       	push	r28
    3ef2:	0f 92       	push	r0
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(Copy_u8PortId, DIO_u8_HIGH);
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	61 e0       	ldi	r22, 0x01	; 1
    3efe:	0e 94 47 12 	call	0x248e	; 0x248e <DIO_u8SetPortDirection>
}
    3f02:	0f 90       	pop	r0
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	08 95       	ret

00003f0a <SevenSegment_Display>:

void SevenSegment_Display(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6)
{
    3f0a:	af 92       	push	r10
    3f0c:	cf 92       	push	r12
    3f0e:	ef 92       	push	r14
    3f10:	0f 93       	push	r16
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	cd b7       	in	r28, 0x3d	; 61
    3f18:	de b7       	in	r29, 0x3e	; 62
    3f1a:	2a 97       	sbiw	r28, 0x0a	; 10
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	89 83       	std	Y+1, r24	; 0x01
    3f28:	6a 83       	std	Y+2, r22	; 0x02
    3f2a:	4b 83       	std	Y+3, r20	; 0x03
    3f2c:	2c 83       	std	Y+4, r18	; 0x04
    3f2e:	0d 83       	std	Y+5, r16	; 0x05
    3f30:	ee 82       	std	Y+6, r14	; 0x06
    3f32:	cf 82       	std	Y+7, r12	; 0x07
    3f34:	a8 86       	std	Y+8, r10	; 0x08
	switch (Copy_u8PortId)
    3f36:	89 81       	ldd	r24, Y+1	; 0x01
    3f38:	28 2f       	mov	r18, r24
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	3a 87       	std	Y+10, r19	; 0x0a
    3f3e:	29 87       	std	Y+9, r18	; 0x09
    3f40:	89 85       	ldd	r24, Y+9	; 0x09
    3f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f44:	81 30       	cpi	r24, 0x01	; 1
    3f46:	91 05       	cpc	r25, r1
    3f48:	09 f4       	brne	.+2      	; 0x3f4c <SevenSegment_Display+0x42>
    3f4a:	96 c0       	rjmp	.+300    	; 0x4078 <SevenSegment_Display+0x16e>
    3f4c:	29 85       	ldd	r18, Y+9	; 0x09
    3f4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f50:	22 30       	cpi	r18, 0x02	; 2
    3f52:	31 05       	cpc	r19, r1
    3f54:	2c f4       	brge	.+10     	; 0x3f60 <SevenSegment_Display+0x56>
    3f56:	89 85       	ldd	r24, Y+9	; 0x09
    3f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	71 f0       	breq	.+28     	; 0x3f7a <SevenSegment_Display+0x70>
    3f5e:	08 c2       	rjmp	.+1040   	; 0x4370 <SevenSegment_Display+0x466>
    3f60:	29 85       	ldd	r18, Y+9	; 0x09
    3f62:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f64:	22 30       	cpi	r18, 0x02	; 2
    3f66:	31 05       	cpc	r19, r1
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <SevenSegment_Display+0x62>
    3f6a:	05 c1       	rjmp	.+522    	; 0x4176 <SevenSegment_Display+0x26c>
    3f6c:	89 85       	ldd	r24, Y+9	; 0x09
    3f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f70:	83 30       	cpi	r24, 0x03	; 3
    3f72:	91 05       	cpc	r25, r1
    3f74:	09 f4       	brne	.+2      	; 0x3f78 <SevenSegment_Display+0x6e>
    3f76:	7e c1       	rjmp	.+764    	; 0x4274 <SevenSegment_Display+0x36a>
    3f78:	fb c1       	rjmp	.+1014   	; 0x4370 <SevenSegment_Display+0x466>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    3f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7c:	81 30       	cpi	r24, 0x01	; 1
    3f7e:	41 f4       	brne	.+16     	; 0x3f90 <SevenSegment_Display+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    3f80:	ab e3       	ldi	r26, 0x3B	; 59
    3f82:	b0 e0       	ldi	r27, 0x00	; 0
    3f84:	eb e3       	ldi	r30, 0x3B	; 59
    3f86:	f0 e0       	ldi	r31, 0x00	; 0
    3f88:	80 81       	ld	r24, Z
    3f8a:	81 60       	ori	r24, 0x01	; 1
    3f8c:	8c 93       	st	X, r24
    3f8e:	07 c0       	rjmp	.+14     	; 0x3f9e <SevenSegment_Display+0x94>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    3f90:	ab e3       	ldi	r26, 0x3B	; 59
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	eb e3       	ldi	r30, 0x3B	; 59
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	80 81       	ld	r24, Z
    3f9a:	8e 7f       	andi	r24, 0xFE	; 254
    3f9c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    3f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa0:	81 30       	cpi	r24, 0x01	; 1
    3fa2:	41 f4       	brne	.+16     	; 0x3fb4 <SevenSegment_Display+0xaa>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    3fa4:	ab e3       	ldi	r26, 0x3B	; 59
    3fa6:	b0 e0       	ldi	r27, 0x00	; 0
    3fa8:	eb e3       	ldi	r30, 0x3B	; 59
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	80 81       	ld	r24, Z
    3fae:	82 60       	ori	r24, 0x02	; 2
    3fb0:	8c 93       	st	X, r24
    3fb2:	07 c0       	rjmp	.+14     	; 0x3fc2 <SevenSegment_Display+0xb8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    3fb4:	ab e3       	ldi	r26, 0x3B	; 59
    3fb6:	b0 e0       	ldi	r27, 0x00	; 0
    3fb8:	eb e3       	ldi	r30, 0x3B	; 59
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	80 81       	ld	r24, Z
    3fbe:	8d 7f       	andi	r24, 0xFD	; 253
    3fc0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    3fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc4:	81 30       	cpi	r24, 0x01	; 1
    3fc6:	41 f4       	brne	.+16     	; 0x3fd8 <SevenSegment_Display+0xce>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    3fc8:	ab e3       	ldi	r26, 0x3B	; 59
    3fca:	b0 e0       	ldi	r27, 0x00	; 0
    3fcc:	eb e3       	ldi	r30, 0x3B	; 59
    3fce:	f0 e0       	ldi	r31, 0x00	; 0
    3fd0:	80 81       	ld	r24, Z
    3fd2:	84 60       	ori	r24, 0x04	; 4
    3fd4:	8c 93       	st	X, r24
    3fd6:	07 c0       	rjmp	.+14     	; 0x3fe6 <SevenSegment_Display+0xdc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    3fd8:	ab e3       	ldi	r26, 0x3B	; 59
    3fda:	b0 e0       	ldi	r27, 0x00	; 0
    3fdc:	eb e3       	ldi	r30, 0x3B	; 59
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	80 81       	ld	r24, Z
    3fe2:	8b 7f       	andi	r24, 0xFB	; 251
    3fe4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    3fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe8:	81 30       	cpi	r24, 0x01	; 1
    3fea:	41 f4       	brne	.+16     	; 0x3ffc <SevenSegment_Display+0xf2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    3fec:	ab e3       	ldi	r26, 0x3B	; 59
    3fee:	b0 e0       	ldi	r27, 0x00	; 0
    3ff0:	eb e3       	ldi	r30, 0x3B	; 59
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	88 60       	ori	r24, 0x08	; 8
    3ff8:	8c 93       	st	X, r24
    3ffa:	07 c0       	rjmp	.+14     	; 0x400a <SevenSegment_Display+0x100>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    3ffc:	ab e3       	ldi	r26, 0x3B	; 59
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	eb e3       	ldi	r30, 0x3B	; 59
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	80 81       	ld	r24, Z
    4006:	87 7f       	andi	r24, 0xF7	; 247
    4008:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    400a:	8e 81       	ldd	r24, Y+6	; 0x06
    400c:	81 30       	cpi	r24, 0x01	; 1
    400e:	41 f4       	brne	.+16     	; 0x4020 <SevenSegment_Display+0x116>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4010:	ab e3       	ldi	r26, 0x3B	; 59
    4012:	b0 e0       	ldi	r27, 0x00	; 0
    4014:	eb e3       	ldi	r30, 0x3B	; 59
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	80 81       	ld	r24, Z
    401a:	80 61       	ori	r24, 0x10	; 16
    401c:	8c 93       	st	X, r24
    401e:	07 c0       	rjmp	.+14     	; 0x402e <SevenSegment_Display+0x124>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    4020:	ab e3       	ldi	r26, 0x3B	; 59
    4022:	b0 e0       	ldi	r27, 0x00	; 0
    4024:	eb e3       	ldi	r30, 0x3B	; 59
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	80 81       	ld	r24, Z
    402a:	8f 7e       	andi	r24, 0xEF	; 239
    402c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    402e:	8f 81       	ldd	r24, Y+7	; 0x07
    4030:	81 30       	cpi	r24, 0x01	; 1
    4032:	41 f4       	brne	.+16     	; 0x4044 <SevenSegment_Display+0x13a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4034:	ab e3       	ldi	r26, 0x3B	; 59
    4036:	b0 e0       	ldi	r27, 0x00	; 0
    4038:	eb e3       	ldi	r30, 0x3B	; 59
    403a:	f0 e0       	ldi	r31, 0x00	; 0
    403c:	80 81       	ld	r24, Z
    403e:	80 62       	ori	r24, 0x20	; 32
    4040:	8c 93       	st	X, r24
    4042:	07 c0       	rjmp	.+14     	; 0x4052 <SevenSegment_Display+0x148>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4044:	ab e3       	ldi	r26, 0x3B	; 59
    4046:	b0 e0       	ldi	r27, 0x00	; 0
    4048:	eb e3       	ldi	r30, 0x3B	; 59
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	80 81       	ld	r24, Z
    404e:	8f 7d       	andi	r24, 0xDF	; 223
    4050:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4052:	88 85       	ldd	r24, Y+8	; 0x08
    4054:	81 30       	cpi	r24, 0x01	; 1
    4056:	41 f4       	brne	.+16     	; 0x4068 <SevenSegment_Display+0x15e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    4058:	ab e3       	ldi	r26, 0x3B	; 59
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	eb e3       	ldi	r30, 0x3B	; 59
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 81       	ld	r24, Z
    4062:	80 64       	ori	r24, 0x40	; 64
    4064:	8c 93       	st	X, r24
    4066:	84 c1       	rjmp	.+776    	; 0x4370 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    4068:	ab e3       	ldi	r26, 0x3B	; 59
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	eb e3       	ldi	r30, 0x3B	; 59
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	8f 7b       	andi	r24, 0xBF	; 191
    4074:	8c 93       	st	X, r24
    4076:	7c c1       	rjmp	.+760    	; 0x4370 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4078:	8a 81       	ldd	r24, Y+2	; 0x02
    407a:	81 30       	cpi	r24, 0x01	; 1
    407c:	41 f4       	brne	.+16     	; 0x408e <SevenSegment_Display+0x184>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    407e:	a8 e3       	ldi	r26, 0x38	; 56
    4080:	b0 e0       	ldi	r27, 0x00	; 0
    4082:	e8 e3       	ldi	r30, 0x38	; 56
    4084:	f0 e0       	ldi	r31, 0x00	; 0
    4086:	80 81       	ld	r24, Z
    4088:	81 60       	ori	r24, 0x01	; 1
    408a:	8c 93       	st	X, r24
    408c:	07 c0       	rjmp	.+14     	; 0x409c <SevenSegment_Display+0x192>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    408e:	a8 e3       	ldi	r26, 0x38	; 56
    4090:	b0 e0       	ldi	r27, 0x00	; 0
    4092:	e8 e3       	ldi	r30, 0x38	; 56
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	80 81       	ld	r24, Z
    4098:	8e 7f       	andi	r24, 0xFE	; 254
    409a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    409c:	8b 81       	ldd	r24, Y+3	; 0x03
    409e:	81 30       	cpi	r24, 0x01	; 1
    40a0:	41 f4       	brne	.+16     	; 0x40b2 <SevenSegment_Display+0x1a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    40a2:	a8 e3       	ldi	r26, 0x38	; 56
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	e8 e3       	ldi	r30, 0x38	; 56
    40a8:	f0 e0       	ldi	r31, 0x00	; 0
    40aa:	80 81       	ld	r24, Z
    40ac:	82 60       	ori	r24, 0x02	; 2
    40ae:	8c 93       	st	X, r24
    40b0:	07 c0       	rjmp	.+14     	; 0x40c0 <SevenSegment_Display+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    40b2:	a8 e3       	ldi	r26, 0x38	; 56
    40b4:	b0 e0       	ldi	r27, 0x00	; 0
    40b6:	e8 e3       	ldi	r30, 0x38	; 56
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	80 81       	ld	r24, Z
    40bc:	8d 7f       	andi	r24, 0xFD	; 253
    40be:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    40c0:	8c 81       	ldd	r24, Y+4	; 0x04
    40c2:	81 30       	cpi	r24, 0x01	; 1
    40c4:	41 f4       	brne	.+16     	; 0x40d6 <SevenSegment_Display+0x1cc>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    40c6:	a8 e3       	ldi	r26, 0x38	; 56
    40c8:	b0 e0       	ldi	r27, 0x00	; 0
    40ca:	e8 e3       	ldi	r30, 0x38	; 56
    40cc:	f0 e0       	ldi	r31, 0x00	; 0
    40ce:	80 81       	ld	r24, Z
    40d0:	84 60       	ori	r24, 0x04	; 4
    40d2:	8c 93       	st	X, r24
    40d4:	07 c0       	rjmp	.+14     	; 0x40e4 <SevenSegment_Display+0x1da>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    40d6:	a8 e3       	ldi	r26, 0x38	; 56
    40d8:	b0 e0       	ldi	r27, 0x00	; 0
    40da:	e8 e3       	ldi	r30, 0x38	; 56
    40dc:	f0 e0       	ldi	r31, 0x00	; 0
    40de:	80 81       	ld	r24, Z
    40e0:	8b 7f       	andi	r24, 0xFB	; 251
    40e2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    40e4:	8d 81       	ldd	r24, Y+5	; 0x05
    40e6:	81 30       	cpi	r24, 0x01	; 1
    40e8:	41 f4       	brne	.+16     	; 0x40fa <SevenSegment_Display+0x1f0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    40ea:	a8 e3       	ldi	r26, 0x38	; 56
    40ec:	b0 e0       	ldi	r27, 0x00	; 0
    40ee:	e8 e3       	ldi	r30, 0x38	; 56
    40f0:	f0 e0       	ldi	r31, 0x00	; 0
    40f2:	80 81       	ld	r24, Z
    40f4:	88 60       	ori	r24, 0x08	; 8
    40f6:	8c 93       	st	X, r24
    40f8:	07 c0       	rjmp	.+14     	; 0x4108 <SevenSegment_Display+0x1fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    40fa:	a8 e3       	ldi	r26, 0x38	; 56
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	e8 e3       	ldi	r30, 0x38	; 56
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	87 7f       	andi	r24, 0xF7	; 247
    4106:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4108:	8e 81       	ldd	r24, Y+6	; 0x06
    410a:	81 30       	cpi	r24, 0x01	; 1
    410c:	41 f4       	brne	.+16     	; 0x411e <SevenSegment_Display+0x214>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    410e:	a8 e3       	ldi	r26, 0x38	; 56
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	e8 e3       	ldi	r30, 0x38	; 56
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	80 61       	ori	r24, 0x10	; 16
    411a:	8c 93       	st	X, r24
    411c:	07 c0       	rjmp	.+14     	; 0x412c <SevenSegment_Display+0x222>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    411e:	a8 e3       	ldi	r26, 0x38	; 56
    4120:	b0 e0       	ldi	r27, 0x00	; 0
    4122:	e8 e3       	ldi	r30, 0x38	; 56
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	80 81       	ld	r24, Z
    4128:	8f 7e       	andi	r24, 0xEF	; 239
    412a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    412c:	8f 81       	ldd	r24, Y+7	; 0x07
    412e:	81 30       	cpi	r24, 0x01	; 1
    4130:	41 f4       	brne	.+16     	; 0x4142 <SevenSegment_Display+0x238>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4132:	a8 e3       	ldi	r26, 0x38	; 56
    4134:	b0 e0       	ldi	r27, 0x00	; 0
    4136:	e8 e3       	ldi	r30, 0x38	; 56
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	80 81       	ld	r24, Z
    413c:	80 62       	ori	r24, 0x20	; 32
    413e:	8c 93       	st	X, r24
    4140:	07 c0       	rjmp	.+14     	; 0x4150 <SevenSegment_Display+0x246>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4142:	a8 e3       	ldi	r26, 0x38	; 56
    4144:	b0 e0       	ldi	r27, 0x00	; 0
    4146:	e8 e3       	ldi	r30, 0x38	; 56
    4148:	f0 e0       	ldi	r31, 0x00	; 0
    414a:	80 81       	ld	r24, Z
    414c:	8f 7d       	andi	r24, 0xDF	; 223
    414e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4150:	88 85       	ldd	r24, Y+8	; 0x08
    4152:	81 30       	cpi	r24, 0x01	; 1
    4154:	41 f4       	brne	.+16     	; 0x4166 <SevenSegment_Display+0x25c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    4156:	a8 e3       	ldi	r26, 0x38	; 56
    4158:	b0 e0       	ldi	r27, 0x00	; 0
    415a:	e8 e3       	ldi	r30, 0x38	; 56
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	80 81       	ld	r24, Z
    4160:	80 64       	ori	r24, 0x40	; 64
    4162:	8c 93       	st	X, r24
    4164:	05 c1       	rjmp	.+522    	; 0x4370 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    4166:	a8 e3       	ldi	r26, 0x38	; 56
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e8 e3       	ldi	r30, 0x38	; 56
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	8f 7b       	andi	r24, 0xBF	; 191
    4172:	8c 93       	st	X, r24
    4174:	fd c0       	rjmp	.+506    	; 0x4370 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4176:	8a 81       	ldd	r24, Y+2	; 0x02
    4178:	81 30       	cpi	r24, 0x01	; 1
    417a:	41 f4       	brne	.+16     	; 0x418c <SevenSegment_Display+0x282>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    417c:	a5 e3       	ldi	r26, 0x35	; 53
    417e:	b0 e0       	ldi	r27, 0x00	; 0
    4180:	e5 e3       	ldi	r30, 0x35	; 53
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	80 81       	ld	r24, Z
    4186:	81 60       	ori	r24, 0x01	; 1
    4188:	8c 93       	st	X, r24
    418a:	07 c0       	rjmp	.+14     	; 0x419a <SevenSegment_Display+0x290>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    418c:	a5 e3       	ldi	r26, 0x35	; 53
    418e:	b0 e0       	ldi	r27, 0x00	; 0
    4190:	e5 e3       	ldi	r30, 0x35	; 53
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	80 81       	ld	r24, Z
    4196:	8e 7f       	andi	r24, 0xFE	; 254
    4198:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    419a:	8b 81       	ldd	r24, Y+3	; 0x03
    419c:	81 30       	cpi	r24, 0x01	; 1
    419e:	41 f4       	brne	.+16     	; 0x41b0 <SevenSegment_Display+0x2a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    41a0:	a5 e3       	ldi	r26, 0x35	; 53
    41a2:	b0 e0       	ldi	r27, 0x00	; 0
    41a4:	e5 e3       	ldi	r30, 0x35	; 53
    41a6:	f0 e0       	ldi	r31, 0x00	; 0
    41a8:	80 81       	ld	r24, Z
    41aa:	82 60       	ori	r24, 0x02	; 2
    41ac:	8c 93       	st	X, r24
    41ae:	07 c0       	rjmp	.+14     	; 0x41be <SevenSegment_Display+0x2b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    41b0:	a5 e3       	ldi	r26, 0x35	; 53
    41b2:	b0 e0       	ldi	r27, 0x00	; 0
    41b4:	e5 e3       	ldi	r30, 0x35	; 53
    41b6:	f0 e0       	ldi	r31, 0x00	; 0
    41b8:	80 81       	ld	r24, Z
    41ba:	8d 7f       	andi	r24, 0xFD	; 253
    41bc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    41be:	8c 81       	ldd	r24, Y+4	; 0x04
    41c0:	81 30       	cpi	r24, 0x01	; 1
    41c2:	41 f4       	brne	.+16     	; 0x41d4 <SevenSegment_Display+0x2ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    41c4:	a5 e3       	ldi	r26, 0x35	; 53
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	e5 e3       	ldi	r30, 0x35	; 53
    41ca:	f0 e0       	ldi	r31, 0x00	; 0
    41cc:	80 81       	ld	r24, Z
    41ce:	84 60       	ori	r24, 0x04	; 4
    41d0:	8c 93       	st	X, r24
    41d2:	07 c0       	rjmp	.+14     	; 0x41e2 <SevenSegment_Display+0x2d8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    41d4:	a5 e3       	ldi	r26, 0x35	; 53
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	e5 e3       	ldi	r30, 0x35	; 53
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	8b 7f       	andi	r24, 0xFB	; 251
    41e0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    41e2:	8d 81       	ldd	r24, Y+5	; 0x05
    41e4:	81 30       	cpi	r24, 0x01	; 1
    41e6:	41 f4       	brne	.+16     	; 0x41f8 <SevenSegment_Display+0x2ee>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    41e8:	a5 e3       	ldi	r26, 0x35	; 53
    41ea:	b0 e0       	ldi	r27, 0x00	; 0
    41ec:	e5 e3       	ldi	r30, 0x35	; 53
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	80 81       	ld	r24, Z
    41f2:	88 60       	ori	r24, 0x08	; 8
    41f4:	8c 93       	st	X, r24
    41f6:	07 c0       	rjmp	.+14     	; 0x4206 <SevenSegment_Display+0x2fc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    41f8:	a5 e3       	ldi	r26, 0x35	; 53
    41fa:	b0 e0       	ldi	r27, 0x00	; 0
    41fc:	e5 e3       	ldi	r30, 0x35	; 53
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	80 81       	ld	r24, Z
    4202:	87 7f       	andi	r24, 0xF7	; 247
    4204:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4206:	8e 81       	ldd	r24, Y+6	; 0x06
    4208:	81 30       	cpi	r24, 0x01	; 1
    420a:	41 f4       	brne	.+16     	; 0x421c <SevenSegment_Display+0x312>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    420c:	a5 e3       	ldi	r26, 0x35	; 53
    420e:	b0 e0       	ldi	r27, 0x00	; 0
    4210:	e5 e3       	ldi	r30, 0x35	; 53
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	80 81       	ld	r24, Z
    4216:	80 61       	ori	r24, 0x10	; 16
    4218:	8c 93       	st	X, r24
    421a:	07 c0       	rjmp	.+14     	; 0x422a <SevenSegment_Display+0x320>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    421c:	a5 e3       	ldi	r26, 0x35	; 53
    421e:	b0 e0       	ldi	r27, 0x00	; 0
    4220:	e5 e3       	ldi	r30, 0x35	; 53
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	80 81       	ld	r24, Z
    4226:	8f 7e       	andi	r24, 0xEF	; 239
    4228:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    422a:	8f 81       	ldd	r24, Y+7	; 0x07
    422c:	81 30       	cpi	r24, 0x01	; 1
    422e:	41 f4       	brne	.+16     	; 0x4240 <SevenSegment_Display+0x336>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4230:	a5 e3       	ldi	r26, 0x35	; 53
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	e5 e3       	ldi	r30, 0x35	; 53
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	80 81       	ld	r24, Z
    423a:	80 62       	ori	r24, 0x20	; 32
    423c:	8c 93       	st	X, r24
    423e:	07 c0       	rjmp	.+14     	; 0x424e <SevenSegment_Display+0x344>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4240:	a5 e3       	ldi	r26, 0x35	; 53
    4242:	b0 e0       	ldi	r27, 0x00	; 0
    4244:	e5 e3       	ldi	r30, 0x35	; 53
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	80 81       	ld	r24, Z
    424a:	8f 7d       	andi	r24, 0xDF	; 223
    424c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    424e:	88 85       	ldd	r24, Y+8	; 0x08
    4250:	81 30       	cpi	r24, 0x01	; 1
    4252:	41 f4       	brne	.+16     	; 0x4264 <SevenSegment_Display+0x35a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4254:	a5 e3       	ldi	r26, 0x35	; 53
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	e5 e3       	ldi	r30, 0x35	; 53
    425a:	f0 e0       	ldi	r31, 0x00	; 0
    425c:	80 81       	ld	r24, Z
    425e:	80 64       	ori	r24, 0x40	; 64
    4260:	8c 93       	st	X, r24
    4262:	86 c0       	rjmp	.+268    	; 0x4370 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4264:	a5 e3       	ldi	r26, 0x35	; 53
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	e5 e3       	ldi	r30, 0x35	; 53
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	80 81       	ld	r24, Z
    426e:	8f 7b       	andi	r24, 0xBF	; 191
    4270:	8c 93       	st	X, r24
    4272:	7e c0       	rjmp	.+252    	; 0x4370 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4274:	8a 81       	ldd	r24, Y+2	; 0x02
    4276:	81 30       	cpi	r24, 0x01	; 1
    4278:	41 f4       	brne	.+16     	; 0x428a <SevenSegment_Display+0x380>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    427a:	a2 e3       	ldi	r26, 0x32	; 50
    427c:	b0 e0       	ldi	r27, 0x00	; 0
    427e:	e2 e3       	ldi	r30, 0x32	; 50
    4280:	f0 e0       	ldi	r31, 0x00	; 0
    4282:	80 81       	ld	r24, Z
    4284:	81 60       	ori	r24, 0x01	; 1
    4286:	8c 93       	st	X, r24
    4288:	07 c0       	rjmp	.+14     	; 0x4298 <SevenSegment_Display+0x38e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    428a:	a2 e3       	ldi	r26, 0x32	; 50
    428c:	b0 e0       	ldi	r27, 0x00	; 0
    428e:	e2 e3       	ldi	r30, 0x32	; 50
    4290:	f0 e0       	ldi	r31, 0x00	; 0
    4292:	80 81       	ld	r24, Z
    4294:	8e 7f       	andi	r24, 0xFE	; 254
    4296:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4298:	8b 81       	ldd	r24, Y+3	; 0x03
    429a:	81 30       	cpi	r24, 0x01	; 1
    429c:	41 f4       	brne	.+16     	; 0x42ae <SevenSegment_Display+0x3a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    429e:	a2 e3       	ldi	r26, 0x32	; 50
    42a0:	b0 e0       	ldi	r27, 0x00	; 0
    42a2:	e2 e3       	ldi	r30, 0x32	; 50
    42a4:	f0 e0       	ldi	r31, 0x00	; 0
    42a6:	80 81       	ld	r24, Z
    42a8:	82 60       	ori	r24, 0x02	; 2
    42aa:	8c 93       	st	X, r24
    42ac:	07 c0       	rjmp	.+14     	; 0x42bc <SevenSegment_Display+0x3b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    42ae:	a2 e3       	ldi	r26, 0x32	; 50
    42b0:	b0 e0       	ldi	r27, 0x00	; 0
    42b2:	e2 e3       	ldi	r30, 0x32	; 50
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	80 81       	ld	r24, Z
    42b8:	8d 7f       	andi	r24, 0xFD	; 253
    42ba:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    42bc:	8c 81       	ldd	r24, Y+4	; 0x04
    42be:	81 30       	cpi	r24, 0x01	; 1
    42c0:	41 f4       	brne	.+16     	; 0x42d2 <SevenSegment_Display+0x3c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    42c2:	a2 e3       	ldi	r26, 0x32	; 50
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	e2 e3       	ldi	r30, 0x32	; 50
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	80 81       	ld	r24, Z
    42cc:	84 60       	ori	r24, 0x04	; 4
    42ce:	8c 93       	st	X, r24
    42d0:	07 c0       	rjmp	.+14     	; 0x42e0 <SevenSegment_Display+0x3d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    42d2:	a2 e3       	ldi	r26, 0x32	; 50
    42d4:	b0 e0       	ldi	r27, 0x00	; 0
    42d6:	e2 e3       	ldi	r30, 0x32	; 50
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	80 81       	ld	r24, Z
    42dc:	8b 7f       	andi	r24, 0xFB	; 251
    42de:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    42e0:	8d 81       	ldd	r24, Y+5	; 0x05
    42e2:	81 30       	cpi	r24, 0x01	; 1
    42e4:	41 f4       	brne	.+16     	; 0x42f6 <SevenSegment_Display+0x3ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    42e6:	a2 e3       	ldi	r26, 0x32	; 50
    42e8:	b0 e0       	ldi	r27, 0x00	; 0
    42ea:	e2 e3       	ldi	r30, 0x32	; 50
    42ec:	f0 e0       	ldi	r31, 0x00	; 0
    42ee:	80 81       	ld	r24, Z
    42f0:	88 60       	ori	r24, 0x08	; 8
    42f2:	8c 93       	st	X, r24
    42f4:	07 c0       	rjmp	.+14     	; 0x4304 <SevenSegment_Display+0x3fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    42f6:	a2 e3       	ldi	r26, 0x32	; 50
    42f8:	b0 e0       	ldi	r27, 0x00	; 0
    42fa:	e2 e3       	ldi	r30, 0x32	; 50
    42fc:	f0 e0       	ldi	r31, 0x00	; 0
    42fe:	80 81       	ld	r24, Z
    4300:	87 7f       	andi	r24, 0xF7	; 247
    4302:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    4304:	8e 81       	ldd	r24, Y+6	; 0x06
    4306:	81 30       	cpi	r24, 0x01	; 1
    4308:	41 f4       	brne	.+16     	; 0x431a <SevenSegment_Display+0x410>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    430a:	a2 e3       	ldi	r26, 0x32	; 50
    430c:	b0 e0       	ldi	r27, 0x00	; 0
    430e:	e2 e3       	ldi	r30, 0x32	; 50
    4310:	f0 e0       	ldi	r31, 0x00	; 0
    4312:	80 81       	ld	r24, Z
    4314:	80 61       	ori	r24, 0x10	; 16
    4316:	8c 93       	st	X, r24
    4318:	07 c0       	rjmp	.+14     	; 0x4328 <SevenSegment_Display+0x41e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    431a:	a2 e3       	ldi	r26, 0x32	; 50
    431c:	b0 e0       	ldi	r27, 0x00	; 0
    431e:	e2 e3       	ldi	r30, 0x32	; 50
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	80 81       	ld	r24, Z
    4324:	8f 7e       	andi	r24, 0xEF	; 239
    4326:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4328:	8f 81       	ldd	r24, Y+7	; 0x07
    432a:	81 30       	cpi	r24, 0x01	; 1
    432c:	41 f4       	brne	.+16     	; 0x433e <SevenSegment_Display+0x434>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    432e:	a2 e3       	ldi	r26, 0x32	; 50
    4330:	b0 e0       	ldi	r27, 0x00	; 0
    4332:	e2 e3       	ldi	r30, 0x32	; 50
    4334:	f0 e0       	ldi	r31, 0x00	; 0
    4336:	80 81       	ld	r24, Z
    4338:	80 62       	ori	r24, 0x20	; 32
    433a:	8c 93       	st	X, r24
    433c:	07 c0       	rjmp	.+14     	; 0x434c <SevenSegment_Display+0x442>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    433e:	a2 e3       	ldi	r26, 0x32	; 50
    4340:	b0 e0       	ldi	r27, 0x00	; 0
    4342:	e2 e3       	ldi	r30, 0x32	; 50
    4344:	f0 e0       	ldi	r31, 0x00	; 0
    4346:	80 81       	ld	r24, Z
    4348:	8f 7d       	andi	r24, 0xDF	; 223
    434a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    434c:	88 85       	ldd	r24, Y+8	; 0x08
    434e:	81 30       	cpi	r24, 0x01	; 1
    4350:	41 f4       	brne	.+16     	; 0x4362 <SevenSegment_Display+0x458>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4352:	a2 e3       	ldi	r26, 0x32	; 50
    4354:	b0 e0       	ldi	r27, 0x00	; 0
    4356:	e2 e3       	ldi	r30, 0x32	; 50
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	80 81       	ld	r24, Z
    435c:	80 64       	ori	r24, 0x40	; 64
    435e:	8c 93       	st	X, r24
    4360:	07 c0       	rjmp	.+14     	; 0x4370 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4362:	a2 e3       	ldi	r26, 0x32	; 50
    4364:	b0 e0       	ldi	r27, 0x00	; 0
    4366:	e2 e3       	ldi	r30, 0x32	; 50
    4368:	f0 e0       	ldi	r31, 0x00	; 0
    436a:	80 81       	ld	r24, Z
    436c:	8f 7b       	andi	r24, 0xBF	; 191
    436e:	8c 93       	st	X, r24
		}
		break;
	}
}
    4370:	2a 96       	adiw	r28, 0x0a	; 10
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	cd bf       	out	0x3d, r28	; 61
    437c:	cf 91       	pop	r28
    437e:	df 91       	pop	r29
    4380:	0f 91       	pop	r16
    4382:	ef 90       	pop	r14
    4384:	cf 90       	pop	r12
    4386:	af 90       	pop	r10
    4388:	08 95       	ret

0000438a <SevenSegment_From0To9>:

void SevenSegment_From0To9(void){
    438a:	af 92       	push	r10
    438c:	cf 92       	push	r12
    438e:	ef 92       	push	r14
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	cc 58       	subi	r28, 0x8C	; 140
    439e:	d0 40       	sbci	r29, 0x00	; 0
    43a0:	0f b6       	in	r0, 0x3f	; 63
    43a2:	f8 94       	cli
    43a4:	de bf       	out	0x3e, r29	; 62
    43a6:	0f be       	out	0x3f, r0	; 63
    43a8:	cd bf       	out	0x3d, r28	; 61
	while(1){
		SevenSegment_Display(2, 1, 1, 1, 1, 1, 1, 0); // 0
    43aa:	82 e0       	ldi	r24, 0x02	; 2
    43ac:	61 e0       	ldi	r22, 0x01	; 1
    43ae:	41 e0       	ldi	r20, 0x01	; 1
    43b0:	21 e0       	ldi	r18, 0x01	; 1
    43b2:	01 e0       	ldi	r16, 0x01	; 1
    43b4:	ee 24       	eor	r14, r14
    43b6:	e3 94       	inc	r14
    43b8:	cc 24       	eor	r12, r12
    43ba:	c3 94       	inc	r12
    43bc:	aa 24       	eor	r10, r10
    43be:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    43c2:	fe 01       	movw	r30, r28
    43c4:	e7 57       	subi	r30, 0x77	; 119
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	a8 e4       	ldi	r26, 0x48	; 72
    43ce:	b2 e4       	ldi	r27, 0x42	; 66
    43d0:	80 83       	st	Z, r24
    43d2:	91 83       	std	Z+1, r25	; 0x01
    43d4:	a2 83       	std	Z+2, r26	; 0x02
    43d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d8:	8e 01       	movw	r16, r28
    43da:	0b 57       	subi	r16, 0x7B	; 123
    43dc:	1f 4f       	sbci	r17, 0xFF	; 255
    43de:	fe 01       	movw	r30, r28
    43e0:	e7 57       	subi	r30, 0x77	; 119
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	60 81       	ld	r22, Z
    43e6:	71 81       	ldd	r23, Z+1	; 0x01
    43e8:	82 81       	ldd	r24, Z+2	; 0x02
    43ea:	93 81       	ldd	r25, Z+3	; 0x03
    43ec:	20 e0       	ldi	r18, 0x00	; 0
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	4a e7       	ldi	r20, 0x7A	; 122
    43f2:	55 e4       	ldi	r21, 0x45	; 69
    43f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	f8 01       	movw	r30, r16
    43fe:	80 83       	st	Z, r24
    4400:	91 83       	std	Z+1, r25	; 0x01
    4402:	a2 83       	std	Z+2, r26	; 0x02
    4404:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4406:	fe 01       	movw	r30, r28
    4408:	eb 57       	subi	r30, 0x7B	; 123
    440a:	ff 4f       	sbci	r31, 0xFF	; 255
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	20 e0       	ldi	r18, 0x00	; 0
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	40 e8       	ldi	r20, 0x80	; 128
    441a:	5f e3       	ldi	r21, 0x3F	; 63
    441c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4420:	88 23       	and	r24, r24
    4422:	44 f4       	brge	.+16     	; 0x4434 <SevenSegment_From0To9+0xaa>
		__ticks = 1;
    4424:	fe 01       	movw	r30, r28
    4426:	ed 57       	subi	r30, 0x7D	; 125
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	91 83       	std	Z+1, r25	; 0x01
    4430:	80 83       	st	Z, r24
    4432:	64 c0       	rjmp	.+200    	; 0x44fc <SevenSegment_From0To9+0x172>
	else if (__tmp > 65535)
    4434:	fe 01       	movw	r30, r28
    4436:	eb 57       	subi	r30, 0x7B	; 123
    4438:	ff 4f       	sbci	r31, 0xFF	; 255
    443a:	60 81       	ld	r22, Z
    443c:	71 81       	ldd	r23, Z+1	; 0x01
    443e:	82 81       	ldd	r24, Z+2	; 0x02
    4440:	93 81       	ldd	r25, Z+3	; 0x03
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	3f ef       	ldi	r19, 0xFF	; 255
    4446:	4f e7       	ldi	r20, 0x7F	; 127
    4448:	57 e4       	ldi	r21, 0x47	; 71
    444a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    444e:	18 16       	cp	r1, r24
    4450:	0c f0       	brlt	.+2      	; 0x4454 <SevenSegment_From0To9+0xca>
    4452:	43 c0       	rjmp	.+134    	; 0x44da <SevenSegment_From0To9+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4454:	fe 01       	movw	r30, r28
    4456:	e7 57       	subi	r30, 0x77	; 119
    4458:	ff 4f       	sbci	r31, 0xFF	; 255
    445a:	60 81       	ld	r22, Z
    445c:	71 81       	ldd	r23, Z+1	; 0x01
    445e:	82 81       	ldd	r24, Z+2	; 0x02
    4460:	93 81       	ldd	r25, Z+3	; 0x03
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e2       	ldi	r20, 0x20	; 32
    4468:	51 e4       	ldi	r21, 0x41	; 65
    446a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	8e 01       	movw	r16, r28
    4474:	0d 57       	subi	r16, 0x7D	; 125
    4476:	1f 4f       	sbci	r17, 0xFF	; 255
    4478:	bc 01       	movw	r22, r24
    447a:	cd 01       	movw	r24, r26
    447c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	f8 01       	movw	r30, r16
    4486:	91 83       	std	Z+1, r25	; 0x01
    4488:	80 83       	st	Z, r24
    448a:	1f c0       	rjmp	.+62     	; 0x44ca <SevenSegment_From0To9+0x140>
    448c:	fe 01       	movw	r30, r28
    448e:	ef 57       	subi	r30, 0x7F	; 127
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	80 e9       	ldi	r24, 0x90	; 144
    4494:	91 e0       	ldi	r25, 0x01	; 1
    4496:	91 83       	std	Z+1, r25	; 0x01
    4498:	80 83       	st	Z, r24
    449a:	fe 01       	movw	r30, r28
    449c:	ef 57       	subi	r30, 0x7F	; 127
    449e:	ff 4f       	sbci	r31, 0xFF	; 255
    44a0:	80 81       	ld	r24, Z
    44a2:	91 81       	ldd	r25, Z+1	; 0x01
    44a4:	01 97       	sbiw	r24, 0x01	; 1
    44a6:	f1 f7       	brne	.-4      	; 0x44a4 <SevenSegment_From0To9+0x11a>
    44a8:	fe 01       	movw	r30, r28
    44aa:	ef 57       	subi	r30, 0x7F	; 127
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	91 83       	std	Z+1, r25	; 0x01
    44b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b2:	de 01       	movw	r26, r28
    44b4:	ad 57       	subi	r26, 0x7D	; 125
    44b6:	bf 4f       	sbci	r27, 0xFF	; 255
    44b8:	fe 01       	movw	r30, r28
    44ba:	ed 57       	subi	r30, 0x7D	; 125
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	80 81       	ld	r24, Z
    44c0:	91 81       	ldd	r25, Z+1	; 0x01
    44c2:	01 97       	sbiw	r24, 0x01	; 1
    44c4:	11 96       	adiw	r26, 0x01	; 1
    44c6:	9c 93       	st	X, r25
    44c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ca:	fe 01       	movw	r30, r28
    44cc:	ed 57       	subi	r30, 0x7D	; 125
    44ce:	ff 4f       	sbci	r31, 0xFF	; 255
    44d0:	80 81       	ld	r24, Z
    44d2:	91 81       	ldd	r25, Z+1	; 0x01
    44d4:	00 97       	sbiw	r24, 0x00	; 0
    44d6:	d1 f6       	brne	.-76     	; 0x448c <SevenSegment_From0To9+0x102>
    44d8:	27 c0       	rjmp	.+78     	; 0x4528 <SevenSegment_From0To9+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44da:	8e 01       	movw	r16, r28
    44dc:	0d 57       	subi	r16, 0x7D	; 125
    44de:	1f 4f       	sbci	r17, 0xFF	; 255
    44e0:	fe 01       	movw	r30, r28
    44e2:	eb 57       	subi	r30, 0x7B	; 123
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	60 81       	ld	r22, Z
    44e8:	71 81       	ldd	r23, Z+1	; 0x01
    44ea:	82 81       	ldd	r24, Z+2	; 0x02
    44ec:	93 81       	ldd	r25, Z+3	; 0x03
    44ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	f8 01       	movw	r30, r16
    44f8:	91 83       	std	Z+1, r25	; 0x01
    44fa:	80 83       	st	Z, r24
    44fc:	de 01       	movw	r26, r28
    44fe:	a1 58       	subi	r26, 0x81	; 129
    4500:	bf 4f       	sbci	r27, 0xFF	; 255
    4502:	fe 01       	movw	r30, r28
    4504:	ed 57       	subi	r30, 0x7D	; 125
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	80 81       	ld	r24, Z
    450a:	91 81       	ldd	r25, Z+1	; 0x01
    450c:	8d 93       	st	X+, r24
    450e:	9c 93       	st	X, r25
    4510:	fe 01       	movw	r30, r28
    4512:	e1 58       	subi	r30, 0x81	; 129
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	80 81       	ld	r24, Z
    4518:	91 81       	ldd	r25, Z+1	; 0x01
    451a:	01 97       	sbiw	r24, 0x01	; 1
    451c:	f1 f7       	brne	.-4      	; 0x451a <SevenSegment_From0To9+0x190>
    451e:	fe 01       	movw	r30, r28
    4520:	e1 58       	subi	r30, 0x81	; 129
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 0, 0, 0, 0); // 1
    4528:	82 e0       	ldi	r24, 0x02	; 2
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	41 e0       	ldi	r20, 0x01	; 1
    452e:	21 e0       	ldi	r18, 0x01	; 1
    4530:	00 e0       	ldi	r16, 0x00	; 0
    4532:	ee 24       	eor	r14, r14
    4534:	cc 24       	eor	r12, r12
    4536:	aa 24       	eor	r10, r10
    4538:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    453c:	fe 01       	movw	r30, r28
    453e:	e5 58       	subi	r30, 0x85	; 133
    4540:	ff 4f       	sbci	r31, 0xFF	; 255
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	a8 e4       	ldi	r26, 0x48	; 72
    4548:	b2 e4       	ldi	r27, 0x42	; 66
    454a:	80 83       	st	Z, r24
    454c:	91 83       	std	Z+1, r25	; 0x01
    454e:	a2 83       	std	Z+2, r26	; 0x02
    4550:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4552:	8e 01       	movw	r16, r28
    4554:	09 58       	subi	r16, 0x89	; 137
    4556:	1f 4f       	sbci	r17, 0xFF	; 255
    4558:	fe 01       	movw	r30, r28
    455a:	e5 58       	subi	r30, 0x85	; 133
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	60 81       	ld	r22, Z
    4560:	71 81       	ldd	r23, Z+1	; 0x01
    4562:	82 81       	ldd	r24, Z+2	; 0x02
    4564:	93 81       	ldd	r25, Z+3	; 0x03
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	4a e7       	ldi	r20, 0x7A	; 122
    456c:	55 e4       	ldi	r21, 0x45	; 69
    456e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	f8 01       	movw	r30, r16
    4578:	80 83       	st	Z, r24
    457a:	91 83       	std	Z+1, r25	; 0x01
    457c:	a2 83       	std	Z+2, r26	; 0x02
    457e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4580:	fe 01       	movw	r30, r28
    4582:	e9 58       	subi	r30, 0x89	; 137
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	60 81       	ld	r22, Z
    4588:	71 81       	ldd	r23, Z+1	; 0x01
    458a:	82 81       	ldd	r24, Z+2	; 0x02
    458c:	93 81       	ldd	r25, Z+3	; 0x03
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e8       	ldi	r20, 0x80	; 128
    4594:	5f e3       	ldi	r21, 0x3F	; 63
    4596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    459a:	88 23       	and	r24, r24
    459c:	44 f4       	brge	.+16     	; 0x45ae <SevenSegment_From0To9+0x224>
		__ticks = 1;
    459e:	fe 01       	movw	r30, r28
    45a0:	eb 58       	subi	r30, 0x8B	; 139
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	91 83       	std	Z+1, r25	; 0x01
    45aa:	80 83       	st	Z, r24
    45ac:	64 c0       	rjmp	.+200    	; 0x4676 <SevenSegment_From0To9+0x2ec>
	else if (__tmp > 65535)
    45ae:	fe 01       	movw	r30, r28
    45b0:	e9 58       	subi	r30, 0x89	; 137
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	60 81       	ld	r22, Z
    45b6:	71 81       	ldd	r23, Z+1	; 0x01
    45b8:	82 81       	ldd	r24, Z+2	; 0x02
    45ba:	93 81       	ldd	r25, Z+3	; 0x03
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	3f ef       	ldi	r19, 0xFF	; 255
    45c0:	4f e7       	ldi	r20, 0x7F	; 127
    45c2:	57 e4       	ldi	r21, 0x47	; 71
    45c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45c8:	18 16       	cp	r1, r24
    45ca:	0c f0       	brlt	.+2      	; 0x45ce <SevenSegment_From0To9+0x244>
    45cc:	43 c0       	rjmp	.+134    	; 0x4654 <SevenSegment_From0To9+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ce:	fe 01       	movw	r30, r28
    45d0:	e5 58       	subi	r30, 0x85	; 133
    45d2:	ff 4f       	sbci	r31, 0xFF	; 255
    45d4:	60 81       	ld	r22, Z
    45d6:	71 81       	ldd	r23, Z+1	; 0x01
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	93 81       	ldd	r25, Z+3	; 0x03
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	40 e2       	ldi	r20, 0x20	; 32
    45e2:	51 e4       	ldi	r21, 0x41	; 65
    45e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e8:	dc 01       	movw	r26, r24
    45ea:	cb 01       	movw	r24, r22
    45ec:	8e 01       	movw	r16, r28
    45ee:	0b 58       	subi	r16, 0x8B	; 139
    45f0:	1f 4f       	sbci	r17, 0xFF	; 255
    45f2:	bc 01       	movw	r22, r24
    45f4:	cd 01       	movw	r24, r26
    45f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	f8 01       	movw	r30, r16
    4600:	91 83       	std	Z+1, r25	; 0x01
    4602:	80 83       	st	Z, r24
    4604:	1f c0       	rjmp	.+62     	; 0x4644 <SevenSegment_From0To9+0x2ba>
    4606:	fe 01       	movw	r30, r28
    4608:	ed 58       	subi	r30, 0x8D	; 141
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	80 e9       	ldi	r24, 0x90	; 144
    460e:	91 e0       	ldi	r25, 0x01	; 1
    4610:	91 83       	std	Z+1, r25	; 0x01
    4612:	80 83       	st	Z, r24
    4614:	fe 01       	movw	r30, r28
    4616:	ed 58       	subi	r30, 0x8D	; 141
    4618:	ff 4f       	sbci	r31, 0xFF	; 255
    461a:	80 81       	ld	r24, Z
    461c:	91 81       	ldd	r25, Z+1	; 0x01
    461e:	01 97       	sbiw	r24, 0x01	; 1
    4620:	f1 f7       	brne	.-4      	; 0x461e <SevenSegment_From0To9+0x294>
    4622:	fe 01       	movw	r30, r28
    4624:	ed 58       	subi	r30, 0x8D	; 141
    4626:	ff 4f       	sbci	r31, 0xFF	; 255
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462c:	de 01       	movw	r26, r28
    462e:	ab 58       	subi	r26, 0x8B	; 139
    4630:	bf 4f       	sbci	r27, 0xFF	; 255
    4632:	fe 01       	movw	r30, r28
    4634:	eb 58       	subi	r30, 0x8B	; 139
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	80 81       	ld	r24, Z
    463a:	91 81       	ldd	r25, Z+1	; 0x01
    463c:	01 97       	sbiw	r24, 0x01	; 1
    463e:	11 96       	adiw	r26, 0x01	; 1
    4640:	9c 93       	st	X, r25
    4642:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4644:	fe 01       	movw	r30, r28
    4646:	eb 58       	subi	r30, 0x8B	; 139
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	80 81       	ld	r24, Z
    464c:	91 81       	ldd	r25, Z+1	; 0x01
    464e:	00 97       	sbiw	r24, 0x00	; 0
    4650:	d1 f6       	brne	.-76     	; 0x4606 <SevenSegment_From0To9+0x27c>
    4652:	27 c0       	rjmp	.+78     	; 0x46a2 <SevenSegment_From0To9+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4654:	8e 01       	movw	r16, r28
    4656:	0b 58       	subi	r16, 0x8B	; 139
    4658:	1f 4f       	sbci	r17, 0xFF	; 255
    465a:	fe 01       	movw	r30, r28
    465c:	e9 58       	subi	r30, 0x89	; 137
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	60 81       	ld	r22, Z
    4662:	71 81       	ldd	r23, Z+1	; 0x01
    4664:	82 81       	ldd	r24, Z+2	; 0x02
    4666:	93 81       	ldd	r25, Z+3	; 0x03
    4668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	f8 01       	movw	r30, r16
    4672:	91 83       	std	Z+1, r25	; 0x01
    4674:	80 83       	st	Z, r24
    4676:	de 01       	movw	r26, r28
    4678:	af 58       	subi	r26, 0x8F	; 143
    467a:	bf 4f       	sbci	r27, 0xFF	; 255
    467c:	fe 01       	movw	r30, r28
    467e:	eb 58       	subi	r30, 0x8B	; 139
    4680:	ff 4f       	sbci	r31, 0xFF	; 255
    4682:	80 81       	ld	r24, Z
    4684:	91 81       	ldd	r25, Z+1	; 0x01
    4686:	8d 93       	st	X+, r24
    4688:	9c 93       	st	X, r25
    468a:	fe 01       	movw	r30, r28
    468c:	ef 58       	subi	r30, 0x8F	; 143
    468e:	ff 4f       	sbci	r31, 0xFF	; 255
    4690:	80 81       	ld	r24, Z
    4692:	91 81       	ldd	r25, Z+1	; 0x01
    4694:	01 97       	sbiw	r24, 0x01	; 1
    4696:	f1 f7       	brne	.-4      	; 0x4694 <SevenSegment_From0To9+0x30a>
    4698:	fe 01       	movw	r30, r28
    469a:	ef 58       	subi	r30, 0x8F	; 143
    469c:	ff 4f       	sbci	r31, 0xFF	; 255
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 0, 1, 1, 0, 1); // 2
    46a2:	82 e0       	ldi	r24, 0x02	; 2
    46a4:	61 e0       	ldi	r22, 0x01	; 1
    46a6:	41 e0       	ldi	r20, 0x01	; 1
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	01 e0       	ldi	r16, 0x01	; 1
    46ac:	ee 24       	eor	r14, r14
    46ae:	e3 94       	inc	r14
    46b0:	cc 24       	eor	r12, r12
    46b2:	aa 24       	eor	r10, r10
    46b4:	a3 94       	inc	r10
    46b6:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    46ba:	fe 01       	movw	r30, r28
    46bc:	e3 59       	subi	r30, 0x93	; 147
    46be:	ff 4f       	sbci	r31, 0xFF	; 255
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	a8 e4       	ldi	r26, 0x48	; 72
    46c6:	b2 e4       	ldi	r27, 0x42	; 66
    46c8:	80 83       	st	Z, r24
    46ca:	91 83       	std	Z+1, r25	; 0x01
    46cc:	a2 83       	std	Z+2, r26	; 0x02
    46ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46d0:	8e 01       	movw	r16, r28
    46d2:	07 59       	subi	r16, 0x97	; 151
    46d4:	1f 4f       	sbci	r17, 0xFF	; 255
    46d6:	fe 01       	movw	r30, r28
    46d8:	e3 59       	subi	r30, 0x93	; 147
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	60 81       	ld	r22, Z
    46de:	71 81       	ldd	r23, Z+1	; 0x01
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	93 81       	ldd	r25, Z+3	; 0x03
    46e4:	20 e0       	ldi	r18, 0x00	; 0
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	4a e7       	ldi	r20, 0x7A	; 122
    46ea:	55 e4       	ldi	r21, 0x45	; 69
    46ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	f8 01       	movw	r30, r16
    46f6:	80 83       	st	Z, r24
    46f8:	91 83       	std	Z+1, r25	; 0x01
    46fa:	a2 83       	std	Z+2, r26	; 0x02
    46fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46fe:	fe 01       	movw	r30, r28
    4700:	e7 59       	subi	r30, 0x97	; 151
    4702:	ff 4f       	sbci	r31, 0xFF	; 255
    4704:	60 81       	ld	r22, Z
    4706:	71 81       	ldd	r23, Z+1	; 0x01
    4708:	82 81       	ldd	r24, Z+2	; 0x02
    470a:	93 81       	ldd	r25, Z+3	; 0x03
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	40 e8       	ldi	r20, 0x80	; 128
    4712:	5f e3       	ldi	r21, 0x3F	; 63
    4714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4718:	88 23       	and	r24, r24
    471a:	44 f4       	brge	.+16     	; 0x472c <SevenSegment_From0To9+0x3a2>
		__ticks = 1;
    471c:	fe 01       	movw	r30, r28
    471e:	e9 59       	subi	r30, 0x99	; 153
    4720:	ff 4f       	sbci	r31, 0xFF	; 255
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	91 83       	std	Z+1, r25	; 0x01
    4728:	80 83       	st	Z, r24
    472a:	64 c0       	rjmp	.+200    	; 0x47f4 <SevenSegment_From0To9+0x46a>
	else if (__tmp > 65535)
    472c:	fe 01       	movw	r30, r28
    472e:	e7 59       	subi	r30, 0x97	; 151
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	60 81       	ld	r22, Z
    4734:	71 81       	ldd	r23, Z+1	; 0x01
    4736:	82 81       	ldd	r24, Z+2	; 0x02
    4738:	93 81       	ldd	r25, Z+3	; 0x03
    473a:	20 e0       	ldi	r18, 0x00	; 0
    473c:	3f ef       	ldi	r19, 0xFF	; 255
    473e:	4f e7       	ldi	r20, 0x7F	; 127
    4740:	57 e4       	ldi	r21, 0x47	; 71
    4742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4746:	18 16       	cp	r1, r24
    4748:	0c f0       	brlt	.+2      	; 0x474c <SevenSegment_From0To9+0x3c2>
    474a:	43 c0       	rjmp	.+134    	; 0x47d2 <SevenSegment_From0To9+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    474c:	fe 01       	movw	r30, r28
    474e:	e3 59       	subi	r30, 0x93	; 147
    4750:	ff 4f       	sbci	r31, 0xFF	; 255
    4752:	60 81       	ld	r22, Z
    4754:	71 81       	ldd	r23, Z+1	; 0x01
    4756:	82 81       	ldd	r24, Z+2	; 0x02
    4758:	93 81       	ldd	r25, Z+3	; 0x03
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	40 e2       	ldi	r20, 0x20	; 32
    4760:	51 e4       	ldi	r21, 0x41	; 65
    4762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	8e 01       	movw	r16, r28
    476c:	09 59       	subi	r16, 0x99	; 153
    476e:	1f 4f       	sbci	r17, 0xFF	; 255
    4770:	bc 01       	movw	r22, r24
    4772:	cd 01       	movw	r24, r26
    4774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4778:	dc 01       	movw	r26, r24
    477a:	cb 01       	movw	r24, r22
    477c:	f8 01       	movw	r30, r16
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	80 83       	st	Z, r24
    4782:	1f c0       	rjmp	.+62     	; 0x47c2 <SevenSegment_From0To9+0x438>
    4784:	fe 01       	movw	r30, r28
    4786:	eb 59       	subi	r30, 0x9B	; 155
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	80 e9       	ldi	r24, 0x90	; 144
    478c:	91 e0       	ldi	r25, 0x01	; 1
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
    4792:	fe 01       	movw	r30, r28
    4794:	eb 59       	subi	r30, 0x9B	; 155
    4796:	ff 4f       	sbci	r31, 0xFF	; 255
    4798:	80 81       	ld	r24, Z
    479a:	91 81       	ldd	r25, Z+1	; 0x01
    479c:	01 97       	sbiw	r24, 0x01	; 1
    479e:	f1 f7       	brne	.-4      	; 0x479c <SevenSegment_From0To9+0x412>
    47a0:	fe 01       	movw	r30, r28
    47a2:	eb 59       	subi	r30, 0x9B	; 155
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	91 83       	std	Z+1, r25	; 0x01
    47a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47aa:	de 01       	movw	r26, r28
    47ac:	a9 59       	subi	r26, 0x99	; 153
    47ae:	bf 4f       	sbci	r27, 0xFF	; 255
    47b0:	fe 01       	movw	r30, r28
    47b2:	e9 59       	subi	r30, 0x99	; 153
    47b4:	ff 4f       	sbci	r31, 0xFF	; 255
    47b6:	80 81       	ld	r24, Z
    47b8:	91 81       	ldd	r25, Z+1	; 0x01
    47ba:	01 97       	sbiw	r24, 0x01	; 1
    47bc:	11 96       	adiw	r26, 0x01	; 1
    47be:	9c 93       	st	X, r25
    47c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c2:	fe 01       	movw	r30, r28
    47c4:	e9 59       	subi	r30, 0x99	; 153
    47c6:	ff 4f       	sbci	r31, 0xFF	; 255
    47c8:	80 81       	ld	r24, Z
    47ca:	91 81       	ldd	r25, Z+1	; 0x01
    47cc:	00 97       	sbiw	r24, 0x00	; 0
    47ce:	d1 f6       	brne	.-76     	; 0x4784 <SevenSegment_From0To9+0x3fa>
    47d0:	27 c0       	rjmp	.+78     	; 0x4820 <SevenSegment_From0To9+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47d2:	8e 01       	movw	r16, r28
    47d4:	09 59       	subi	r16, 0x99	; 153
    47d6:	1f 4f       	sbci	r17, 0xFF	; 255
    47d8:	fe 01       	movw	r30, r28
    47da:	e7 59       	subi	r30, 0x97	; 151
    47dc:	ff 4f       	sbci	r31, 0xFF	; 255
    47de:	60 81       	ld	r22, Z
    47e0:	71 81       	ldd	r23, Z+1	; 0x01
    47e2:	82 81       	ldd	r24, Z+2	; 0x02
    47e4:	93 81       	ldd	r25, Z+3	; 0x03
    47e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	f8 01       	movw	r30, r16
    47f0:	91 83       	std	Z+1, r25	; 0x01
    47f2:	80 83       	st	Z, r24
    47f4:	de 01       	movw	r26, r28
    47f6:	ad 59       	subi	r26, 0x9D	; 157
    47f8:	bf 4f       	sbci	r27, 0xFF	; 255
    47fa:	fe 01       	movw	r30, r28
    47fc:	e9 59       	subi	r30, 0x99	; 153
    47fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	8d 93       	st	X+, r24
    4806:	9c 93       	st	X, r25
    4808:	fe 01       	movw	r30, r28
    480a:	ed 59       	subi	r30, 0x9D	; 157
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	80 81       	ld	r24, Z
    4810:	91 81       	ldd	r25, Z+1	; 0x01
    4812:	01 97       	sbiw	r24, 0x01	; 1
    4814:	f1 f7       	brne	.-4      	; 0x4812 <SevenSegment_From0To9+0x488>
    4816:	fe 01       	movw	r30, r28
    4818:	ed 59       	subi	r30, 0x9D	; 157
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	91 83       	std	Z+1, r25	; 0x01
    481e:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 1, 0, 0, 1); // 3
    4820:	82 e0       	ldi	r24, 0x02	; 2
    4822:	61 e0       	ldi	r22, 0x01	; 1
    4824:	41 e0       	ldi	r20, 0x01	; 1
    4826:	21 e0       	ldi	r18, 0x01	; 1
    4828:	01 e0       	ldi	r16, 0x01	; 1
    482a:	ee 24       	eor	r14, r14
    482c:	cc 24       	eor	r12, r12
    482e:	aa 24       	eor	r10, r10
    4830:	a3 94       	inc	r10
    4832:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    4836:	fe 01       	movw	r30, r28
    4838:	e1 5a       	subi	r30, 0xA1	; 161
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	a8 e4       	ldi	r26, 0x48	; 72
    4842:	b2 e4       	ldi	r27, 0x42	; 66
    4844:	80 83       	st	Z, r24
    4846:	91 83       	std	Z+1, r25	; 0x01
    4848:	a2 83       	std	Z+2, r26	; 0x02
    484a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484c:	8e 01       	movw	r16, r28
    484e:	05 5a       	subi	r16, 0xA5	; 165
    4850:	1f 4f       	sbci	r17, 0xFF	; 255
    4852:	fe 01       	movw	r30, r28
    4854:	e1 5a       	subi	r30, 0xA1	; 161
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	60 81       	ld	r22, Z
    485a:	71 81       	ldd	r23, Z+1	; 0x01
    485c:	82 81       	ldd	r24, Z+2	; 0x02
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	4a e7       	ldi	r20, 0x7A	; 122
    4866:	55 e4       	ldi	r21, 0x45	; 69
    4868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	f8 01       	movw	r30, r16
    4872:	80 83       	st	Z, r24
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	a2 83       	std	Z+2, r26	; 0x02
    4878:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    487a:	fe 01       	movw	r30, r28
    487c:	e5 5a       	subi	r30, 0xA5	; 165
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	60 81       	ld	r22, Z
    4882:	71 81       	ldd	r23, Z+1	; 0x01
    4884:	82 81       	ldd	r24, Z+2	; 0x02
    4886:	93 81       	ldd	r25, Z+3	; 0x03
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	40 e8       	ldi	r20, 0x80	; 128
    488e:	5f e3       	ldi	r21, 0x3F	; 63
    4890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4894:	88 23       	and	r24, r24
    4896:	44 f4       	brge	.+16     	; 0x48a8 <SevenSegment_From0To9+0x51e>
		__ticks = 1;
    4898:	fe 01       	movw	r30, r28
    489a:	e7 5a       	subi	r30, 0xA7	; 167
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	91 83       	std	Z+1, r25	; 0x01
    48a4:	80 83       	st	Z, r24
    48a6:	64 c0       	rjmp	.+200    	; 0x4970 <SevenSegment_From0To9+0x5e6>
	else if (__tmp > 65535)
    48a8:	fe 01       	movw	r30, r28
    48aa:	e5 5a       	subi	r30, 0xA5	; 165
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	60 81       	ld	r22, Z
    48b0:	71 81       	ldd	r23, Z+1	; 0x01
    48b2:	82 81       	ldd	r24, Z+2	; 0x02
    48b4:	93 81       	ldd	r25, Z+3	; 0x03
    48b6:	20 e0       	ldi	r18, 0x00	; 0
    48b8:	3f ef       	ldi	r19, 0xFF	; 255
    48ba:	4f e7       	ldi	r20, 0x7F	; 127
    48bc:	57 e4       	ldi	r21, 0x47	; 71
    48be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48c2:	18 16       	cp	r1, r24
    48c4:	0c f0       	brlt	.+2      	; 0x48c8 <SevenSegment_From0To9+0x53e>
    48c6:	43 c0       	rjmp	.+134    	; 0x494e <SevenSegment_From0To9+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c8:	fe 01       	movw	r30, r28
    48ca:	e1 5a       	subi	r30, 0xA1	; 161
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	60 81       	ld	r22, Z
    48d0:	71 81       	ldd	r23, Z+1	; 0x01
    48d2:	82 81       	ldd	r24, Z+2	; 0x02
    48d4:	93 81       	ldd	r25, Z+3	; 0x03
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	40 e2       	ldi	r20, 0x20	; 32
    48dc:	51 e4       	ldi	r21, 0x41	; 65
    48de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e2:	dc 01       	movw	r26, r24
    48e4:	cb 01       	movw	r24, r22
    48e6:	8e 01       	movw	r16, r28
    48e8:	07 5a       	subi	r16, 0xA7	; 167
    48ea:	1f 4f       	sbci	r17, 0xFF	; 255
    48ec:	bc 01       	movw	r22, r24
    48ee:	cd 01       	movw	r24, r26
    48f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	f8 01       	movw	r30, r16
    48fa:	91 83       	std	Z+1, r25	; 0x01
    48fc:	80 83       	st	Z, r24
    48fe:	1f c0       	rjmp	.+62     	; 0x493e <SevenSegment_From0To9+0x5b4>
    4900:	fe 01       	movw	r30, r28
    4902:	e9 5a       	subi	r30, 0xA9	; 169
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	80 e9       	ldi	r24, 0x90	; 144
    4908:	91 e0       	ldi	r25, 0x01	; 1
    490a:	91 83       	std	Z+1, r25	; 0x01
    490c:	80 83       	st	Z, r24
    490e:	fe 01       	movw	r30, r28
    4910:	e9 5a       	subi	r30, 0xA9	; 169
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 81       	ld	r24, Z
    4916:	91 81       	ldd	r25, Z+1	; 0x01
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	f1 f7       	brne	.-4      	; 0x4918 <SevenSegment_From0To9+0x58e>
    491c:	fe 01       	movw	r30, r28
    491e:	e9 5a       	subi	r30, 0xA9	; 169
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4926:	de 01       	movw	r26, r28
    4928:	a7 5a       	subi	r26, 0xA7	; 167
    492a:	bf 4f       	sbci	r27, 0xFF	; 255
    492c:	fe 01       	movw	r30, r28
    492e:	e7 5a       	subi	r30, 0xA7	; 167
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	91 81       	ldd	r25, Z+1	; 0x01
    4936:	01 97       	sbiw	r24, 0x01	; 1
    4938:	11 96       	adiw	r26, 0x01	; 1
    493a:	9c 93       	st	X, r25
    493c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493e:	fe 01       	movw	r30, r28
    4940:	e7 5a       	subi	r30, 0xA7	; 167
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	80 81       	ld	r24, Z
    4946:	91 81       	ldd	r25, Z+1	; 0x01
    4948:	00 97       	sbiw	r24, 0x00	; 0
    494a:	d1 f6       	brne	.-76     	; 0x4900 <SevenSegment_From0To9+0x576>
    494c:	27 c0       	rjmp	.+78     	; 0x499c <SevenSegment_From0To9+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494e:	8e 01       	movw	r16, r28
    4950:	07 5a       	subi	r16, 0xA7	; 167
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	fe 01       	movw	r30, r28
    4956:	e5 5a       	subi	r30, 0xA5	; 165
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	f8 01       	movw	r30, r16
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
    4970:	de 01       	movw	r26, r28
    4972:	ab 5a       	subi	r26, 0xAB	; 171
    4974:	bf 4f       	sbci	r27, 0xFF	; 255
    4976:	fe 01       	movw	r30, r28
    4978:	e7 5a       	subi	r30, 0xA7	; 167
    497a:	ff 4f       	sbci	r31, 0xFF	; 255
    497c:	80 81       	ld	r24, Z
    497e:	91 81       	ldd	r25, Z+1	; 0x01
    4980:	8d 93       	st	X+, r24
    4982:	9c 93       	st	X, r25
    4984:	fe 01       	movw	r30, r28
    4986:	eb 5a       	subi	r30, 0xAB	; 171
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	80 81       	ld	r24, Z
    498c:	91 81       	ldd	r25, Z+1	; 0x01
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	f1 f7       	brne	.-4      	; 0x498e <SevenSegment_From0To9+0x604>
    4992:	fe 01       	movw	r30, r28
    4994:	eb 5a       	subi	r30, 0xAB	; 171
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	91 83       	std	Z+1, r25	; 0x01
    499a:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 0, 0, 1, 1); // 4
    499c:	82 e0       	ldi	r24, 0x02	; 2
    499e:	60 e0       	ldi	r22, 0x00	; 0
    49a0:	41 e0       	ldi	r20, 0x01	; 1
    49a2:	21 e0       	ldi	r18, 0x01	; 1
    49a4:	00 e0       	ldi	r16, 0x00	; 0
    49a6:	ee 24       	eor	r14, r14
    49a8:	cc 24       	eor	r12, r12
    49aa:	c3 94       	inc	r12
    49ac:	aa 24       	eor	r10, r10
    49ae:	a3 94       	inc	r10
    49b0:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    49b4:	fe 01       	movw	r30, r28
    49b6:	ef 5a       	subi	r30, 0xAF	; 175
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	80 e0       	ldi	r24, 0x00	; 0
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	a8 e4       	ldi	r26, 0x48	; 72
    49c0:	b2 e4       	ldi	r27, 0x42	; 66
    49c2:	80 83       	st	Z, r24
    49c4:	91 83       	std	Z+1, r25	; 0x01
    49c6:	a2 83       	std	Z+2, r26	; 0x02
    49c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49ca:	8e 01       	movw	r16, r28
    49cc:	03 5b       	subi	r16, 0xB3	; 179
    49ce:	1f 4f       	sbci	r17, 0xFF	; 255
    49d0:	fe 01       	movw	r30, r28
    49d2:	ef 5a       	subi	r30, 0xAF	; 175
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	60 81       	ld	r22, Z
    49d8:	71 81       	ldd	r23, Z+1	; 0x01
    49da:	82 81       	ldd	r24, Z+2	; 0x02
    49dc:	93 81       	ldd	r25, Z+3	; 0x03
    49de:	20 e0       	ldi	r18, 0x00	; 0
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	4a e7       	ldi	r20, 0x7A	; 122
    49e4:	55 e4       	ldi	r21, 0x45	; 69
    49e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ea:	dc 01       	movw	r26, r24
    49ec:	cb 01       	movw	r24, r22
    49ee:	f8 01       	movw	r30, r16
    49f0:	80 83       	st	Z, r24
    49f2:	91 83       	std	Z+1, r25	; 0x01
    49f4:	a2 83       	std	Z+2, r26	; 0x02
    49f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49f8:	fe 01       	movw	r30, r28
    49fa:	e3 5b       	subi	r30, 0xB3	; 179
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	60 81       	ld	r22, Z
    4a00:	71 81       	ldd	r23, Z+1	; 0x01
    4a02:	82 81       	ldd	r24, Z+2	; 0x02
    4a04:	93 81       	ldd	r25, Z+3	; 0x03
    4a06:	20 e0       	ldi	r18, 0x00	; 0
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	40 e8       	ldi	r20, 0x80	; 128
    4a0c:	5f e3       	ldi	r21, 0x3F	; 63
    4a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a12:	88 23       	and	r24, r24
    4a14:	44 f4       	brge	.+16     	; 0x4a26 <SevenSegment_From0To9+0x69c>
		__ticks = 1;
    4a16:	fe 01       	movw	r30, r28
    4a18:	e5 5b       	subi	r30, 0xB5	; 181
    4a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1c:	81 e0       	ldi	r24, 0x01	; 1
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	91 83       	std	Z+1, r25	; 0x01
    4a22:	80 83       	st	Z, r24
    4a24:	64 c0       	rjmp	.+200    	; 0x4aee <SevenSegment_From0To9+0x764>
	else if (__tmp > 65535)
    4a26:	fe 01       	movw	r30, r28
    4a28:	e3 5b       	subi	r30, 0xB3	; 179
    4a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2c:	60 81       	ld	r22, Z
    4a2e:	71 81       	ldd	r23, Z+1	; 0x01
    4a30:	82 81       	ldd	r24, Z+2	; 0x02
    4a32:	93 81       	ldd	r25, Z+3	; 0x03
    4a34:	20 e0       	ldi	r18, 0x00	; 0
    4a36:	3f ef       	ldi	r19, 0xFF	; 255
    4a38:	4f e7       	ldi	r20, 0x7F	; 127
    4a3a:	57 e4       	ldi	r21, 0x47	; 71
    4a3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a40:	18 16       	cp	r1, r24
    4a42:	0c f0       	brlt	.+2      	; 0x4a46 <SevenSegment_From0To9+0x6bc>
    4a44:	43 c0       	rjmp	.+134    	; 0x4acc <SevenSegment_From0To9+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a46:	fe 01       	movw	r30, r28
    4a48:	ef 5a       	subi	r30, 0xAF	; 175
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	60 81       	ld	r22, Z
    4a4e:	71 81       	ldd	r23, Z+1	; 0x01
    4a50:	82 81       	ldd	r24, Z+2	; 0x02
    4a52:	93 81       	ldd	r25, Z+3	; 0x03
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	40 e2       	ldi	r20, 0x20	; 32
    4a5a:	51 e4       	ldi	r21, 0x41	; 65
    4a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	8e 01       	movw	r16, r28
    4a66:	05 5b       	subi	r16, 0xB5	; 181
    4a68:	1f 4f       	sbci	r17, 0xFF	; 255
    4a6a:	bc 01       	movw	r22, r24
    4a6c:	cd 01       	movw	r24, r26
    4a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	f8 01       	movw	r30, r16
    4a78:	91 83       	std	Z+1, r25	; 0x01
    4a7a:	80 83       	st	Z, r24
    4a7c:	1f c0       	rjmp	.+62     	; 0x4abc <SevenSegment_From0To9+0x732>
    4a7e:	fe 01       	movw	r30, r28
    4a80:	e7 5b       	subi	r30, 0xB7	; 183
    4a82:	ff 4f       	sbci	r31, 0xFF	; 255
    4a84:	80 e9       	ldi	r24, 0x90	; 144
    4a86:	91 e0       	ldi	r25, 0x01	; 1
    4a88:	91 83       	std	Z+1, r25	; 0x01
    4a8a:	80 83       	st	Z, r24
    4a8c:	fe 01       	movw	r30, r28
    4a8e:	e7 5b       	subi	r30, 0xB7	; 183
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	80 81       	ld	r24, Z
    4a94:	91 81       	ldd	r25, Z+1	; 0x01
    4a96:	01 97       	sbiw	r24, 0x01	; 1
    4a98:	f1 f7       	brne	.-4      	; 0x4a96 <SevenSegment_From0To9+0x70c>
    4a9a:	fe 01       	movw	r30, r28
    4a9c:	e7 5b       	subi	r30, 0xB7	; 183
    4a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa0:	91 83       	std	Z+1, r25	; 0x01
    4aa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa4:	de 01       	movw	r26, r28
    4aa6:	a5 5b       	subi	r26, 0xB5	; 181
    4aa8:	bf 4f       	sbci	r27, 0xFF	; 255
    4aaa:	fe 01       	movw	r30, r28
    4aac:	e5 5b       	subi	r30, 0xB5	; 181
    4aae:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab0:	80 81       	ld	r24, Z
    4ab2:	91 81       	ldd	r25, Z+1	; 0x01
    4ab4:	01 97       	sbiw	r24, 0x01	; 1
    4ab6:	11 96       	adiw	r26, 0x01	; 1
    4ab8:	9c 93       	st	X, r25
    4aba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4abc:	fe 01       	movw	r30, r28
    4abe:	e5 5b       	subi	r30, 0xB5	; 181
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	80 81       	ld	r24, Z
    4ac4:	91 81       	ldd	r25, Z+1	; 0x01
    4ac6:	00 97       	sbiw	r24, 0x00	; 0
    4ac8:	d1 f6       	brne	.-76     	; 0x4a7e <SevenSegment_From0To9+0x6f4>
    4aca:	27 c0       	rjmp	.+78     	; 0x4b1a <SevenSegment_From0To9+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4acc:	8e 01       	movw	r16, r28
    4ace:	05 5b       	subi	r16, 0xB5	; 181
    4ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad2:	fe 01       	movw	r30, r28
    4ad4:	e3 5b       	subi	r30, 0xB3	; 179
    4ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad8:	60 81       	ld	r22, Z
    4ada:	71 81       	ldd	r23, Z+1	; 0x01
    4adc:	82 81       	ldd	r24, Z+2	; 0x02
    4ade:	93 81       	ldd	r25, Z+3	; 0x03
    4ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae4:	dc 01       	movw	r26, r24
    4ae6:	cb 01       	movw	r24, r22
    4ae8:	f8 01       	movw	r30, r16
    4aea:	91 83       	std	Z+1, r25	; 0x01
    4aec:	80 83       	st	Z, r24
    4aee:	de 01       	movw	r26, r28
    4af0:	a9 5b       	subi	r26, 0xB9	; 185
    4af2:	bf 4f       	sbci	r27, 0xFF	; 255
    4af4:	fe 01       	movw	r30, r28
    4af6:	e5 5b       	subi	r30, 0xB5	; 181
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	80 81       	ld	r24, Z
    4afc:	91 81       	ldd	r25, Z+1	; 0x01
    4afe:	8d 93       	st	X+, r24
    4b00:	9c 93       	st	X, r25
    4b02:	fe 01       	movw	r30, r28
    4b04:	e9 5b       	subi	r30, 0xB9	; 185
    4b06:	ff 4f       	sbci	r31, 0xFF	; 255
    4b08:	80 81       	ld	r24, Z
    4b0a:	91 81       	ldd	r25, Z+1	; 0x01
    4b0c:	01 97       	sbiw	r24, 0x01	; 1
    4b0e:	f1 f7       	brne	.-4      	; 0x4b0c <SevenSegment_From0To9+0x782>
    4b10:	fe 01       	movw	r30, r28
    4b12:	e9 5b       	subi	r30, 0xB9	; 185
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	91 83       	std	Z+1, r25	; 0x01
    4b18:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 1, 1, 0, 1, 1); // 5
    4b1a:	82 e0       	ldi	r24, 0x02	; 2
    4b1c:	61 e0       	ldi	r22, 0x01	; 1
    4b1e:	40 e0       	ldi	r20, 0x00	; 0
    4b20:	21 e0       	ldi	r18, 0x01	; 1
    4b22:	01 e0       	ldi	r16, 0x01	; 1
    4b24:	ee 24       	eor	r14, r14
    4b26:	cc 24       	eor	r12, r12
    4b28:	c3 94       	inc	r12
    4b2a:	aa 24       	eor	r10, r10
    4b2c:	a3 94       	inc	r10
    4b2e:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    4b32:	fe 01       	movw	r30, r28
    4b34:	ed 5b       	subi	r30, 0xBD	; 189
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	a8 e4       	ldi	r26, 0x48	; 72
    4b3e:	b2 e4       	ldi	r27, 0x42	; 66
    4b40:	80 83       	st	Z, r24
    4b42:	91 83       	std	Z+1, r25	; 0x01
    4b44:	a2 83       	std	Z+2, r26	; 0x02
    4b46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b48:	8e 01       	movw	r16, r28
    4b4a:	01 5c       	subi	r16, 0xC1	; 193
    4b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4e:	fe 01       	movw	r30, r28
    4b50:	ed 5b       	subi	r30, 0xBD	; 189
    4b52:	ff 4f       	sbci	r31, 0xFF	; 255
    4b54:	60 81       	ld	r22, Z
    4b56:	71 81       	ldd	r23, Z+1	; 0x01
    4b58:	82 81       	ldd	r24, Z+2	; 0x02
    4b5a:	93 81       	ldd	r25, Z+3	; 0x03
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	30 e0       	ldi	r19, 0x00	; 0
    4b60:	4a e7       	ldi	r20, 0x7A	; 122
    4b62:	55 e4       	ldi	r21, 0x45	; 69
    4b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	f8 01       	movw	r30, r16
    4b6e:	80 83       	st	Z, r24
    4b70:	91 83       	std	Z+1, r25	; 0x01
    4b72:	a2 83       	std	Z+2, r26	; 0x02
    4b74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b76:	fe 01       	movw	r30, r28
    4b78:	ff 96       	adiw	r30, 0x3f	; 63
    4b7a:	60 81       	ld	r22, Z
    4b7c:	71 81       	ldd	r23, Z+1	; 0x01
    4b7e:	82 81       	ldd	r24, Z+2	; 0x02
    4b80:	93 81       	ldd	r25, Z+3	; 0x03
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e8       	ldi	r20, 0x80	; 128
    4b88:	5f e3       	ldi	r21, 0x3F	; 63
    4b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b8e:	88 23       	and	r24, r24
    4b90:	2c f4       	brge	.+10     	; 0x4b9c <SevenSegment_From0To9+0x812>
		__ticks = 1;
    4b92:	81 e0       	ldi	r24, 0x01	; 1
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	9e af       	std	Y+62, r25	; 0x3e
    4b98:	8d af       	std	Y+61, r24	; 0x3d
    4b9a:	46 c0       	rjmp	.+140    	; 0x4c28 <SevenSegment_From0To9+0x89e>
	else if (__tmp > 65535)
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	ff 96       	adiw	r30, 0x3f	; 63
    4ba0:	60 81       	ld	r22, Z
    4ba2:	71 81       	ldd	r23, Z+1	; 0x01
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	93 81       	ldd	r25, Z+3	; 0x03
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	3f ef       	ldi	r19, 0xFF	; 255
    4bac:	4f e7       	ldi	r20, 0x7F	; 127
    4bae:	57 e4       	ldi	r21, 0x47	; 71
    4bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bb4:	18 16       	cp	r1, r24
    4bb6:	64 f5       	brge	.+88     	; 0x4c10 <SevenSegment_From0To9+0x886>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb8:	fe 01       	movw	r30, r28
    4bba:	ed 5b       	subi	r30, 0xBD	; 189
    4bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbe:	60 81       	ld	r22, Z
    4bc0:	71 81       	ldd	r23, Z+1	; 0x01
    4bc2:	82 81       	ldd	r24, Z+2	; 0x02
    4bc4:	93 81       	ldd	r25, Z+3	; 0x03
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    4bca:	40 e2       	ldi	r20, 0x20	; 32
    4bcc:	51 e4       	ldi	r21, 0x41	; 65
    4bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	bc 01       	movw	r22, r24
    4bd8:	cd 01       	movw	r24, r26
    4bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bde:	dc 01       	movw	r26, r24
    4be0:	cb 01       	movw	r24, r22
    4be2:	9e af       	std	Y+62, r25	; 0x3e
    4be4:	8d af       	std	Y+61, r24	; 0x3d
    4be6:	0f c0       	rjmp	.+30     	; 0x4c06 <SevenSegment_From0To9+0x87c>
    4be8:	80 e9       	ldi	r24, 0x90	; 144
    4bea:	91 e0       	ldi	r25, 0x01	; 1
    4bec:	9c af       	std	Y+60, r25	; 0x3c
    4bee:	8b af       	std	Y+59, r24	; 0x3b
    4bf0:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bf2:	9c ad       	ldd	r25, Y+60	; 0x3c
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	f1 f7       	brne	.-4      	; 0x4bf4 <SevenSegment_From0To9+0x86a>
    4bf8:	9c af       	std	Y+60, r25	; 0x3c
    4bfa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c00:	01 97       	sbiw	r24, 0x01	; 1
    4c02:	9e af       	std	Y+62, r25	; 0x3e
    4c04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c06:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c08:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c0a:	00 97       	sbiw	r24, 0x00	; 0
    4c0c:	69 f7       	brne	.-38     	; 0x4be8 <SevenSegment_From0To9+0x85e>
    4c0e:	16 c0       	rjmp	.+44     	; 0x4c3c <SevenSegment_From0To9+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c10:	fe 01       	movw	r30, r28
    4c12:	ff 96       	adiw	r30, 0x3f	; 63
    4c14:	60 81       	ld	r22, Z
    4c16:	71 81       	ldd	r23, Z+1	; 0x01
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c20:	dc 01       	movw	r26, r24
    4c22:	cb 01       	movw	r24, r22
    4c24:	9e af       	std	Y+62, r25	; 0x3e
    4c26:	8d af       	std	Y+61, r24	; 0x3d
    4c28:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c2c:	9a af       	std	Y+58, r25	; 0x3a
    4c2e:	89 af       	std	Y+57, r24	; 0x39
    4c30:	89 ad       	ldd	r24, Y+57	; 0x39
    4c32:	9a ad       	ldd	r25, Y+58	; 0x3a
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	f1 f7       	brne	.-4      	; 0x4c34 <SevenSegment_From0To9+0x8aa>
    4c38:	9a af       	std	Y+58, r25	; 0x3a
    4c3a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 1, 1, 1, 1, 1); // 6
    4c3c:	82 e0       	ldi	r24, 0x02	; 2
    4c3e:	61 e0       	ldi	r22, 0x01	; 1
    4c40:	40 e0       	ldi	r20, 0x00	; 0
    4c42:	21 e0       	ldi	r18, 0x01	; 1
    4c44:	01 e0       	ldi	r16, 0x01	; 1
    4c46:	ee 24       	eor	r14, r14
    4c48:	e3 94       	inc	r14
    4c4a:	cc 24       	eor	r12, r12
    4c4c:	c3 94       	inc	r12
    4c4e:	aa 24       	eor	r10, r10
    4c50:	a3 94       	inc	r10
    4c52:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	a8 e4       	ldi	r26, 0x48	; 72
    4c5c:	b2 e4       	ldi	r27, 0x42	; 66
    4c5e:	8d ab       	std	Y+53, r24	; 0x35
    4c60:	9e ab       	std	Y+54, r25	; 0x36
    4c62:	af ab       	std	Y+55, r26	; 0x37
    4c64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c66:	6d a9       	ldd	r22, Y+53	; 0x35
    4c68:	7e a9       	ldd	r23, Y+54	; 0x36
    4c6a:	8f a9       	ldd	r24, Y+55	; 0x37
    4c6c:	98 ad       	ldd	r25, Y+56	; 0x38
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	4a e7       	ldi	r20, 0x7A	; 122
    4c74:	55 e4       	ldi	r21, 0x45	; 69
    4c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	89 ab       	std	Y+49, r24	; 0x31
    4c80:	9a ab       	std	Y+50, r25	; 0x32
    4c82:	ab ab       	std	Y+51, r26	; 0x33
    4c84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c86:	69 a9       	ldd	r22, Y+49	; 0x31
    4c88:	7a a9       	ldd	r23, Y+50	; 0x32
    4c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    4c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	40 e8       	ldi	r20, 0x80	; 128
    4c94:	5f e3       	ldi	r21, 0x3F	; 63
    4c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c9a:	88 23       	and	r24, r24
    4c9c:	2c f4       	brge	.+10     	; 0x4ca8 <SevenSegment_From0To9+0x91e>
		__ticks = 1;
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	98 ab       	std	Y+48, r25	; 0x30
    4ca4:	8f a7       	std	Y+47, r24	; 0x2f
    4ca6:	3f c0       	rjmp	.+126    	; 0x4d26 <SevenSegment_From0To9+0x99c>
	else if (__tmp > 65535)
    4ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    4caa:	7a a9       	ldd	r23, Y+50	; 0x32
    4cac:	8b a9       	ldd	r24, Y+51	; 0x33
    4cae:	9c a9       	ldd	r25, Y+52	; 0x34
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	3f ef       	ldi	r19, 0xFF	; 255
    4cb4:	4f e7       	ldi	r20, 0x7F	; 127
    4cb6:	57 e4       	ldi	r21, 0x47	; 71
    4cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cbc:	18 16       	cp	r1, r24
    4cbe:	4c f5       	brge	.+82     	; 0x4d12 <SevenSegment_From0To9+0x988>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cc0:	6d a9       	ldd	r22, Y+53	; 0x35
    4cc2:	7e a9       	ldd	r23, Y+54	; 0x36
    4cc4:	8f a9       	ldd	r24, Y+55	; 0x37
    4cc6:	98 ad       	ldd	r25, Y+56	; 0x38
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	40 e2       	ldi	r20, 0x20	; 32
    4cce:	51 e4       	ldi	r21, 0x41	; 65
    4cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	bc 01       	movw	r22, r24
    4cda:	cd 01       	movw	r24, r26
    4cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce0:	dc 01       	movw	r26, r24
    4ce2:	cb 01       	movw	r24, r22
    4ce4:	98 ab       	std	Y+48, r25	; 0x30
    4ce6:	8f a7       	std	Y+47, r24	; 0x2f
    4ce8:	0f c0       	rjmp	.+30     	; 0x4d08 <SevenSegment_From0To9+0x97e>
    4cea:	80 e9       	ldi	r24, 0x90	; 144
    4cec:	91 e0       	ldi	r25, 0x01	; 1
    4cee:	9e a7       	std	Y+46, r25	; 0x2e
    4cf0:	8d a7       	std	Y+45, r24	; 0x2d
    4cf2:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cf4:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cf6:	01 97       	sbiw	r24, 0x01	; 1
    4cf8:	f1 f7       	brne	.-4      	; 0x4cf6 <SevenSegment_From0To9+0x96c>
    4cfa:	9e a7       	std	Y+46, r25	; 0x2e
    4cfc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d00:	98 a9       	ldd	r25, Y+48	; 0x30
    4d02:	01 97       	sbiw	r24, 0x01	; 1
    4d04:	98 ab       	std	Y+48, r25	; 0x30
    4d06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    4d0c:	00 97       	sbiw	r24, 0x00	; 0
    4d0e:	69 f7       	brne	.-38     	; 0x4cea <SevenSegment_From0To9+0x960>
    4d10:	14 c0       	rjmp	.+40     	; 0x4d3a <SevenSegment_From0To9+0x9b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d12:	69 a9       	ldd	r22, Y+49	; 0x31
    4d14:	7a a9       	ldd	r23, Y+50	; 0x32
    4d16:	8b a9       	ldd	r24, Y+51	; 0x33
    4d18:	9c a9       	ldd	r25, Y+52	; 0x34
    4d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	98 ab       	std	Y+48, r25	; 0x30
    4d24:	8f a7       	std	Y+47, r24	; 0x2f
    4d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d28:	98 a9       	ldd	r25, Y+48	; 0x30
    4d2a:	9c a7       	std	Y+44, r25	; 0x2c
    4d2c:	8b a7       	std	Y+43, r24	; 0x2b
    4d2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d30:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <SevenSegment_From0To9+0x9a8>
    4d36:	9c a7       	std	Y+44, r25	; 0x2c
    4d38:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 0, 0, 0, 0); // 7
    4d3a:	82 e0       	ldi	r24, 0x02	; 2
    4d3c:	61 e0       	ldi	r22, 0x01	; 1
    4d3e:	41 e0       	ldi	r20, 0x01	; 1
    4d40:	21 e0       	ldi	r18, 0x01	; 1
    4d42:	00 e0       	ldi	r16, 0x00	; 0
    4d44:	ee 24       	eor	r14, r14
    4d46:	cc 24       	eor	r12, r12
    4d48:	aa 24       	eor	r10, r10
    4d4a:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    4d4e:	80 e0       	ldi	r24, 0x00	; 0
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	a8 e4       	ldi	r26, 0x48	; 72
    4d54:	b2 e4       	ldi	r27, 0x42	; 66
    4d56:	8f a3       	std	Y+39, r24	; 0x27
    4d58:	98 a7       	std	Y+40, r25	; 0x28
    4d5a:	a9 a7       	std	Y+41, r26	; 0x29
    4d5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d5e:	6f a1       	ldd	r22, Y+39	; 0x27
    4d60:	78 a5       	ldd	r23, Y+40	; 0x28
    4d62:	89 a5       	ldd	r24, Y+41	; 0x29
    4d64:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	4a e7       	ldi	r20, 0x7A	; 122
    4d6c:	55 e4       	ldi	r21, 0x45	; 69
    4d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	8b a3       	std	Y+35, r24	; 0x23
    4d78:	9c a3       	std	Y+36, r25	; 0x24
    4d7a:	ad a3       	std	Y+37, r26	; 0x25
    4d7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    4d80:	7c a1       	ldd	r23, Y+36	; 0x24
    4d82:	8d a1       	ldd	r24, Y+37	; 0x25
    4d84:	9e a1       	ldd	r25, Y+38	; 0x26
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	30 e0       	ldi	r19, 0x00	; 0
    4d8a:	40 e8       	ldi	r20, 0x80	; 128
    4d8c:	5f e3       	ldi	r21, 0x3F	; 63
    4d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d92:	88 23       	and	r24, r24
    4d94:	2c f4       	brge	.+10     	; 0x4da0 <SevenSegment_From0To9+0xa16>
		__ticks = 1;
    4d96:	81 e0       	ldi	r24, 0x01	; 1
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	9a a3       	std	Y+34, r25	; 0x22
    4d9c:	89 a3       	std	Y+33, r24	; 0x21
    4d9e:	3f c0       	rjmp	.+126    	; 0x4e1e <SevenSegment_From0To9+0xa94>
	else if (__tmp > 65535)
    4da0:	6b a1       	ldd	r22, Y+35	; 0x23
    4da2:	7c a1       	ldd	r23, Y+36	; 0x24
    4da4:	8d a1       	ldd	r24, Y+37	; 0x25
    4da6:	9e a1       	ldd	r25, Y+38	; 0x26
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	3f ef       	ldi	r19, 0xFF	; 255
    4dac:	4f e7       	ldi	r20, 0x7F	; 127
    4dae:	57 e4       	ldi	r21, 0x47	; 71
    4db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4db4:	18 16       	cp	r1, r24
    4db6:	4c f5       	brge	.+82     	; 0x4e0a <SevenSegment_From0To9+0xa80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4db8:	6f a1       	ldd	r22, Y+39	; 0x27
    4dba:	78 a5       	ldd	r23, Y+40	; 0x28
    4dbc:	89 a5       	ldd	r24, Y+41	; 0x29
    4dbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dc0:	20 e0       	ldi	r18, 0x00	; 0
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	40 e2       	ldi	r20, 0x20	; 32
    4dc6:	51 e4       	ldi	r21, 0x41	; 65
    4dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	bc 01       	movw	r22, r24
    4dd2:	cd 01       	movw	r24, r26
    4dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	9a a3       	std	Y+34, r25	; 0x22
    4dde:	89 a3       	std	Y+33, r24	; 0x21
    4de0:	0f c0       	rjmp	.+30     	; 0x4e00 <SevenSegment_From0To9+0xa76>
    4de2:	80 e9       	ldi	r24, 0x90	; 144
    4de4:	91 e0       	ldi	r25, 0x01	; 1
    4de6:	98 a3       	std	Y+32, r25	; 0x20
    4de8:	8f 8f       	std	Y+31, r24	; 0x1f
    4dea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dec:	98 a1       	ldd	r25, Y+32	; 0x20
    4dee:	01 97       	sbiw	r24, 0x01	; 1
    4df0:	f1 f7       	brne	.-4      	; 0x4dee <SevenSegment_From0To9+0xa64>
    4df2:	98 a3       	std	Y+32, r25	; 0x20
    4df4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4df6:	89 a1       	ldd	r24, Y+33	; 0x21
    4df8:	9a a1       	ldd	r25, Y+34	; 0x22
    4dfa:	01 97       	sbiw	r24, 0x01	; 1
    4dfc:	9a a3       	std	Y+34, r25	; 0x22
    4dfe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e00:	89 a1       	ldd	r24, Y+33	; 0x21
    4e02:	9a a1       	ldd	r25, Y+34	; 0x22
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	69 f7       	brne	.-38     	; 0x4de2 <SevenSegment_From0To9+0xa58>
    4e08:	14 c0       	rjmp	.+40     	; 0x4e32 <SevenSegment_From0To9+0xaa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    4e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    4e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    4e10:	9e a1       	ldd	r25, Y+38	; 0x26
    4e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	9a a3       	std	Y+34, r25	; 0x22
    4e1c:	89 a3       	std	Y+33, r24	; 0x21
    4e1e:	89 a1       	ldd	r24, Y+33	; 0x21
    4e20:	9a a1       	ldd	r25, Y+34	; 0x22
    4e22:	9e 8f       	std	Y+30, r25	; 0x1e
    4e24:	8d 8f       	std	Y+29, r24	; 0x1d
    4e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e2a:	01 97       	sbiw	r24, 0x01	; 1
    4e2c:	f1 f7       	brne	.-4      	; 0x4e2a <SevenSegment_From0To9+0xaa0>
    4e2e:	9e 8f       	std	Y+30, r25	; 0x1e
    4e30:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 1, 1, 1, 1); // 8
    4e32:	82 e0       	ldi	r24, 0x02	; 2
    4e34:	61 e0       	ldi	r22, 0x01	; 1
    4e36:	41 e0       	ldi	r20, 0x01	; 1
    4e38:	21 e0       	ldi	r18, 0x01	; 1
    4e3a:	01 e0       	ldi	r16, 0x01	; 1
    4e3c:	ee 24       	eor	r14, r14
    4e3e:	e3 94       	inc	r14
    4e40:	cc 24       	eor	r12, r12
    4e42:	c3 94       	inc	r12
    4e44:	aa 24       	eor	r10, r10
    4e46:	a3 94       	inc	r10
    4e48:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	a8 e4       	ldi	r26, 0x48	; 72
    4e52:	b2 e4       	ldi	r27, 0x42	; 66
    4e54:	89 8f       	std	Y+25, r24	; 0x19
    4e56:	9a 8f       	std	Y+26, r25	; 0x1a
    4e58:	ab 8f       	std	Y+27, r26	; 0x1b
    4e5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    4e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	4a e7       	ldi	r20, 0x7A	; 122
    4e6a:	55 e4       	ldi	r21, 0x45	; 69
    4e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	8d 8b       	std	Y+21, r24	; 0x15
    4e76:	9e 8b       	std	Y+22, r25	; 0x16
    4e78:	af 8b       	std	Y+23, r26	; 0x17
    4e7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e80:	8f 89       	ldd	r24, Y+23	; 0x17
    4e82:	98 8d       	ldd	r25, Y+24	; 0x18
    4e84:	20 e0       	ldi	r18, 0x00	; 0
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	40 e8       	ldi	r20, 0x80	; 128
    4e8a:	5f e3       	ldi	r21, 0x3F	; 63
    4e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e90:	88 23       	and	r24, r24
    4e92:	2c f4       	brge	.+10     	; 0x4e9e <SevenSegment_From0To9+0xb14>
		__ticks = 1;
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	9c 8b       	std	Y+20, r25	; 0x14
    4e9a:	8b 8b       	std	Y+19, r24	; 0x13
    4e9c:	3f c0       	rjmp	.+126    	; 0x4f1c <SevenSegment_From0To9+0xb92>
	else if (__tmp > 65535)
    4e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    4ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	3f ef       	ldi	r19, 0xFF	; 255
    4eaa:	4f e7       	ldi	r20, 0x7F	; 127
    4eac:	57 e4       	ldi	r21, 0x47	; 71
    4eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4eb2:	18 16       	cp	r1, r24
    4eb4:	4c f5       	brge	.+82     	; 0x4f08 <SevenSegment_From0To9+0xb7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    4eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e2       	ldi	r20, 0x20	; 32
    4ec4:	51 e4       	ldi	r21, 0x41	; 65
    4ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	bc 01       	movw	r22, r24
    4ed0:	cd 01       	movw	r24, r26
    4ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	9c 8b       	std	Y+20, r25	; 0x14
    4edc:	8b 8b       	std	Y+19, r24	; 0x13
    4ede:	0f c0       	rjmp	.+30     	; 0x4efe <SevenSegment_From0To9+0xb74>
    4ee0:	80 e9       	ldi	r24, 0x90	; 144
    4ee2:	91 e0       	ldi	r25, 0x01	; 1
    4ee4:	9a 8b       	std	Y+18, r25	; 0x12
    4ee6:	89 8b       	std	Y+17, r24	; 0x11
    4ee8:	89 89       	ldd	r24, Y+17	; 0x11
    4eea:	9a 89       	ldd	r25, Y+18	; 0x12
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	f1 f7       	brne	.-4      	; 0x4eec <SevenSegment_From0To9+0xb62>
    4ef0:	9a 8b       	std	Y+18, r25	; 0x12
    4ef2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	9c 8b       	std	Y+20, r25	; 0x14
    4efc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efe:	8b 89       	ldd	r24, Y+19	; 0x13
    4f00:	9c 89       	ldd	r25, Y+20	; 0x14
    4f02:	00 97       	sbiw	r24, 0x00	; 0
    4f04:	69 f7       	brne	.-38     	; 0x4ee0 <SevenSegment_From0To9+0xb56>
    4f06:	14 c0       	rjmp	.+40     	; 0x4f30 <SevenSegment_From0To9+0xba6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f08:	6d 89       	ldd	r22, Y+21	; 0x15
    4f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	9c 8b       	std	Y+20, r25	; 0x14
    4f1a:	8b 8b       	std	Y+19, r24	; 0x13
    4f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f20:	98 8b       	std	Y+16, r25	; 0x10
    4f22:	8f 87       	std	Y+15, r24	; 0x0f
    4f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f26:	98 89       	ldd	r25, Y+16	; 0x10
    4f28:	01 97       	sbiw	r24, 0x01	; 1
    4f2a:	f1 f7       	brne	.-4      	; 0x4f28 <SevenSegment_From0To9+0xb9e>
    4f2c:	98 8b       	std	Y+16, r25	; 0x10
    4f2e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(2, 1, 1, 1, 1, 0, 1, 1); // 9
    4f30:	82 e0       	ldi	r24, 0x02	; 2
    4f32:	61 e0       	ldi	r22, 0x01	; 1
    4f34:	41 e0       	ldi	r20, 0x01	; 1
    4f36:	21 e0       	ldi	r18, 0x01	; 1
    4f38:	01 e0       	ldi	r16, 0x01	; 1
    4f3a:	ee 24       	eor	r14, r14
    4f3c:	cc 24       	eor	r12, r12
    4f3e:	c3 94       	inc	r12
    4f40:	aa 24       	eor	r10, r10
    4f42:	a3 94       	inc	r10
    4f44:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	a8 e4       	ldi	r26, 0x48	; 72
    4f4e:	b2 e4       	ldi	r27, 0x42	; 66
    4f50:	8b 87       	std	Y+11, r24	; 0x0b
    4f52:	9c 87       	std	Y+12, r25	; 0x0c
    4f54:	ad 87       	std	Y+13, r26	; 0x0d
    4f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f60:	20 e0       	ldi	r18, 0x00	; 0
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	4a e7       	ldi	r20, 0x7A	; 122
    4f66:	55 e4       	ldi	r21, 0x45	; 69
    4f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	cb 01       	movw	r24, r22
    4f70:	8f 83       	std	Y+7, r24	; 0x07
    4f72:	98 87       	std	Y+8, r25	; 0x08
    4f74:	a9 87       	std	Y+9, r26	; 0x09
    4f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f78:	6f 81       	ldd	r22, Y+7	; 0x07
    4f7a:	78 85       	ldd	r23, Y+8	; 0x08
    4f7c:	89 85       	ldd	r24, Y+9	; 0x09
    4f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	30 e0       	ldi	r19, 0x00	; 0
    4f84:	40 e8       	ldi	r20, 0x80	; 128
    4f86:	5f e3       	ldi	r21, 0x3F	; 63
    4f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f8c:	88 23       	and	r24, r24
    4f8e:	2c f4       	brge	.+10     	; 0x4f9a <SevenSegment_From0To9+0xc10>
		__ticks = 1;
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	9e 83       	std	Y+6, r25	; 0x06
    4f96:	8d 83       	std	Y+5, r24	; 0x05
    4f98:	3f c0       	rjmp	.+126    	; 0x5018 <SevenSegment_From0To9+0xc8e>
	else if (__tmp > 65535)
    4f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f9c:	78 85       	ldd	r23, Y+8	; 0x08
    4f9e:	89 85       	ldd	r24, Y+9	; 0x09
    4fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	3f ef       	ldi	r19, 0xFF	; 255
    4fa6:	4f e7       	ldi	r20, 0x7F	; 127
    4fa8:	57 e4       	ldi	r21, 0x47	; 71
    4faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fae:	18 16       	cp	r1, r24
    4fb0:	4c f5       	brge	.+82     	; 0x5004 <SevenSegment_From0To9+0xc7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	30 e0       	ldi	r19, 0x00	; 0
    4fbe:	40 e2       	ldi	r20, 0x20	; 32
    4fc0:	51 e4       	ldi	r21, 0x41	; 65
    4fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc6:	dc 01       	movw	r26, r24
    4fc8:	cb 01       	movw	r24, r22
    4fca:	bc 01       	movw	r22, r24
    4fcc:	cd 01       	movw	r24, r26
    4fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd2:	dc 01       	movw	r26, r24
    4fd4:	cb 01       	movw	r24, r22
    4fd6:	9e 83       	std	Y+6, r25	; 0x06
    4fd8:	8d 83       	std	Y+5, r24	; 0x05
    4fda:	0f c0       	rjmp	.+30     	; 0x4ffa <SevenSegment_From0To9+0xc70>
    4fdc:	80 e9       	ldi	r24, 0x90	; 144
    4fde:	91 e0       	ldi	r25, 0x01	; 1
    4fe0:	9c 83       	std	Y+4, r25	; 0x04
    4fe2:	8b 83       	std	Y+3, r24	; 0x03
    4fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe8:	01 97       	sbiw	r24, 0x01	; 1
    4fea:	f1 f7       	brne	.-4      	; 0x4fe8 <SevenSegment_From0To9+0xc5e>
    4fec:	9c 83       	std	Y+4, r25	; 0x04
    4fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff4:	01 97       	sbiw	r24, 0x01	; 1
    4ff6:	9e 83       	std	Y+6, r25	; 0x06
    4ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    4ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	69 f7       	brne	.-38     	; 0x4fdc <SevenSegment_From0To9+0xc52>
    5002:	d3 c9       	rjmp	.-3162   	; 0x43aa <SevenSegment_From0To9+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5004:	6f 81       	ldd	r22, Y+7	; 0x07
    5006:	78 85       	ldd	r23, Y+8	; 0x08
    5008:	89 85       	ldd	r24, Y+9	; 0x09
    500a:	9a 85       	ldd	r25, Y+10	; 0x0a
    500c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5010:	dc 01       	movw	r26, r24
    5012:	cb 01       	movw	r24, r22
    5014:	9e 83       	std	Y+6, r25	; 0x06
    5016:	8d 83       	std	Y+5, r24	; 0x05
    5018:	8d 81       	ldd	r24, Y+5	; 0x05
    501a:	9e 81       	ldd	r25, Y+6	; 0x06
    501c:	9a 83       	std	Y+2, r25	; 0x02
    501e:	89 83       	std	Y+1, r24	; 0x01
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	9a 81       	ldd	r25, Y+2	; 0x02
    5024:	01 97       	sbiw	r24, 0x01	; 1
    5026:	f1 f7       	brne	.-4      	; 0x5024 <SevenSegment_From0To9+0xc9a>
    5028:	9a 83       	std	Y+2, r25	; 0x02
    502a:	89 83       	std	Y+1, r24	; 0x01
    502c:	be c9       	rjmp	.-3204   	; 0x43aa <SevenSegment_From0To9+0x20>

0000502e <SevenSegment_FromAToH>:
		_delay_ms(50);
	}
}

void SevenSegment_FromAToH(void){
    502e:	af 92       	push	r10
    5030:	cf 92       	push	r12
    5032:	ef 92       	push	r14
    5034:	0f 93       	push	r16
    5036:	1f 93       	push	r17
    5038:	df 93       	push	r29
    503a:	cf 93       	push	r28
    503c:	cd b7       	in	r28, 0x3d	; 61
    503e:	de b7       	in	r29, 0x3e	; 62
    5040:	c0 57       	subi	r28, 0x70	; 112
    5042:	d0 40       	sbci	r29, 0x00	; 0
    5044:	0f b6       	in	r0, 0x3f	; 63
    5046:	f8 94       	cli
    5048:	de bf       	out	0x3e, r29	; 62
    504a:	0f be       	out	0x3f, r0	; 63
    504c:	cd bf       	out	0x3d, r28	; 61
	while(1){
		SevenSegment_Display(2, 1, 1, 1, 0, 1, 1, 1); // A
    504e:	82 e0       	ldi	r24, 0x02	; 2
    5050:	61 e0       	ldi	r22, 0x01	; 1
    5052:	41 e0       	ldi	r20, 0x01	; 1
    5054:	21 e0       	ldi	r18, 0x01	; 1
    5056:	00 e0       	ldi	r16, 0x00	; 0
    5058:	ee 24       	eor	r14, r14
    505a:	e3 94       	inc	r14
    505c:	cc 24       	eor	r12, r12
    505e:	c3 94       	inc	r12
    5060:	aa 24       	eor	r10, r10
    5062:	a3 94       	inc	r10
    5064:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    5068:	fe 01       	movw	r30, r28
    506a:	e3 59       	subi	r30, 0x93	; 147
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 e0       	ldi	r24, 0x00	; 0
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	a8 e4       	ldi	r26, 0x48	; 72
    5074:	b2 e4       	ldi	r27, 0x42	; 66
    5076:	80 83       	st	Z, r24
    5078:	91 83       	std	Z+1, r25	; 0x01
    507a:	a2 83       	std	Z+2, r26	; 0x02
    507c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    507e:	8e 01       	movw	r16, r28
    5080:	07 59       	subi	r16, 0x97	; 151
    5082:	1f 4f       	sbci	r17, 0xFF	; 255
    5084:	fe 01       	movw	r30, r28
    5086:	e3 59       	subi	r30, 0x93	; 147
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	60 81       	ld	r22, Z
    508c:	71 81       	ldd	r23, Z+1	; 0x01
    508e:	82 81       	ldd	r24, Z+2	; 0x02
    5090:	93 81       	ldd	r25, Z+3	; 0x03
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	4a e7       	ldi	r20, 0x7A	; 122
    5098:	55 e4       	ldi	r21, 0x45	; 69
    509a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    509e:	dc 01       	movw	r26, r24
    50a0:	cb 01       	movw	r24, r22
    50a2:	f8 01       	movw	r30, r16
    50a4:	80 83       	st	Z, r24
    50a6:	91 83       	std	Z+1, r25	; 0x01
    50a8:	a2 83       	std	Z+2, r26	; 0x02
    50aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50ac:	fe 01       	movw	r30, r28
    50ae:	e7 59       	subi	r30, 0x97	; 151
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	60 81       	ld	r22, Z
    50b4:	71 81       	ldd	r23, Z+1	; 0x01
    50b6:	82 81       	ldd	r24, Z+2	; 0x02
    50b8:	93 81       	ldd	r25, Z+3	; 0x03
    50ba:	20 e0       	ldi	r18, 0x00	; 0
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	40 e8       	ldi	r20, 0x80	; 128
    50c0:	5f e3       	ldi	r21, 0x3F	; 63
    50c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50c6:	88 23       	and	r24, r24
    50c8:	44 f4       	brge	.+16     	; 0x50da <SevenSegment_FromAToH+0xac>
		__ticks = 1;
    50ca:	fe 01       	movw	r30, r28
    50cc:	e9 59       	subi	r30, 0x99	; 153
    50ce:	ff 4f       	sbci	r31, 0xFF	; 255
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	80 83       	st	Z, r24
    50d8:	64 c0       	rjmp	.+200    	; 0x51a2 <SevenSegment_FromAToH+0x174>
	else if (__tmp > 65535)
    50da:	fe 01       	movw	r30, r28
    50dc:	e7 59       	subi	r30, 0x97	; 151
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	60 81       	ld	r22, Z
    50e2:	71 81       	ldd	r23, Z+1	; 0x01
    50e4:	82 81       	ldd	r24, Z+2	; 0x02
    50e6:	93 81       	ldd	r25, Z+3	; 0x03
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	3f ef       	ldi	r19, 0xFF	; 255
    50ec:	4f e7       	ldi	r20, 0x7F	; 127
    50ee:	57 e4       	ldi	r21, 0x47	; 71
    50f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50f4:	18 16       	cp	r1, r24
    50f6:	0c f0       	brlt	.+2      	; 0x50fa <SevenSegment_FromAToH+0xcc>
    50f8:	43 c0       	rjmp	.+134    	; 0x5180 <SevenSegment_FromAToH+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50fa:	fe 01       	movw	r30, r28
    50fc:	e3 59       	subi	r30, 0x93	; 147
    50fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5100:	60 81       	ld	r22, Z
    5102:	71 81       	ldd	r23, Z+1	; 0x01
    5104:	82 81       	ldd	r24, Z+2	; 0x02
    5106:	93 81       	ldd	r25, Z+3	; 0x03
    5108:	20 e0       	ldi	r18, 0x00	; 0
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	40 e2       	ldi	r20, 0x20	; 32
    510e:	51 e4       	ldi	r21, 0x41	; 65
    5110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	8e 01       	movw	r16, r28
    511a:	09 59       	subi	r16, 0x99	; 153
    511c:	1f 4f       	sbci	r17, 0xFF	; 255
    511e:	bc 01       	movw	r22, r24
    5120:	cd 01       	movw	r24, r26
    5122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	f8 01       	movw	r30, r16
    512c:	91 83       	std	Z+1, r25	; 0x01
    512e:	80 83       	st	Z, r24
    5130:	1f c0       	rjmp	.+62     	; 0x5170 <SevenSegment_FromAToH+0x142>
    5132:	fe 01       	movw	r30, r28
    5134:	eb 59       	subi	r30, 0x9B	; 155
    5136:	ff 4f       	sbci	r31, 0xFF	; 255
    5138:	80 e9       	ldi	r24, 0x90	; 144
    513a:	91 e0       	ldi	r25, 0x01	; 1
    513c:	91 83       	std	Z+1, r25	; 0x01
    513e:	80 83       	st	Z, r24
    5140:	fe 01       	movw	r30, r28
    5142:	eb 59       	subi	r30, 0x9B	; 155
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	80 81       	ld	r24, Z
    5148:	91 81       	ldd	r25, Z+1	; 0x01
    514a:	01 97       	sbiw	r24, 0x01	; 1
    514c:	f1 f7       	brne	.-4      	; 0x514a <SevenSegment_FromAToH+0x11c>
    514e:	fe 01       	movw	r30, r28
    5150:	eb 59       	subi	r30, 0x9B	; 155
    5152:	ff 4f       	sbci	r31, 0xFF	; 255
    5154:	91 83       	std	Z+1, r25	; 0x01
    5156:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5158:	de 01       	movw	r26, r28
    515a:	a9 59       	subi	r26, 0x99	; 153
    515c:	bf 4f       	sbci	r27, 0xFF	; 255
    515e:	fe 01       	movw	r30, r28
    5160:	e9 59       	subi	r30, 0x99	; 153
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	80 81       	ld	r24, Z
    5166:	91 81       	ldd	r25, Z+1	; 0x01
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	11 96       	adiw	r26, 0x01	; 1
    516c:	9c 93       	st	X, r25
    516e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5170:	fe 01       	movw	r30, r28
    5172:	e9 59       	subi	r30, 0x99	; 153
    5174:	ff 4f       	sbci	r31, 0xFF	; 255
    5176:	80 81       	ld	r24, Z
    5178:	91 81       	ldd	r25, Z+1	; 0x01
    517a:	00 97       	sbiw	r24, 0x00	; 0
    517c:	d1 f6       	brne	.-76     	; 0x5132 <SevenSegment_FromAToH+0x104>
    517e:	27 c0       	rjmp	.+78     	; 0x51ce <SevenSegment_FromAToH+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5180:	8e 01       	movw	r16, r28
    5182:	09 59       	subi	r16, 0x99	; 153
    5184:	1f 4f       	sbci	r17, 0xFF	; 255
    5186:	fe 01       	movw	r30, r28
    5188:	e7 59       	subi	r30, 0x97	; 151
    518a:	ff 4f       	sbci	r31, 0xFF	; 255
    518c:	60 81       	ld	r22, Z
    518e:	71 81       	ldd	r23, Z+1	; 0x01
    5190:	82 81       	ldd	r24, Z+2	; 0x02
    5192:	93 81       	ldd	r25, Z+3	; 0x03
    5194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5198:	dc 01       	movw	r26, r24
    519a:	cb 01       	movw	r24, r22
    519c:	f8 01       	movw	r30, r16
    519e:	91 83       	std	Z+1, r25	; 0x01
    51a0:	80 83       	st	Z, r24
    51a2:	de 01       	movw	r26, r28
    51a4:	ad 59       	subi	r26, 0x9D	; 157
    51a6:	bf 4f       	sbci	r27, 0xFF	; 255
    51a8:	fe 01       	movw	r30, r28
    51aa:	e9 59       	subi	r30, 0x99	; 153
    51ac:	ff 4f       	sbci	r31, 0xFF	; 255
    51ae:	80 81       	ld	r24, Z
    51b0:	91 81       	ldd	r25, Z+1	; 0x01
    51b2:	8d 93       	st	X+, r24
    51b4:	9c 93       	st	X, r25
    51b6:	fe 01       	movw	r30, r28
    51b8:	ed 59       	subi	r30, 0x9D	; 157
    51ba:	ff 4f       	sbci	r31, 0xFF	; 255
    51bc:	80 81       	ld	r24, Z
    51be:	91 81       	ldd	r25, Z+1	; 0x01
    51c0:	01 97       	sbiw	r24, 0x01	; 1
    51c2:	f1 f7       	brne	.-4      	; 0x51c0 <SevenSegment_FromAToH+0x192>
    51c4:	fe 01       	movw	r30, r28
    51c6:	ed 59       	subi	r30, 0x9D	; 157
    51c8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ca:	91 83       	std	Z+1, r25	; 0x01
    51cc:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 0, 1, 1, 1, 1, 1); // B
    51ce:	82 e0       	ldi	r24, 0x02	; 2
    51d0:	60 e0       	ldi	r22, 0x00	; 0
    51d2:	40 e0       	ldi	r20, 0x00	; 0
    51d4:	21 e0       	ldi	r18, 0x01	; 1
    51d6:	01 e0       	ldi	r16, 0x01	; 1
    51d8:	ee 24       	eor	r14, r14
    51da:	e3 94       	inc	r14
    51dc:	cc 24       	eor	r12, r12
    51de:	c3 94       	inc	r12
    51e0:	aa 24       	eor	r10, r10
    51e2:	a3 94       	inc	r10
    51e4:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    51e8:	fe 01       	movw	r30, r28
    51ea:	e1 5a       	subi	r30, 0xA1	; 161
    51ec:	ff 4f       	sbci	r31, 0xFF	; 255
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	a8 e4       	ldi	r26, 0x48	; 72
    51f4:	b2 e4       	ldi	r27, 0x42	; 66
    51f6:	80 83       	st	Z, r24
    51f8:	91 83       	std	Z+1, r25	; 0x01
    51fa:	a2 83       	std	Z+2, r26	; 0x02
    51fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51fe:	8e 01       	movw	r16, r28
    5200:	05 5a       	subi	r16, 0xA5	; 165
    5202:	1f 4f       	sbci	r17, 0xFF	; 255
    5204:	fe 01       	movw	r30, r28
    5206:	e1 5a       	subi	r30, 0xA1	; 161
    5208:	ff 4f       	sbci	r31, 0xFF	; 255
    520a:	60 81       	ld	r22, Z
    520c:	71 81       	ldd	r23, Z+1	; 0x01
    520e:	82 81       	ldd	r24, Z+2	; 0x02
    5210:	93 81       	ldd	r25, Z+3	; 0x03
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	4a e7       	ldi	r20, 0x7A	; 122
    5218:	55 e4       	ldi	r21, 0x45	; 69
    521a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	f8 01       	movw	r30, r16
    5224:	80 83       	st	Z, r24
    5226:	91 83       	std	Z+1, r25	; 0x01
    5228:	a2 83       	std	Z+2, r26	; 0x02
    522a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    522c:	fe 01       	movw	r30, r28
    522e:	e5 5a       	subi	r30, 0xA5	; 165
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	60 81       	ld	r22, Z
    5234:	71 81       	ldd	r23, Z+1	; 0x01
    5236:	82 81       	ldd	r24, Z+2	; 0x02
    5238:	93 81       	ldd	r25, Z+3	; 0x03
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	30 e0       	ldi	r19, 0x00	; 0
    523e:	40 e8       	ldi	r20, 0x80	; 128
    5240:	5f e3       	ldi	r21, 0x3F	; 63
    5242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5246:	88 23       	and	r24, r24
    5248:	44 f4       	brge	.+16     	; 0x525a <SevenSegment_FromAToH+0x22c>
		__ticks = 1;
    524a:	fe 01       	movw	r30, r28
    524c:	e7 5a       	subi	r30, 0xA7	; 167
    524e:	ff 4f       	sbci	r31, 0xFF	; 255
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	91 83       	std	Z+1, r25	; 0x01
    5256:	80 83       	st	Z, r24
    5258:	64 c0       	rjmp	.+200    	; 0x5322 <SevenSegment_FromAToH+0x2f4>
	else if (__tmp > 65535)
    525a:	fe 01       	movw	r30, r28
    525c:	e5 5a       	subi	r30, 0xA5	; 165
    525e:	ff 4f       	sbci	r31, 0xFF	; 255
    5260:	60 81       	ld	r22, Z
    5262:	71 81       	ldd	r23, Z+1	; 0x01
    5264:	82 81       	ldd	r24, Z+2	; 0x02
    5266:	93 81       	ldd	r25, Z+3	; 0x03
    5268:	20 e0       	ldi	r18, 0x00	; 0
    526a:	3f ef       	ldi	r19, 0xFF	; 255
    526c:	4f e7       	ldi	r20, 0x7F	; 127
    526e:	57 e4       	ldi	r21, 0x47	; 71
    5270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5274:	18 16       	cp	r1, r24
    5276:	0c f0       	brlt	.+2      	; 0x527a <SevenSegment_FromAToH+0x24c>
    5278:	43 c0       	rjmp	.+134    	; 0x5300 <SevenSegment_FromAToH+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    527a:	fe 01       	movw	r30, r28
    527c:	e1 5a       	subi	r30, 0xA1	; 161
    527e:	ff 4f       	sbci	r31, 0xFF	; 255
    5280:	60 81       	ld	r22, Z
    5282:	71 81       	ldd	r23, Z+1	; 0x01
    5284:	82 81       	ldd	r24, Z+2	; 0x02
    5286:	93 81       	ldd	r25, Z+3	; 0x03
    5288:	20 e0       	ldi	r18, 0x00	; 0
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	40 e2       	ldi	r20, 0x20	; 32
    528e:	51 e4       	ldi	r21, 0x41	; 65
    5290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5294:	dc 01       	movw	r26, r24
    5296:	cb 01       	movw	r24, r22
    5298:	8e 01       	movw	r16, r28
    529a:	07 5a       	subi	r16, 0xA7	; 167
    529c:	1f 4f       	sbci	r17, 0xFF	; 255
    529e:	bc 01       	movw	r22, r24
    52a0:	cd 01       	movw	r24, r26
    52a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a6:	dc 01       	movw	r26, r24
    52a8:	cb 01       	movw	r24, r22
    52aa:	f8 01       	movw	r30, r16
    52ac:	91 83       	std	Z+1, r25	; 0x01
    52ae:	80 83       	st	Z, r24
    52b0:	1f c0       	rjmp	.+62     	; 0x52f0 <SevenSegment_FromAToH+0x2c2>
    52b2:	fe 01       	movw	r30, r28
    52b4:	e9 5a       	subi	r30, 0xA9	; 169
    52b6:	ff 4f       	sbci	r31, 0xFF	; 255
    52b8:	80 e9       	ldi	r24, 0x90	; 144
    52ba:	91 e0       	ldi	r25, 0x01	; 1
    52bc:	91 83       	std	Z+1, r25	; 0x01
    52be:	80 83       	st	Z, r24
    52c0:	fe 01       	movw	r30, r28
    52c2:	e9 5a       	subi	r30, 0xA9	; 169
    52c4:	ff 4f       	sbci	r31, 0xFF	; 255
    52c6:	80 81       	ld	r24, Z
    52c8:	91 81       	ldd	r25, Z+1	; 0x01
    52ca:	01 97       	sbiw	r24, 0x01	; 1
    52cc:	f1 f7       	brne	.-4      	; 0x52ca <SevenSegment_FromAToH+0x29c>
    52ce:	fe 01       	movw	r30, r28
    52d0:	e9 5a       	subi	r30, 0xA9	; 169
    52d2:	ff 4f       	sbci	r31, 0xFF	; 255
    52d4:	91 83       	std	Z+1, r25	; 0x01
    52d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52d8:	de 01       	movw	r26, r28
    52da:	a7 5a       	subi	r26, 0xA7	; 167
    52dc:	bf 4f       	sbci	r27, 0xFF	; 255
    52de:	fe 01       	movw	r30, r28
    52e0:	e7 5a       	subi	r30, 0xA7	; 167
    52e2:	ff 4f       	sbci	r31, 0xFF	; 255
    52e4:	80 81       	ld	r24, Z
    52e6:	91 81       	ldd	r25, Z+1	; 0x01
    52e8:	01 97       	sbiw	r24, 0x01	; 1
    52ea:	11 96       	adiw	r26, 0x01	; 1
    52ec:	9c 93       	st	X, r25
    52ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52f0:	fe 01       	movw	r30, r28
    52f2:	e7 5a       	subi	r30, 0xA7	; 167
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	80 81       	ld	r24, Z
    52f8:	91 81       	ldd	r25, Z+1	; 0x01
    52fa:	00 97       	sbiw	r24, 0x00	; 0
    52fc:	d1 f6       	brne	.-76     	; 0x52b2 <SevenSegment_FromAToH+0x284>
    52fe:	27 c0       	rjmp	.+78     	; 0x534e <SevenSegment_FromAToH+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5300:	8e 01       	movw	r16, r28
    5302:	07 5a       	subi	r16, 0xA7	; 167
    5304:	1f 4f       	sbci	r17, 0xFF	; 255
    5306:	fe 01       	movw	r30, r28
    5308:	e5 5a       	subi	r30, 0xA5	; 165
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	60 81       	ld	r22, Z
    530e:	71 81       	ldd	r23, Z+1	; 0x01
    5310:	82 81       	ldd	r24, Z+2	; 0x02
    5312:	93 81       	ldd	r25, Z+3	; 0x03
    5314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	f8 01       	movw	r30, r16
    531e:	91 83       	std	Z+1, r25	; 0x01
    5320:	80 83       	st	Z, r24
    5322:	de 01       	movw	r26, r28
    5324:	ab 5a       	subi	r26, 0xAB	; 171
    5326:	bf 4f       	sbci	r27, 0xFF	; 255
    5328:	fe 01       	movw	r30, r28
    532a:	e7 5a       	subi	r30, 0xA7	; 167
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	80 81       	ld	r24, Z
    5330:	91 81       	ldd	r25, Z+1	; 0x01
    5332:	8d 93       	st	X+, r24
    5334:	9c 93       	st	X, r25
    5336:	fe 01       	movw	r30, r28
    5338:	eb 5a       	subi	r30, 0xAB	; 171
    533a:	ff 4f       	sbci	r31, 0xFF	; 255
    533c:	80 81       	ld	r24, Z
    533e:	91 81       	ldd	r25, Z+1	; 0x01
    5340:	01 97       	sbiw	r24, 0x01	; 1
    5342:	f1 f7       	brne	.-4      	; 0x5340 <SevenSegment_FromAToH+0x312>
    5344:	fe 01       	movw	r30, r28
    5346:	eb 5a       	subi	r30, 0xAB	; 171
    5348:	ff 4f       	sbci	r31, 0xFF	; 255
    534a:	91 83       	std	Z+1, r25	; 0x01
    534c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 0, 1, 1, 1, 0); // C
    534e:	82 e0       	ldi	r24, 0x02	; 2
    5350:	61 e0       	ldi	r22, 0x01	; 1
    5352:	40 e0       	ldi	r20, 0x00	; 0
    5354:	20 e0       	ldi	r18, 0x00	; 0
    5356:	01 e0       	ldi	r16, 0x01	; 1
    5358:	ee 24       	eor	r14, r14
    535a:	e3 94       	inc	r14
    535c:	cc 24       	eor	r12, r12
    535e:	c3 94       	inc	r12
    5360:	aa 24       	eor	r10, r10
    5362:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    5366:	fe 01       	movw	r30, r28
    5368:	ef 5a       	subi	r30, 0xAF	; 175
    536a:	ff 4f       	sbci	r31, 0xFF	; 255
    536c:	80 e0       	ldi	r24, 0x00	; 0
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	a8 e4       	ldi	r26, 0x48	; 72
    5372:	b2 e4       	ldi	r27, 0x42	; 66
    5374:	80 83       	st	Z, r24
    5376:	91 83       	std	Z+1, r25	; 0x01
    5378:	a2 83       	std	Z+2, r26	; 0x02
    537a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    537c:	8e 01       	movw	r16, r28
    537e:	03 5b       	subi	r16, 0xB3	; 179
    5380:	1f 4f       	sbci	r17, 0xFF	; 255
    5382:	fe 01       	movw	r30, r28
    5384:	ef 5a       	subi	r30, 0xAF	; 175
    5386:	ff 4f       	sbci	r31, 0xFF	; 255
    5388:	60 81       	ld	r22, Z
    538a:	71 81       	ldd	r23, Z+1	; 0x01
    538c:	82 81       	ldd	r24, Z+2	; 0x02
    538e:	93 81       	ldd	r25, Z+3	; 0x03
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	4a e7       	ldi	r20, 0x7A	; 122
    5396:	55 e4       	ldi	r21, 0x45	; 69
    5398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    539c:	dc 01       	movw	r26, r24
    539e:	cb 01       	movw	r24, r22
    53a0:	f8 01       	movw	r30, r16
    53a2:	80 83       	st	Z, r24
    53a4:	91 83       	std	Z+1, r25	; 0x01
    53a6:	a2 83       	std	Z+2, r26	; 0x02
    53a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53aa:	fe 01       	movw	r30, r28
    53ac:	e3 5b       	subi	r30, 0xB3	; 179
    53ae:	ff 4f       	sbci	r31, 0xFF	; 255
    53b0:	60 81       	ld	r22, Z
    53b2:	71 81       	ldd	r23, Z+1	; 0x01
    53b4:	82 81       	ldd	r24, Z+2	; 0x02
    53b6:	93 81       	ldd	r25, Z+3	; 0x03
    53b8:	20 e0       	ldi	r18, 0x00	; 0
    53ba:	30 e0       	ldi	r19, 0x00	; 0
    53bc:	40 e8       	ldi	r20, 0x80	; 128
    53be:	5f e3       	ldi	r21, 0x3F	; 63
    53c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53c4:	88 23       	and	r24, r24
    53c6:	44 f4       	brge	.+16     	; 0x53d8 <SevenSegment_FromAToH+0x3aa>
		__ticks = 1;
    53c8:	fe 01       	movw	r30, r28
    53ca:	e5 5b       	subi	r30, 0xB5	; 181
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	81 e0       	ldi	r24, 0x01	; 1
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	91 83       	std	Z+1, r25	; 0x01
    53d4:	80 83       	st	Z, r24
    53d6:	64 c0       	rjmp	.+200    	; 0x54a0 <SevenSegment_FromAToH+0x472>
	else if (__tmp > 65535)
    53d8:	fe 01       	movw	r30, r28
    53da:	e3 5b       	subi	r30, 0xB3	; 179
    53dc:	ff 4f       	sbci	r31, 0xFF	; 255
    53de:	60 81       	ld	r22, Z
    53e0:	71 81       	ldd	r23, Z+1	; 0x01
    53e2:	82 81       	ldd	r24, Z+2	; 0x02
    53e4:	93 81       	ldd	r25, Z+3	; 0x03
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	3f ef       	ldi	r19, 0xFF	; 255
    53ea:	4f e7       	ldi	r20, 0x7F	; 127
    53ec:	57 e4       	ldi	r21, 0x47	; 71
    53ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    53f2:	18 16       	cp	r1, r24
    53f4:	0c f0       	brlt	.+2      	; 0x53f8 <SevenSegment_FromAToH+0x3ca>
    53f6:	43 c0       	rjmp	.+134    	; 0x547e <SevenSegment_FromAToH+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53f8:	fe 01       	movw	r30, r28
    53fa:	ef 5a       	subi	r30, 0xAF	; 175
    53fc:	ff 4f       	sbci	r31, 0xFF	; 255
    53fe:	60 81       	ld	r22, Z
    5400:	71 81       	ldd	r23, Z+1	; 0x01
    5402:	82 81       	ldd	r24, Z+2	; 0x02
    5404:	93 81       	ldd	r25, Z+3	; 0x03
    5406:	20 e0       	ldi	r18, 0x00	; 0
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	40 e2       	ldi	r20, 0x20	; 32
    540c:	51 e4       	ldi	r21, 0x41	; 65
    540e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5412:	dc 01       	movw	r26, r24
    5414:	cb 01       	movw	r24, r22
    5416:	8e 01       	movw	r16, r28
    5418:	05 5b       	subi	r16, 0xB5	; 181
    541a:	1f 4f       	sbci	r17, 0xFF	; 255
    541c:	bc 01       	movw	r22, r24
    541e:	cd 01       	movw	r24, r26
    5420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5424:	dc 01       	movw	r26, r24
    5426:	cb 01       	movw	r24, r22
    5428:	f8 01       	movw	r30, r16
    542a:	91 83       	std	Z+1, r25	; 0x01
    542c:	80 83       	st	Z, r24
    542e:	1f c0       	rjmp	.+62     	; 0x546e <SevenSegment_FromAToH+0x440>
    5430:	fe 01       	movw	r30, r28
    5432:	e7 5b       	subi	r30, 0xB7	; 183
    5434:	ff 4f       	sbci	r31, 0xFF	; 255
    5436:	80 e9       	ldi	r24, 0x90	; 144
    5438:	91 e0       	ldi	r25, 0x01	; 1
    543a:	91 83       	std	Z+1, r25	; 0x01
    543c:	80 83       	st	Z, r24
    543e:	fe 01       	movw	r30, r28
    5440:	e7 5b       	subi	r30, 0xB7	; 183
    5442:	ff 4f       	sbci	r31, 0xFF	; 255
    5444:	80 81       	ld	r24, Z
    5446:	91 81       	ldd	r25, Z+1	; 0x01
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	f1 f7       	brne	.-4      	; 0x5448 <SevenSegment_FromAToH+0x41a>
    544c:	fe 01       	movw	r30, r28
    544e:	e7 5b       	subi	r30, 0xB7	; 183
    5450:	ff 4f       	sbci	r31, 0xFF	; 255
    5452:	91 83       	std	Z+1, r25	; 0x01
    5454:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5456:	de 01       	movw	r26, r28
    5458:	a5 5b       	subi	r26, 0xB5	; 181
    545a:	bf 4f       	sbci	r27, 0xFF	; 255
    545c:	fe 01       	movw	r30, r28
    545e:	e5 5b       	subi	r30, 0xB5	; 181
    5460:	ff 4f       	sbci	r31, 0xFF	; 255
    5462:	80 81       	ld	r24, Z
    5464:	91 81       	ldd	r25, Z+1	; 0x01
    5466:	01 97       	sbiw	r24, 0x01	; 1
    5468:	11 96       	adiw	r26, 0x01	; 1
    546a:	9c 93       	st	X, r25
    546c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    546e:	fe 01       	movw	r30, r28
    5470:	e5 5b       	subi	r30, 0xB5	; 181
    5472:	ff 4f       	sbci	r31, 0xFF	; 255
    5474:	80 81       	ld	r24, Z
    5476:	91 81       	ldd	r25, Z+1	; 0x01
    5478:	00 97       	sbiw	r24, 0x00	; 0
    547a:	d1 f6       	brne	.-76     	; 0x5430 <SevenSegment_FromAToH+0x402>
    547c:	27 c0       	rjmp	.+78     	; 0x54cc <SevenSegment_FromAToH+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    547e:	8e 01       	movw	r16, r28
    5480:	05 5b       	subi	r16, 0xB5	; 181
    5482:	1f 4f       	sbci	r17, 0xFF	; 255
    5484:	fe 01       	movw	r30, r28
    5486:	e3 5b       	subi	r30, 0xB3	; 179
    5488:	ff 4f       	sbci	r31, 0xFF	; 255
    548a:	60 81       	ld	r22, Z
    548c:	71 81       	ldd	r23, Z+1	; 0x01
    548e:	82 81       	ldd	r24, Z+2	; 0x02
    5490:	93 81       	ldd	r25, Z+3	; 0x03
    5492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5496:	dc 01       	movw	r26, r24
    5498:	cb 01       	movw	r24, r22
    549a:	f8 01       	movw	r30, r16
    549c:	91 83       	std	Z+1, r25	; 0x01
    549e:	80 83       	st	Z, r24
    54a0:	de 01       	movw	r26, r28
    54a2:	a9 5b       	subi	r26, 0xB9	; 185
    54a4:	bf 4f       	sbci	r27, 0xFF	; 255
    54a6:	fe 01       	movw	r30, r28
    54a8:	e5 5b       	subi	r30, 0xB5	; 181
    54aa:	ff 4f       	sbci	r31, 0xFF	; 255
    54ac:	80 81       	ld	r24, Z
    54ae:	91 81       	ldd	r25, Z+1	; 0x01
    54b0:	8d 93       	st	X+, r24
    54b2:	9c 93       	st	X, r25
    54b4:	fe 01       	movw	r30, r28
    54b6:	e9 5b       	subi	r30, 0xB9	; 185
    54b8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ba:	80 81       	ld	r24, Z
    54bc:	91 81       	ldd	r25, Z+1	; 0x01
    54be:	01 97       	sbiw	r24, 0x01	; 1
    54c0:	f1 f7       	brne	.-4      	; 0x54be <SevenSegment_FromAToH+0x490>
    54c2:	fe 01       	movw	r30, r28
    54c4:	e9 5b       	subi	r30, 0xB9	; 185
    54c6:	ff 4f       	sbci	r31, 0xFF	; 255
    54c8:	91 83       	std	Z+1, r25	; 0x01
    54ca:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 1, 1, 0, 1); // D
    54cc:	82 e0       	ldi	r24, 0x02	; 2
    54ce:	60 e0       	ldi	r22, 0x00	; 0
    54d0:	41 e0       	ldi	r20, 0x01	; 1
    54d2:	21 e0       	ldi	r18, 0x01	; 1
    54d4:	01 e0       	ldi	r16, 0x01	; 1
    54d6:	ee 24       	eor	r14, r14
    54d8:	e3 94       	inc	r14
    54da:	cc 24       	eor	r12, r12
    54dc:	aa 24       	eor	r10, r10
    54de:	a3 94       	inc	r10
    54e0:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    54e4:	fe 01       	movw	r30, r28
    54e6:	ed 5b       	subi	r30, 0xBD	; 189
    54e8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	a8 e4       	ldi	r26, 0x48	; 72
    54f0:	b2 e4       	ldi	r27, 0x42	; 66
    54f2:	80 83       	st	Z, r24
    54f4:	91 83       	std	Z+1, r25	; 0x01
    54f6:	a2 83       	std	Z+2, r26	; 0x02
    54f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54fa:	8e 01       	movw	r16, r28
    54fc:	01 5c       	subi	r16, 0xC1	; 193
    54fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5500:	fe 01       	movw	r30, r28
    5502:	ed 5b       	subi	r30, 0xBD	; 189
    5504:	ff 4f       	sbci	r31, 0xFF	; 255
    5506:	60 81       	ld	r22, Z
    5508:	71 81       	ldd	r23, Z+1	; 0x01
    550a:	82 81       	ldd	r24, Z+2	; 0x02
    550c:	93 81       	ldd	r25, Z+3	; 0x03
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	30 e0       	ldi	r19, 0x00	; 0
    5512:	4a e7       	ldi	r20, 0x7A	; 122
    5514:	55 e4       	ldi	r21, 0x45	; 69
    5516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    551a:	dc 01       	movw	r26, r24
    551c:	cb 01       	movw	r24, r22
    551e:	f8 01       	movw	r30, r16
    5520:	80 83       	st	Z, r24
    5522:	91 83       	std	Z+1, r25	; 0x01
    5524:	a2 83       	std	Z+2, r26	; 0x02
    5526:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5528:	fe 01       	movw	r30, r28
    552a:	ff 96       	adiw	r30, 0x3f	; 63
    552c:	60 81       	ld	r22, Z
    552e:	71 81       	ldd	r23, Z+1	; 0x01
    5530:	82 81       	ldd	r24, Z+2	; 0x02
    5532:	93 81       	ldd	r25, Z+3	; 0x03
    5534:	20 e0       	ldi	r18, 0x00	; 0
    5536:	30 e0       	ldi	r19, 0x00	; 0
    5538:	40 e8       	ldi	r20, 0x80	; 128
    553a:	5f e3       	ldi	r21, 0x3F	; 63
    553c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5540:	88 23       	and	r24, r24
    5542:	2c f4       	brge	.+10     	; 0x554e <SevenSegment_FromAToH+0x520>
		__ticks = 1;
    5544:	81 e0       	ldi	r24, 0x01	; 1
    5546:	90 e0       	ldi	r25, 0x00	; 0
    5548:	9e af       	std	Y+62, r25	; 0x3e
    554a:	8d af       	std	Y+61, r24	; 0x3d
    554c:	46 c0       	rjmp	.+140    	; 0x55da <SevenSegment_FromAToH+0x5ac>
	else if (__tmp > 65535)
    554e:	fe 01       	movw	r30, r28
    5550:	ff 96       	adiw	r30, 0x3f	; 63
    5552:	60 81       	ld	r22, Z
    5554:	71 81       	ldd	r23, Z+1	; 0x01
    5556:	82 81       	ldd	r24, Z+2	; 0x02
    5558:	93 81       	ldd	r25, Z+3	; 0x03
    555a:	20 e0       	ldi	r18, 0x00	; 0
    555c:	3f ef       	ldi	r19, 0xFF	; 255
    555e:	4f e7       	ldi	r20, 0x7F	; 127
    5560:	57 e4       	ldi	r21, 0x47	; 71
    5562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5566:	18 16       	cp	r1, r24
    5568:	64 f5       	brge	.+88     	; 0x55c2 <SevenSegment_FromAToH+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    556a:	fe 01       	movw	r30, r28
    556c:	ed 5b       	subi	r30, 0xBD	; 189
    556e:	ff 4f       	sbci	r31, 0xFF	; 255
    5570:	60 81       	ld	r22, Z
    5572:	71 81       	ldd	r23, Z+1	; 0x01
    5574:	82 81       	ldd	r24, Z+2	; 0x02
    5576:	93 81       	ldd	r25, Z+3	; 0x03
    5578:	20 e0       	ldi	r18, 0x00	; 0
    557a:	30 e0       	ldi	r19, 0x00	; 0
    557c:	40 e2       	ldi	r20, 0x20	; 32
    557e:	51 e4       	ldi	r21, 0x41	; 65
    5580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5584:	dc 01       	movw	r26, r24
    5586:	cb 01       	movw	r24, r22
    5588:	bc 01       	movw	r22, r24
    558a:	cd 01       	movw	r24, r26
    558c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5590:	dc 01       	movw	r26, r24
    5592:	cb 01       	movw	r24, r22
    5594:	9e af       	std	Y+62, r25	; 0x3e
    5596:	8d af       	std	Y+61, r24	; 0x3d
    5598:	0f c0       	rjmp	.+30     	; 0x55b8 <SevenSegment_FromAToH+0x58a>
    559a:	80 e9       	ldi	r24, 0x90	; 144
    559c:	91 e0       	ldi	r25, 0x01	; 1
    559e:	9c af       	std	Y+60, r25	; 0x3c
    55a0:	8b af       	std	Y+59, r24	; 0x3b
    55a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    55a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    55a6:	01 97       	sbiw	r24, 0x01	; 1
    55a8:	f1 f7       	brne	.-4      	; 0x55a6 <SevenSegment_FromAToH+0x578>
    55aa:	9c af       	std	Y+60, r25	; 0x3c
    55ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    55b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    55b2:	01 97       	sbiw	r24, 0x01	; 1
    55b4:	9e af       	std	Y+62, r25	; 0x3e
    55b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    55ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    55bc:	00 97       	sbiw	r24, 0x00	; 0
    55be:	69 f7       	brne	.-38     	; 0x559a <SevenSegment_FromAToH+0x56c>
    55c0:	16 c0       	rjmp	.+44     	; 0x55ee <SevenSegment_FromAToH+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55c2:	fe 01       	movw	r30, r28
    55c4:	ff 96       	adiw	r30, 0x3f	; 63
    55c6:	60 81       	ld	r22, Z
    55c8:	71 81       	ldd	r23, Z+1	; 0x01
    55ca:	82 81       	ldd	r24, Z+2	; 0x02
    55cc:	93 81       	ldd	r25, Z+3	; 0x03
    55ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d2:	dc 01       	movw	r26, r24
    55d4:	cb 01       	movw	r24, r22
    55d6:	9e af       	std	Y+62, r25	; 0x3e
    55d8:	8d af       	std	Y+61, r24	; 0x3d
    55da:	8d ad       	ldd	r24, Y+61	; 0x3d
    55dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    55de:	9a af       	std	Y+58, r25	; 0x3a
    55e0:	89 af       	std	Y+57, r24	; 0x39
    55e2:	89 ad       	ldd	r24, Y+57	; 0x39
    55e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    55e6:	01 97       	sbiw	r24, 0x01	; 1
    55e8:	f1 f7       	brne	.-4      	; 0x55e6 <SevenSegment_FromAToH+0x5b8>
    55ea:	9a af       	std	Y+58, r25	; 0x3a
    55ec:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 0, 1, 1, 1, 1); // E
    55ee:	82 e0       	ldi	r24, 0x02	; 2
    55f0:	61 e0       	ldi	r22, 0x01	; 1
    55f2:	40 e0       	ldi	r20, 0x00	; 0
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	01 e0       	ldi	r16, 0x01	; 1
    55f8:	ee 24       	eor	r14, r14
    55fa:	e3 94       	inc	r14
    55fc:	cc 24       	eor	r12, r12
    55fe:	c3 94       	inc	r12
    5600:	aa 24       	eor	r10, r10
    5602:	a3 94       	inc	r10
    5604:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    5608:	80 e0       	ldi	r24, 0x00	; 0
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	a8 e4       	ldi	r26, 0x48	; 72
    560e:	b2 e4       	ldi	r27, 0x42	; 66
    5610:	8d ab       	std	Y+53, r24	; 0x35
    5612:	9e ab       	std	Y+54, r25	; 0x36
    5614:	af ab       	std	Y+55, r26	; 0x37
    5616:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5618:	6d a9       	ldd	r22, Y+53	; 0x35
    561a:	7e a9       	ldd	r23, Y+54	; 0x36
    561c:	8f a9       	ldd	r24, Y+55	; 0x37
    561e:	98 ad       	ldd	r25, Y+56	; 0x38
    5620:	20 e0       	ldi	r18, 0x00	; 0
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	4a e7       	ldi	r20, 0x7A	; 122
    5626:	55 e4       	ldi	r21, 0x45	; 69
    5628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    562c:	dc 01       	movw	r26, r24
    562e:	cb 01       	movw	r24, r22
    5630:	89 ab       	std	Y+49, r24	; 0x31
    5632:	9a ab       	std	Y+50, r25	; 0x32
    5634:	ab ab       	std	Y+51, r26	; 0x33
    5636:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5638:	69 a9       	ldd	r22, Y+49	; 0x31
    563a:	7a a9       	ldd	r23, Y+50	; 0x32
    563c:	8b a9       	ldd	r24, Y+51	; 0x33
    563e:	9c a9       	ldd	r25, Y+52	; 0x34
    5640:	20 e0       	ldi	r18, 0x00	; 0
    5642:	30 e0       	ldi	r19, 0x00	; 0
    5644:	40 e8       	ldi	r20, 0x80	; 128
    5646:	5f e3       	ldi	r21, 0x3F	; 63
    5648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    564c:	88 23       	and	r24, r24
    564e:	2c f4       	brge	.+10     	; 0x565a <SevenSegment_FromAToH+0x62c>
		__ticks = 1;
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	98 ab       	std	Y+48, r25	; 0x30
    5656:	8f a7       	std	Y+47, r24	; 0x2f
    5658:	3f c0       	rjmp	.+126    	; 0x56d8 <SevenSegment_FromAToH+0x6aa>
	else if (__tmp > 65535)
    565a:	69 a9       	ldd	r22, Y+49	; 0x31
    565c:	7a a9       	ldd	r23, Y+50	; 0x32
    565e:	8b a9       	ldd	r24, Y+51	; 0x33
    5660:	9c a9       	ldd	r25, Y+52	; 0x34
    5662:	20 e0       	ldi	r18, 0x00	; 0
    5664:	3f ef       	ldi	r19, 0xFF	; 255
    5666:	4f e7       	ldi	r20, 0x7F	; 127
    5668:	57 e4       	ldi	r21, 0x47	; 71
    566a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    566e:	18 16       	cp	r1, r24
    5670:	4c f5       	brge	.+82     	; 0x56c4 <SevenSegment_FromAToH+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5672:	6d a9       	ldd	r22, Y+53	; 0x35
    5674:	7e a9       	ldd	r23, Y+54	; 0x36
    5676:	8f a9       	ldd	r24, Y+55	; 0x37
    5678:	98 ad       	ldd	r25, Y+56	; 0x38
    567a:	20 e0       	ldi	r18, 0x00	; 0
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	40 e2       	ldi	r20, 0x20	; 32
    5680:	51 e4       	ldi	r21, 0x41	; 65
    5682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5686:	dc 01       	movw	r26, r24
    5688:	cb 01       	movw	r24, r22
    568a:	bc 01       	movw	r22, r24
    568c:	cd 01       	movw	r24, r26
    568e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	98 ab       	std	Y+48, r25	; 0x30
    5698:	8f a7       	std	Y+47, r24	; 0x2f
    569a:	0f c0       	rjmp	.+30     	; 0x56ba <SevenSegment_FromAToH+0x68c>
    569c:	80 e9       	ldi	r24, 0x90	; 144
    569e:	91 e0       	ldi	r25, 0x01	; 1
    56a0:	9e a7       	std	Y+46, r25	; 0x2e
    56a2:	8d a7       	std	Y+45, r24	; 0x2d
    56a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    56a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    56a8:	01 97       	sbiw	r24, 0x01	; 1
    56aa:	f1 f7       	brne	.-4      	; 0x56a8 <SevenSegment_FromAToH+0x67a>
    56ac:	9e a7       	std	Y+46, r25	; 0x2e
    56ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    56b2:	98 a9       	ldd	r25, Y+48	; 0x30
    56b4:	01 97       	sbiw	r24, 0x01	; 1
    56b6:	98 ab       	std	Y+48, r25	; 0x30
    56b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    56bc:	98 a9       	ldd	r25, Y+48	; 0x30
    56be:	00 97       	sbiw	r24, 0x00	; 0
    56c0:	69 f7       	brne	.-38     	; 0x569c <SevenSegment_FromAToH+0x66e>
    56c2:	14 c0       	rjmp	.+40     	; 0x56ec <SevenSegment_FromAToH+0x6be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c4:	69 a9       	ldd	r22, Y+49	; 0x31
    56c6:	7a a9       	ldd	r23, Y+50	; 0x32
    56c8:	8b a9       	ldd	r24, Y+51	; 0x33
    56ca:	9c a9       	ldd	r25, Y+52	; 0x34
    56cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d0:	dc 01       	movw	r26, r24
    56d2:	cb 01       	movw	r24, r22
    56d4:	98 ab       	std	Y+48, r25	; 0x30
    56d6:	8f a7       	std	Y+47, r24	; 0x2f
    56d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    56da:	98 a9       	ldd	r25, Y+48	; 0x30
    56dc:	9c a7       	std	Y+44, r25	; 0x2c
    56de:	8b a7       	std	Y+43, r24	; 0x2b
    56e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    56e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    56e4:	01 97       	sbiw	r24, 0x01	; 1
    56e6:	f1 f7       	brne	.-4      	; 0x56e4 <SevenSegment_FromAToH+0x6b6>
    56e8:	9c a7       	std	Y+44, r25	; 0x2c
    56ea:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 0, 0, 1, 1, 1); // F
    56ec:	82 e0       	ldi	r24, 0x02	; 2
    56ee:	61 e0       	ldi	r22, 0x01	; 1
    56f0:	40 e0       	ldi	r20, 0x00	; 0
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	00 e0       	ldi	r16, 0x00	; 0
    56f6:	ee 24       	eor	r14, r14
    56f8:	e3 94       	inc	r14
    56fa:	cc 24       	eor	r12, r12
    56fc:	c3 94       	inc	r12
    56fe:	aa 24       	eor	r10, r10
    5700:	a3 94       	inc	r10
    5702:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	a8 e4       	ldi	r26, 0x48	; 72
    570c:	b2 e4       	ldi	r27, 0x42	; 66
    570e:	8f a3       	std	Y+39, r24	; 0x27
    5710:	98 a7       	std	Y+40, r25	; 0x28
    5712:	a9 a7       	std	Y+41, r26	; 0x29
    5714:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5716:	6f a1       	ldd	r22, Y+39	; 0x27
    5718:	78 a5       	ldd	r23, Y+40	; 0x28
    571a:	89 a5       	ldd	r24, Y+41	; 0x29
    571c:	9a a5       	ldd	r25, Y+42	; 0x2a
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	30 e0       	ldi	r19, 0x00	; 0
    5722:	4a e7       	ldi	r20, 0x7A	; 122
    5724:	55 e4       	ldi	r21, 0x45	; 69
    5726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572a:	dc 01       	movw	r26, r24
    572c:	cb 01       	movw	r24, r22
    572e:	8b a3       	std	Y+35, r24	; 0x23
    5730:	9c a3       	std	Y+36, r25	; 0x24
    5732:	ad a3       	std	Y+37, r26	; 0x25
    5734:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5736:	6b a1       	ldd	r22, Y+35	; 0x23
    5738:	7c a1       	ldd	r23, Y+36	; 0x24
    573a:	8d a1       	ldd	r24, Y+37	; 0x25
    573c:	9e a1       	ldd	r25, Y+38	; 0x26
    573e:	20 e0       	ldi	r18, 0x00	; 0
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	40 e8       	ldi	r20, 0x80	; 128
    5744:	5f e3       	ldi	r21, 0x3F	; 63
    5746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    574a:	88 23       	and	r24, r24
    574c:	2c f4       	brge	.+10     	; 0x5758 <SevenSegment_FromAToH+0x72a>
		__ticks = 1;
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	9a a3       	std	Y+34, r25	; 0x22
    5754:	89 a3       	std	Y+33, r24	; 0x21
    5756:	3f c0       	rjmp	.+126    	; 0x57d6 <SevenSegment_FromAToH+0x7a8>
	else if (__tmp > 65535)
    5758:	6b a1       	ldd	r22, Y+35	; 0x23
    575a:	7c a1       	ldd	r23, Y+36	; 0x24
    575c:	8d a1       	ldd	r24, Y+37	; 0x25
    575e:	9e a1       	ldd	r25, Y+38	; 0x26
    5760:	20 e0       	ldi	r18, 0x00	; 0
    5762:	3f ef       	ldi	r19, 0xFF	; 255
    5764:	4f e7       	ldi	r20, 0x7F	; 127
    5766:	57 e4       	ldi	r21, 0x47	; 71
    5768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    576c:	18 16       	cp	r1, r24
    576e:	4c f5       	brge	.+82     	; 0x57c2 <SevenSegment_FromAToH+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5770:	6f a1       	ldd	r22, Y+39	; 0x27
    5772:	78 a5       	ldd	r23, Y+40	; 0x28
    5774:	89 a5       	ldd	r24, Y+41	; 0x29
    5776:	9a a5       	ldd	r25, Y+42	; 0x2a
    5778:	20 e0       	ldi	r18, 0x00	; 0
    577a:	30 e0       	ldi	r19, 0x00	; 0
    577c:	40 e2       	ldi	r20, 0x20	; 32
    577e:	51 e4       	ldi	r21, 0x41	; 65
    5780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5784:	dc 01       	movw	r26, r24
    5786:	cb 01       	movw	r24, r22
    5788:	bc 01       	movw	r22, r24
    578a:	cd 01       	movw	r24, r26
    578c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5790:	dc 01       	movw	r26, r24
    5792:	cb 01       	movw	r24, r22
    5794:	9a a3       	std	Y+34, r25	; 0x22
    5796:	89 a3       	std	Y+33, r24	; 0x21
    5798:	0f c0       	rjmp	.+30     	; 0x57b8 <SevenSegment_FromAToH+0x78a>
    579a:	80 e9       	ldi	r24, 0x90	; 144
    579c:	91 e0       	ldi	r25, 0x01	; 1
    579e:	98 a3       	std	Y+32, r25	; 0x20
    57a0:	8f 8f       	std	Y+31, r24	; 0x1f
    57a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    57a4:	98 a1       	ldd	r25, Y+32	; 0x20
    57a6:	01 97       	sbiw	r24, 0x01	; 1
    57a8:	f1 f7       	brne	.-4      	; 0x57a6 <SevenSegment_FromAToH+0x778>
    57aa:	98 a3       	std	Y+32, r25	; 0x20
    57ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57ae:	89 a1       	ldd	r24, Y+33	; 0x21
    57b0:	9a a1       	ldd	r25, Y+34	; 0x22
    57b2:	01 97       	sbiw	r24, 0x01	; 1
    57b4:	9a a3       	std	Y+34, r25	; 0x22
    57b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57b8:	89 a1       	ldd	r24, Y+33	; 0x21
    57ba:	9a a1       	ldd	r25, Y+34	; 0x22
    57bc:	00 97       	sbiw	r24, 0x00	; 0
    57be:	69 f7       	brne	.-38     	; 0x579a <SevenSegment_FromAToH+0x76c>
    57c0:	14 c0       	rjmp	.+40     	; 0x57ea <SevenSegment_FromAToH+0x7bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57c2:	6b a1       	ldd	r22, Y+35	; 0x23
    57c4:	7c a1       	ldd	r23, Y+36	; 0x24
    57c6:	8d a1       	ldd	r24, Y+37	; 0x25
    57c8:	9e a1       	ldd	r25, Y+38	; 0x26
    57ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ce:	dc 01       	movw	r26, r24
    57d0:	cb 01       	movw	r24, r22
    57d2:	9a a3       	std	Y+34, r25	; 0x22
    57d4:	89 a3       	std	Y+33, r24	; 0x21
    57d6:	89 a1       	ldd	r24, Y+33	; 0x21
    57d8:	9a a1       	ldd	r25, Y+34	; 0x22
    57da:	9e 8f       	std	Y+30, r25	; 0x1e
    57dc:	8d 8f       	std	Y+29, r24	; 0x1d
    57de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57e2:	01 97       	sbiw	r24, 0x01	; 1
    57e4:	f1 f7       	brne	.-4      	; 0x57e2 <SevenSegment_FromAToH+0x7b4>
    57e6:	9e 8f       	std	Y+30, r25	; 0x1e
    57e8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(2, 1, 0, 1, 1, 1, 1, 0); // G
    57ea:	82 e0       	ldi	r24, 0x02	; 2
    57ec:	61 e0       	ldi	r22, 0x01	; 1
    57ee:	40 e0       	ldi	r20, 0x00	; 0
    57f0:	21 e0       	ldi	r18, 0x01	; 1
    57f2:	01 e0       	ldi	r16, 0x01	; 1
    57f4:	ee 24       	eor	r14, r14
    57f6:	e3 94       	inc	r14
    57f8:	cc 24       	eor	r12, r12
    57fa:	c3 94       	inc	r12
    57fc:	aa 24       	eor	r10, r10
    57fe:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	a8 e4       	ldi	r26, 0x48	; 72
    5808:	b2 e4       	ldi	r27, 0x42	; 66
    580a:	89 8f       	std	Y+25, r24	; 0x19
    580c:	9a 8f       	std	Y+26, r25	; 0x1a
    580e:	ab 8f       	std	Y+27, r26	; 0x1b
    5810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5812:	69 8d       	ldd	r22, Y+25	; 0x19
    5814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	4a e7       	ldi	r20, 0x7A	; 122
    5820:	55 e4       	ldi	r21, 0x45	; 69
    5822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5826:	dc 01       	movw	r26, r24
    5828:	cb 01       	movw	r24, r22
    582a:	8d 8b       	std	Y+21, r24	; 0x15
    582c:	9e 8b       	std	Y+22, r25	; 0x16
    582e:	af 8b       	std	Y+23, r26	; 0x17
    5830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5832:	6d 89       	ldd	r22, Y+21	; 0x15
    5834:	7e 89       	ldd	r23, Y+22	; 0x16
    5836:	8f 89       	ldd	r24, Y+23	; 0x17
    5838:	98 8d       	ldd	r25, Y+24	; 0x18
    583a:	20 e0       	ldi	r18, 0x00	; 0
    583c:	30 e0       	ldi	r19, 0x00	; 0
    583e:	40 e8       	ldi	r20, 0x80	; 128
    5840:	5f e3       	ldi	r21, 0x3F	; 63
    5842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5846:	88 23       	and	r24, r24
    5848:	2c f4       	brge	.+10     	; 0x5854 <SevenSegment_FromAToH+0x826>
		__ticks = 1;
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	9c 8b       	std	Y+20, r25	; 0x14
    5850:	8b 8b       	std	Y+19, r24	; 0x13
    5852:	3f c0       	rjmp	.+126    	; 0x58d2 <SevenSegment_FromAToH+0x8a4>
	else if (__tmp > 65535)
    5854:	6d 89       	ldd	r22, Y+21	; 0x15
    5856:	7e 89       	ldd	r23, Y+22	; 0x16
    5858:	8f 89       	ldd	r24, Y+23	; 0x17
    585a:	98 8d       	ldd	r25, Y+24	; 0x18
    585c:	20 e0       	ldi	r18, 0x00	; 0
    585e:	3f ef       	ldi	r19, 0xFF	; 255
    5860:	4f e7       	ldi	r20, 0x7F	; 127
    5862:	57 e4       	ldi	r21, 0x47	; 71
    5864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5868:	18 16       	cp	r1, r24
    586a:	4c f5       	brge	.+82     	; 0x58be <SevenSegment_FromAToH+0x890>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    586c:	69 8d       	ldd	r22, Y+25	; 0x19
    586e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5874:	20 e0       	ldi	r18, 0x00	; 0
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	40 e2       	ldi	r20, 0x20	; 32
    587a:	51 e4       	ldi	r21, 0x41	; 65
    587c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5880:	dc 01       	movw	r26, r24
    5882:	cb 01       	movw	r24, r22
    5884:	bc 01       	movw	r22, r24
    5886:	cd 01       	movw	r24, r26
    5888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588c:	dc 01       	movw	r26, r24
    588e:	cb 01       	movw	r24, r22
    5890:	9c 8b       	std	Y+20, r25	; 0x14
    5892:	8b 8b       	std	Y+19, r24	; 0x13
    5894:	0f c0       	rjmp	.+30     	; 0x58b4 <SevenSegment_FromAToH+0x886>
    5896:	80 e9       	ldi	r24, 0x90	; 144
    5898:	91 e0       	ldi	r25, 0x01	; 1
    589a:	9a 8b       	std	Y+18, r25	; 0x12
    589c:	89 8b       	std	Y+17, r24	; 0x11
    589e:	89 89       	ldd	r24, Y+17	; 0x11
    58a0:	9a 89       	ldd	r25, Y+18	; 0x12
    58a2:	01 97       	sbiw	r24, 0x01	; 1
    58a4:	f1 f7       	brne	.-4      	; 0x58a2 <SevenSegment_FromAToH+0x874>
    58a6:	9a 8b       	std	Y+18, r25	; 0x12
    58a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58aa:	8b 89       	ldd	r24, Y+19	; 0x13
    58ac:	9c 89       	ldd	r25, Y+20	; 0x14
    58ae:	01 97       	sbiw	r24, 0x01	; 1
    58b0:	9c 8b       	std	Y+20, r25	; 0x14
    58b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58b4:	8b 89       	ldd	r24, Y+19	; 0x13
    58b6:	9c 89       	ldd	r25, Y+20	; 0x14
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	69 f7       	brne	.-38     	; 0x5896 <SevenSegment_FromAToH+0x868>
    58bc:	14 c0       	rjmp	.+40     	; 0x58e6 <SevenSegment_FromAToH+0x8b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58be:	6d 89       	ldd	r22, Y+21	; 0x15
    58c0:	7e 89       	ldd	r23, Y+22	; 0x16
    58c2:	8f 89       	ldd	r24, Y+23	; 0x17
    58c4:	98 8d       	ldd	r25, Y+24	; 0x18
    58c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ca:	dc 01       	movw	r26, r24
    58cc:	cb 01       	movw	r24, r22
    58ce:	9c 8b       	std	Y+20, r25	; 0x14
    58d0:	8b 8b       	std	Y+19, r24	; 0x13
    58d2:	8b 89       	ldd	r24, Y+19	; 0x13
    58d4:	9c 89       	ldd	r25, Y+20	; 0x14
    58d6:	98 8b       	std	Y+16, r25	; 0x10
    58d8:	8f 87       	std	Y+15, r24	; 0x0f
    58da:	8f 85       	ldd	r24, Y+15	; 0x0f
    58dc:	98 89       	ldd	r25, Y+16	; 0x10
    58de:	01 97       	sbiw	r24, 0x01	; 1
    58e0:	f1 f7       	brne	.-4      	; 0x58de <SevenSegment_FromAToH+0x8b0>
    58e2:	98 8b       	std	Y+16, r25	; 0x10
    58e4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(2, 0, 1, 1, 0, 1, 1, 1); // H
    58e6:	82 e0       	ldi	r24, 0x02	; 2
    58e8:	60 e0       	ldi	r22, 0x00	; 0
    58ea:	41 e0       	ldi	r20, 0x01	; 1
    58ec:	21 e0       	ldi	r18, 0x01	; 1
    58ee:	00 e0       	ldi	r16, 0x00	; 0
    58f0:	ee 24       	eor	r14, r14
    58f2:	e3 94       	inc	r14
    58f4:	cc 24       	eor	r12, r12
    58f6:	c3 94       	inc	r12
    58f8:	aa 24       	eor	r10, r10
    58fa:	a3 94       	inc	r10
    58fc:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SevenSegment_Display>
    5900:	80 e0       	ldi	r24, 0x00	; 0
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	a8 e4       	ldi	r26, 0x48	; 72
    5906:	b2 e4       	ldi	r27, 0x42	; 66
    5908:	8b 87       	std	Y+11, r24	; 0x0b
    590a:	9c 87       	std	Y+12, r25	; 0x0c
    590c:	ad 87       	std	Y+13, r26	; 0x0d
    590e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5910:	6b 85       	ldd	r22, Y+11	; 0x0b
    5912:	7c 85       	ldd	r23, Y+12	; 0x0c
    5914:	8d 85       	ldd	r24, Y+13	; 0x0d
    5916:	9e 85       	ldd	r25, Y+14	; 0x0e
    5918:	20 e0       	ldi	r18, 0x00	; 0
    591a:	30 e0       	ldi	r19, 0x00	; 0
    591c:	4a e7       	ldi	r20, 0x7A	; 122
    591e:	55 e4       	ldi	r21, 0x45	; 69
    5920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5924:	dc 01       	movw	r26, r24
    5926:	cb 01       	movw	r24, r22
    5928:	8f 83       	std	Y+7, r24	; 0x07
    592a:	98 87       	std	Y+8, r25	; 0x08
    592c:	a9 87       	std	Y+9, r26	; 0x09
    592e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5930:	6f 81       	ldd	r22, Y+7	; 0x07
    5932:	78 85       	ldd	r23, Y+8	; 0x08
    5934:	89 85       	ldd	r24, Y+9	; 0x09
    5936:	9a 85       	ldd	r25, Y+10	; 0x0a
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	30 e0       	ldi	r19, 0x00	; 0
    593c:	40 e8       	ldi	r20, 0x80	; 128
    593e:	5f e3       	ldi	r21, 0x3F	; 63
    5940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5944:	88 23       	and	r24, r24
    5946:	2c f4       	brge	.+10     	; 0x5952 <SevenSegment_FromAToH+0x924>
		__ticks = 1;
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	9e 83       	std	Y+6, r25	; 0x06
    594e:	8d 83       	std	Y+5, r24	; 0x05
    5950:	3f c0       	rjmp	.+126    	; 0x59d0 <SevenSegment_FromAToH+0x9a2>
	else if (__tmp > 65535)
    5952:	6f 81       	ldd	r22, Y+7	; 0x07
    5954:	78 85       	ldd	r23, Y+8	; 0x08
    5956:	89 85       	ldd	r24, Y+9	; 0x09
    5958:	9a 85       	ldd	r25, Y+10	; 0x0a
    595a:	20 e0       	ldi	r18, 0x00	; 0
    595c:	3f ef       	ldi	r19, 0xFF	; 255
    595e:	4f e7       	ldi	r20, 0x7F	; 127
    5960:	57 e4       	ldi	r21, 0x47	; 71
    5962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5966:	18 16       	cp	r1, r24
    5968:	4c f5       	brge	.+82     	; 0x59bc <SevenSegment_FromAToH+0x98e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    596a:	6b 85       	ldd	r22, Y+11	; 0x0b
    596c:	7c 85       	ldd	r23, Y+12	; 0x0c
    596e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5970:	9e 85       	ldd	r25, Y+14	; 0x0e
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	30 e0       	ldi	r19, 0x00	; 0
    5976:	40 e2       	ldi	r20, 0x20	; 32
    5978:	51 e4       	ldi	r21, 0x41	; 65
    597a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    597e:	dc 01       	movw	r26, r24
    5980:	cb 01       	movw	r24, r22
    5982:	bc 01       	movw	r22, r24
    5984:	cd 01       	movw	r24, r26
    5986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    598a:	dc 01       	movw	r26, r24
    598c:	cb 01       	movw	r24, r22
    598e:	9e 83       	std	Y+6, r25	; 0x06
    5990:	8d 83       	std	Y+5, r24	; 0x05
    5992:	0f c0       	rjmp	.+30     	; 0x59b2 <SevenSegment_FromAToH+0x984>
    5994:	80 e9       	ldi	r24, 0x90	; 144
    5996:	91 e0       	ldi	r25, 0x01	; 1
    5998:	9c 83       	std	Y+4, r25	; 0x04
    599a:	8b 83       	std	Y+3, r24	; 0x03
    599c:	8b 81       	ldd	r24, Y+3	; 0x03
    599e:	9c 81       	ldd	r25, Y+4	; 0x04
    59a0:	01 97       	sbiw	r24, 0x01	; 1
    59a2:	f1 f7       	brne	.-4      	; 0x59a0 <SevenSegment_FromAToH+0x972>
    59a4:	9c 83       	std	Y+4, r25	; 0x04
    59a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59a8:	8d 81       	ldd	r24, Y+5	; 0x05
    59aa:	9e 81       	ldd	r25, Y+6	; 0x06
    59ac:	01 97       	sbiw	r24, 0x01	; 1
    59ae:	9e 83       	std	Y+6, r25	; 0x06
    59b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59b2:	8d 81       	ldd	r24, Y+5	; 0x05
    59b4:	9e 81       	ldd	r25, Y+6	; 0x06
    59b6:	00 97       	sbiw	r24, 0x00	; 0
    59b8:	69 f7       	brne	.-38     	; 0x5994 <SevenSegment_FromAToH+0x966>
    59ba:	49 cb       	rjmp	.-2414   	; 0x504e <SevenSegment_FromAToH+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59bc:	6f 81       	ldd	r22, Y+7	; 0x07
    59be:	78 85       	ldd	r23, Y+8	; 0x08
    59c0:	89 85       	ldd	r24, Y+9	; 0x09
    59c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c8:	dc 01       	movw	r26, r24
    59ca:	cb 01       	movw	r24, r22
    59cc:	9e 83       	std	Y+6, r25	; 0x06
    59ce:	8d 83       	std	Y+5, r24	; 0x05
    59d0:	8d 81       	ldd	r24, Y+5	; 0x05
    59d2:	9e 81       	ldd	r25, Y+6	; 0x06
    59d4:	9a 83       	std	Y+2, r25	; 0x02
    59d6:	89 83       	std	Y+1, r24	; 0x01
    59d8:	89 81       	ldd	r24, Y+1	; 0x01
    59da:	9a 81       	ldd	r25, Y+2	; 0x02
    59dc:	01 97       	sbiw	r24, 0x01	; 1
    59de:	f1 f7       	brne	.-4      	; 0x59dc <SevenSegment_FromAToH+0x9ae>
    59e0:	9a 83       	std	Y+2, r25	; 0x02
    59e2:	89 83       	std	Y+1, r24	; 0x01
    59e4:	34 cb       	rjmp	.-2456   	; 0x504e <SevenSegment_FromAToH+0x20>

000059e6 <main>:
#include "APP_Includes.h"

int main(){
    59e6:	df 93       	push	r29
    59e8:	cf 93       	push	r28
    59ea:	cd b7       	in	r28, 0x3d	; 61
    59ec:	de b7       	in	r29, 0x3e	; 62
    59ee:	ad 97       	sbiw	r28, 0x2d	; 45
    59f0:	0f b6       	in	r0, 0x3f	; 63
    59f2:	f8 94       	cli
    59f4:	de bf       	out	0x3e, r29	; 62
    59f6:	0f be       	out	0x3f, r0	; 63
    59f8:	cd bf       	out	0x3d, r28	; 61
	u8 green = 9, yellow = 8, red = 5;
    59fa:	89 e0       	ldi	r24, 0x09	; 9
    59fc:	8d a7       	std	Y+45, r24	; 0x2d
    59fe:	88 e0       	ldi	r24, 0x08	; 8
    5a00:	8c a7       	std	Y+44, r24	; 0x2c
    5a02:	85 e0       	ldi	r24, 0x05	; 5
    5a04:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_voidInit();
    5a06:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <DIO_voidInit>
	LCD_init();
    5a0a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_init>
	
	LCD_displayString("Remaining");
    5a0e:	84 e6       	ldi	r24, 0x64	; 100
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_displayString>
	LCD_GoToXY(0, 13);
    5a16:	80 e0       	ldi	r24, 0x00	; 0
    5a18:	6d e0       	ldi	r22, 0x0D	; 13
    5a1a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_GoToXY>
	LCD_displayString("Sec");
    5a1e:	8e e6       	ldi	r24, 0x6E	; 110
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_displayString>
	while(1){
		if(green > 0){
    5a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a28:	88 23       	and	r24, r24
    5a2a:	09 f4       	brne	.+2      	; 0x5a2e <main+0x48>
    5a2c:	88 c0       	rjmp	.+272    	; 0x5b3e <main+0x158>
			LCD_GoToXY(0, 10);
    5a2e:	80 e0       	ldi	r24, 0x00	; 0
    5a30:	6a e0       	ldi	r22, 0x0A	; 10
    5a32:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_GoToXY>
			DIO_u8SetPinValue(0, 0, 1);
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	60 e0       	ldi	r22, 0x00	; 0
    5a3a:	41 e0       	ldi	r20, 0x01	; 1
    5a3c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
			LCD_display_WriteNumber(green--);
    5a40:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a42:	88 2f       	mov	r24, r24
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	a0 e0       	ldi	r26, 0x00	; 0
    5a48:	b0 e0       	ldi	r27, 0x00	; 0
    5a4a:	2d a5       	ldd	r18, Y+45	; 0x2d
    5a4c:	21 50       	subi	r18, 0x01	; 1
    5a4e:	2d a7       	std	Y+45, r18	; 0x2d
    5a50:	bc 01       	movw	r22, r24
    5a52:	cd 01       	movw	r24, r26
    5a54:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_display_WriteNumber>
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	90 e0       	ldi	r25, 0x00	; 0
    5a5c:	a0 e2       	ldi	r26, 0x20	; 32
    5a5e:	b2 e4       	ldi	r27, 0x42	; 66
    5a60:	8f a3       	std	Y+39, r24	; 0x27
    5a62:	98 a7       	std	Y+40, r25	; 0x28
    5a64:	a9 a7       	std	Y+41, r26	; 0x29
    5a66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a68:	6f a1       	ldd	r22, Y+39	; 0x27
    5a6a:	78 a5       	ldd	r23, Y+40	; 0x28
    5a6c:	89 a5       	ldd	r24, Y+41	; 0x29
    5a6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a70:	20 e0       	ldi	r18, 0x00	; 0
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	4a e7       	ldi	r20, 0x7A	; 122
    5a76:	55 e4       	ldi	r21, 0x45	; 69
    5a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	cb 01       	movw	r24, r22
    5a80:	8b a3       	std	Y+35, r24	; 0x23
    5a82:	9c a3       	std	Y+36, r25	; 0x24
    5a84:	ad a3       	std	Y+37, r26	; 0x25
    5a86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a88:	6b a1       	ldd	r22, Y+35	; 0x23
    5a8a:	7c a1       	ldd	r23, Y+36	; 0x24
    5a8c:	8d a1       	ldd	r24, Y+37	; 0x25
    5a8e:	9e a1       	ldd	r25, Y+38	; 0x26
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
    5a94:	40 e8       	ldi	r20, 0x80	; 128
    5a96:	5f e3       	ldi	r21, 0x3F	; 63
    5a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a9c:	88 23       	and	r24, r24
    5a9e:	2c f4       	brge	.+10     	; 0x5aaa <main+0xc4>
		__ticks = 1;
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	9a a3       	std	Y+34, r25	; 0x22
    5aa6:	89 a3       	std	Y+33, r24	; 0x21
    5aa8:	3f c0       	rjmp	.+126    	; 0x5b28 <main+0x142>
	else if (__tmp > 65535)
    5aaa:	6b a1       	ldd	r22, Y+35	; 0x23
    5aac:	7c a1       	ldd	r23, Y+36	; 0x24
    5aae:	8d a1       	ldd	r24, Y+37	; 0x25
    5ab0:	9e a1       	ldd	r25, Y+38	; 0x26
    5ab2:	20 e0       	ldi	r18, 0x00	; 0
    5ab4:	3f ef       	ldi	r19, 0xFF	; 255
    5ab6:	4f e7       	ldi	r20, 0x7F	; 127
    5ab8:	57 e4       	ldi	r21, 0x47	; 71
    5aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5abe:	18 16       	cp	r1, r24
    5ac0:	4c f5       	brge	.+82     	; 0x5b14 <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ac2:	6f a1       	ldd	r22, Y+39	; 0x27
    5ac4:	78 a5       	ldd	r23, Y+40	; 0x28
    5ac6:	89 a5       	ldd	r24, Y+41	; 0x29
    5ac8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5aca:	20 e0       	ldi	r18, 0x00	; 0
    5acc:	30 e0       	ldi	r19, 0x00	; 0
    5ace:	40 e2       	ldi	r20, 0x20	; 32
    5ad0:	51 e4       	ldi	r21, 0x41	; 65
    5ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ad6:	dc 01       	movw	r26, r24
    5ad8:	cb 01       	movw	r24, r22
    5ada:	bc 01       	movw	r22, r24
    5adc:	cd 01       	movw	r24, r26
    5ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ae2:	dc 01       	movw	r26, r24
    5ae4:	cb 01       	movw	r24, r22
    5ae6:	9a a3       	std	Y+34, r25	; 0x22
    5ae8:	89 a3       	std	Y+33, r24	; 0x21
    5aea:	0f c0       	rjmp	.+30     	; 0x5b0a <main+0x124>
    5aec:	80 e9       	ldi	r24, 0x90	; 144
    5aee:	91 e0       	ldi	r25, 0x01	; 1
    5af0:	98 a3       	std	Y+32, r25	; 0x20
    5af2:	8f 8f       	std	Y+31, r24	; 0x1f
    5af4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5af6:	98 a1       	ldd	r25, Y+32	; 0x20
    5af8:	01 97       	sbiw	r24, 0x01	; 1
    5afa:	f1 f7       	brne	.-4      	; 0x5af8 <main+0x112>
    5afc:	98 a3       	std	Y+32, r25	; 0x20
    5afe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b00:	89 a1       	ldd	r24, Y+33	; 0x21
    5b02:	9a a1       	ldd	r25, Y+34	; 0x22
    5b04:	01 97       	sbiw	r24, 0x01	; 1
    5b06:	9a a3       	std	Y+34, r25	; 0x22
    5b08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b0a:	89 a1       	ldd	r24, Y+33	; 0x21
    5b0c:	9a a1       	ldd	r25, Y+34	; 0x22
    5b0e:	00 97       	sbiw	r24, 0x00	; 0
    5b10:	69 f7       	brne	.-38     	; 0x5aec <main+0x106>
    5b12:	3c c1       	rjmp	.+632    	; 0x5d8c <main+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b14:	6b a1       	ldd	r22, Y+35	; 0x23
    5b16:	7c a1       	ldd	r23, Y+36	; 0x24
    5b18:	8d a1       	ldd	r24, Y+37	; 0x25
    5b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    5b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b20:	dc 01       	movw	r26, r24
    5b22:	cb 01       	movw	r24, r22
    5b24:	9a a3       	std	Y+34, r25	; 0x22
    5b26:	89 a3       	std	Y+33, r24	; 0x21
    5b28:	89 a1       	ldd	r24, Y+33	; 0x21
    5b2a:	9a a1       	ldd	r25, Y+34	; 0x22
    5b2c:	9e 8f       	std	Y+30, r25	; 0x1e
    5b2e:	8d 8f       	std	Y+29, r24	; 0x1d
    5b30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b34:	01 97       	sbiw	r24, 0x01	; 1
    5b36:	f1 f7       	brne	.-4      	; 0x5b34 <main+0x14e>
    5b38:	9e 8f       	std	Y+30, r25	; 0x1e
    5b3a:	8d 8f       	std	Y+29, r24	; 0x1d
    5b3c:	27 c1       	rjmp	.+590    	; 0x5d8c <main+0x3a6>
			_delay_ms(40);
		}
		else{
			DIO_u8SetPinValue(0, 0, 0);
    5b3e:	80 e0       	ldi	r24, 0x00	; 0
    5b40:	60 e0       	ldi	r22, 0x00	; 0
    5b42:	40 e0       	ldi	r20, 0x00	; 0
    5b44:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
			
			if(yellow > 0){
    5b48:	8c a5       	ldd	r24, Y+44	; 0x2c
    5b4a:	88 23       	and	r24, r24
    5b4c:	09 f4       	brne	.+2      	; 0x5b50 <main+0x16a>
    5b4e:	88 c0       	rjmp	.+272    	; 0x5c60 <main+0x27a>
				LCD_GoToXY(0, 10);
    5b50:	80 e0       	ldi	r24, 0x00	; 0
    5b52:	6a e0       	ldi	r22, 0x0A	; 10
    5b54:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_GoToXY>
				DIO_u8SetPinValue(0, 1, 1);
    5b58:	80 e0       	ldi	r24, 0x00	; 0
    5b5a:	61 e0       	ldi	r22, 0x01	; 1
    5b5c:	41 e0       	ldi	r20, 0x01	; 1
    5b5e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
				LCD_display_WriteNumber(yellow--);
    5b62:	8c a5       	ldd	r24, Y+44	; 0x2c
    5b64:	88 2f       	mov	r24, r24
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	a0 e0       	ldi	r26, 0x00	; 0
    5b6a:	b0 e0       	ldi	r27, 0x00	; 0
    5b6c:	2c a5       	ldd	r18, Y+44	; 0x2c
    5b6e:	21 50       	subi	r18, 0x01	; 1
    5b70:	2c a7       	std	Y+44, r18	; 0x2c
    5b72:	bc 01       	movw	r22, r24
    5b74:	cd 01       	movw	r24, r26
    5b76:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_display_WriteNumber>
    5b7a:	80 e0       	ldi	r24, 0x00	; 0
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	a0 e2       	ldi	r26, 0x20	; 32
    5b80:	b2 e4       	ldi	r27, 0x42	; 66
    5b82:	89 8f       	std	Y+25, r24	; 0x19
    5b84:	9a 8f       	std	Y+26, r25	; 0x1a
    5b86:	ab 8f       	std	Y+27, r26	; 0x1b
    5b88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b8a:	69 8d       	ldd	r22, Y+25	; 0x19
    5b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b92:	20 e0       	ldi	r18, 0x00	; 0
    5b94:	30 e0       	ldi	r19, 0x00	; 0
    5b96:	4a e7       	ldi	r20, 0x7A	; 122
    5b98:	55 e4       	ldi	r21, 0x45	; 69
    5b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b9e:	dc 01       	movw	r26, r24
    5ba0:	cb 01       	movw	r24, r22
    5ba2:	8d 8b       	std	Y+21, r24	; 0x15
    5ba4:	9e 8b       	std	Y+22, r25	; 0x16
    5ba6:	af 8b       	std	Y+23, r26	; 0x17
    5ba8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5baa:	6d 89       	ldd	r22, Y+21	; 0x15
    5bac:	7e 89       	ldd	r23, Y+22	; 0x16
    5bae:	8f 89       	ldd	r24, Y+23	; 0x17
    5bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	40 e8       	ldi	r20, 0x80	; 128
    5bb8:	5f e3       	ldi	r21, 0x3F	; 63
    5bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5bbe:	88 23       	and	r24, r24
    5bc0:	2c f4       	brge	.+10     	; 0x5bcc <main+0x1e6>
		__ticks = 1;
    5bc2:	81 e0       	ldi	r24, 0x01	; 1
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	9c 8b       	std	Y+20, r25	; 0x14
    5bc8:	8b 8b       	std	Y+19, r24	; 0x13
    5bca:	3f c0       	rjmp	.+126    	; 0x5c4a <main+0x264>
	else if (__tmp > 65535)
    5bcc:	6d 89       	ldd	r22, Y+21	; 0x15
    5bce:	7e 89       	ldd	r23, Y+22	; 0x16
    5bd0:	8f 89       	ldd	r24, Y+23	; 0x17
    5bd2:	98 8d       	ldd	r25, Y+24	; 0x18
    5bd4:	20 e0       	ldi	r18, 0x00	; 0
    5bd6:	3f ef       	ldi	r19, 0xFF	; 255
    5bd8:	4f e7       	ldi	r20, 0x7F	; 127
    5bda:	57 e4       	ldi	r21, 0x47	; 71
    5bdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5be0:	18 16       	cp	r1, r24
    5be2:	4c f5       	brge	.+82     	; 0x5c36 <main+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5be4:	69 8d       	ldd	r22, Y+25	; 0x19
    5be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bec:	20 e0       	ldi	r18, 0x00	; 0
    5bee:	30 e0       	ldi	r19, 0x00	; 0
    5bf0:	40 e2       	ldi	r20, 0x20	; 32
    5bf2:	51 e4       	ldi	r21, 0x41	; 65
    5bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bf8:	dc 01       	movw	r26, r24
    5bfa:	cb 01       	movw	r24, r22
    5bfc:	bc 01       	movw	r22, r24
    5bfe:	cd 01       	movw	r24, r26
    5c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c04:	dc 01       	movw	r26, r24
    5c06:	cb 01       	movw	r24, r22
    5c08:	9c 8b       	std	Y+20, r25	; 0x14
    5c0a:	8b 8b       	std	Y+19, r24	; 0x13
    5c0c:	0f c0       	rjmp	.+30     	; 0x5c2c <main+0x246>
    5c0e:	80 e9       	ldi	r24, 0x90	; 144
    5c10:	91 e0       	ldi	r25, 0x01	; 1
    5c12:	9a 8b       	std	Y+18, r25	; 0x12
    5c14:	89 8b       	std	Y+17, r24	; 0x11
    5c16:	89 89       	ldd	r24, Y+17	; 0x11
    5c18:	9a 89       	ldd	r25, Y+18	; 0x12
    5c1a:	01 97       	sbiw	r24, 0x01	; 1
    5c1c:	f1 f7       	brne	.-4      	; 0x5c1a <main+0x234>
    5c1e:	9a 8b       	std	Y+18, r25	; 0x12
    5c20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c22:	8b 89       	ldd	r24, Y+19	; 0x13
    5c24:	9c 89       	ldd	r25, Y+20	; 0x14
    5c26:	01 97       	sbiw	r24, 0x01	; 1
    5c28:	9c 8b       	std	Y+20, r25	; 0x14
    5c2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    5c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    5c30:	00 97       	sbiw	r24, 0x00	; 0
    5c32:	69 f7       	brne	.-38     	; 0x5c0e <main+0x228>
    5c34:	ab c0       	rjmp	.+342    	; 0x5d8c <main+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c36:	6d 89       	ldd	r22, Y+21	; 0x15
    5c38:	7e 89       	ldd	r23, Y+22	; 0x16
    5c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    5c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    5c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c42:	dc 01       	movw	r26, r24
    5c44:	cb 01       	movw	r24, r22
    5c46:	9c 8b       	std	Y+20, r25	; 0x14
    5c48:	8b 8b       	std	Y+19, r24	; 0x13
    5c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c4e:	98 8b       	std	Y+16, r25	; 0x10
    5c50:	8f 87       	std	Y+15, r24	; 0x0f
    5c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c54:	98 89       	ldd	r25, Y+16	; 0x10
    5c56:	01 97       	sbiw	r24, 0x01	; 1
    5c58:	f1 f7       	brne	.-4      	; 0x5c56 <main+0x270>
    5c5a:	98 8b       	std	Y+16, r25	; 0x10
    5c5c:	8f 87       	std	Y+15, r24	; 0x0f
    5c5e:	96 c0       	rjmp	.+300    	; 0x5d8c <main+0x3a6>
				_delay_ms(40);
			}
			else{
				DIO_u8SetPinValue(0, 1, 0);
    5c60:	80 e0       	ldi	r24, 0x00	; 0
    5c62:	61 e0       	ldi	r22, 0x01	; 1
    5c64:	40 e0       	ldi	r20, 0x00	; 0
    5c66:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
				
				if(red > 0){
    5c6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c6c:	88 23       	and	r24, r24
    5c6e:	09 f4       	brne	.+2      	; 0x5c72 <main+0x28c>
    5c70:	88 c0       	rjmp	.+272    	; 0x5d82 <main+0x39c>
					LCD_GoToXY(0, 10);
    5c72:	80 e0       	ldi	r24, 0x00	; 0
    5c74:	6a e0       	ldi	r22, 0x0A	; 10
    5c76:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_GoToXY>
					DIO_u8SetPinValue(0, 2, 1);
    5c7a:	80 e0       	ldi	r24, 0x00	; 0
    5c7c:	62 e0       	ldi	r22, 0x02	; 2
    5c7e:	41 e0       	ldi	r20, 0x01	; 1
    5c80:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
					LCD_display_WriteNumber(red--);
    5c84:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c86:	88 2f       	mov	r24, r24
    5c88:	90 e0       	ldi	r25, 0x00	; 0
    5c8a:	a0 e0       	ldi	r26, 0x00	; 0
    5c8c:	b0 e0       	ldi	r27, 0x00	; 0
    5c8e:	2b a5       	ldd	r18, Y+43	; 0x2b
    5c90:	21 50       	subi	r18, 0x01	; 1
    5c92:	2b a7       	std	Y+43, r18	; 0x2b
    5c94:	bc 01       	movw	r22, r24
    5c96:	cd 01       	movw	r24, r26
    5c98:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_display_WriteNumber>
    5c9c:	80 e0       	ldi	r24, 0x00	; 0
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	a0 e2       	ldi	r26, 0x20	; 32
    5ca2:	b2 e4       	ldi	r27, 0x42	; 66
    5ca4:	8b 87       	std	Y+11, r24	; 0x0b
    5ca6:	9c 87       	std	Y+12, r25	; 0x0c
    5ca8:	ad 87       	std	Y+13, r26	; 0x0d
    5caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cb4:	20 e0       	ldi	r18, 0x00	; 0
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	4a e7       	ldi	r20, 0x7A	; 122
    5cba:	55 e4       	ldi	r21, 0x45	; 69
    5cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cc0:	dc 01       	movw	r26, r24
    5cc2:	cb 01       	movw	r24, r22
    5cc4:	8f 83       	std	Y+7, r24	; 0x07
    5cc6:	98 87       	std	Y+8, r25	; 0x08
    5cc8:	a9 87       	std	Y+9, r26	; 0x09
    5cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    5cce:	78 85       	ldd	r23, Y+8	; 0x08
    5cd0:	89 85       	ldd	r24, Y+9	; 0x09
    5cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cd4:	20 e0       	ldi	r18, 0x00	; 0
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	40 e8       	ldi	r20, 0x80	; 128
    5cda:	5f e3       	ldi	r21, 0x3F	; 63
    5cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ce0:	88 23       	and	r24, r24
    5ce2:	2c f4       	brge	.+10     	; 0x5cee <main+0x308>
		__ticks = 1;
    5ce4:	81 e0       	ldi	r24, 0x01	; 1
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	9e 83       	std	Y+6, r25	; 0x06
    5cea:	8d 83       	std	Y+5, r24	; 0x05
    5cec:	3f c0       	rjmp	.+126    	; 0x5d6c <main+0x386>
	else if (__tmp > 65535)
    5cee:	6f 81       	ldd	r22, Y+7	; 0x07
    5cf0:	78 85       	ldd	r23, Y+8	; 0x08
    5cf2:	89 85       	ldd	r24, Y+9	; 0x09
    5cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf6:	20 e0       	ldi	r18, 0x00	; 0
    5cf8:	3f ef       	ldi	r19, 0xFF	; 255
    5cfa:	4f e7       	ldi	r20, 0x7F	; 127
    5cfc:	57 e4       	ldi	r21, 0x47	; 71
    5cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5d02:	18 16       	cp	r1, r24
    5d04:	4c f5       	brge	.+82     	; 0x5d58 <main+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d0e:	20 e0       	ldi	r18, 0x00	; 0
    5d10:	30 e0       	ldi	r19, 0x00	; 0
    5d12:	40 e2       	ldi	r20, 0x20	; 32
    5d14:	51 e4       	ldi	r21, 0x41	; 65
    5d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d1a:	dc 01       	movw	r26, r24
    5d1c:	cb 01       	movw	r24, r22
    5d1e:	bc 01       	movw	r22, r24
    5d20:	cd 01       	movw	r24, r26
    5d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d26:	dc 01       	movw	r26, r24
    5d28:	cb 01       	movw	r24, r22
    5d2a:	9e 83       	std	Y+6, r25	; 0x06
    5d2c:	8d 83       	std	Y+5, r24	; 0x05
    5d2e:	0f c0       	rjmp	.+30     	; 0x5d4e <main+0x368>
    5d30:	80 e9       	ldi	r24, 0x90	; 144
    5d32:	91 e0       	ldi	r25, 0x01	; 1
    5d34:	9c 83       	std	Y+4, r25	; 0x04
    5d36:	8b 83       	std	Y+3, r24	; 0x03
    5d38:	8b 81       	ldd	r24, Y+3	; 0x03
    5d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d3c:	01 97       	sbiw	r24, 0x01	; 1
    5d3e:	f1 f7       	brne	.-4      	; 0x5d3c <main+0x356>
    5d40:	9c 83       	std	Y+4, r25	; 0x04
    5d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d44:	8d 81       	ldd	r24, Y+5	; 0x05
    5d46:	9e 81       	ldd	r25, Y+6	; 0x06
    5d48:	01 97       	sbiw	r24, 0x01	; 1
    5d4a:	9e 83       	std	Y+6, r25	; 0x06
    5d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d50:	9e 81       	ldd	r25, Y+6	; 0x06
    5d52:	00 97       	sbiw	r24, 0x00	; 0
    5d54:	69 f7       	brne	.-38     	; 0x5d30 <main+0x34a>
    5d56:	1a c0       	rjmp	.+52     	; 0x5d8c <main+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d58:	6f 81       	ldd	r22, Y+7	; 0x07
    5d5a:	78 85       	ldd	r23, Y+8	; 0x08
    5d5c:	89 85       	ldd	r24, Y+9	; 0x09
    5d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d64:	dc 01       	movw	r26, r24
    5d66:	cb 01       	movw	r24, r22
    5d68:	9e 83       	std	Y+6, r25	; 0x06
    5d6a:	8d 83       	std	Y+5, r24	; 0x05
    5d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d70:	9a 83       	std	Y+2, r25	; 0x02
    5d72:	89 83       	std	Y+1, r24	; 0x01
    5d74:	89 81       	ldd	r24, Y+1	; 0x01
    5d76:	9a 81       	ldd	r25, Y+2	; 0x02
    5d78:	01 97       	sbiw	r24, 0x01	; 1
    5d7a:	f1 f7       	brne	.-4      	; 0x5d78 <main+0x392>
    5d7c:	9a 83       	std	Y+2, r25	; 0x02
    5d7e:	89 83       	std	Y+1, r24	; 0x01
    5d80:	05 c0       	rjmp	.+10     	; 0x5d8c <main+0x3a6>
					_delay_ms(40);
				}
				else{
					DIO_u8SetPinValue(0, 2, 0);
    5d82:	80 e0       	ldi	r24, 0x00	; 0
    5d84:	62 e0       	ldi	r22, 0x02	; 2
    5d86:	40 e0       	ldi	r20, 0x00	; 0
    5d88:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
				}
			}
		}
		
		if(green == 0 && yellow == 0 && red == 0){
    5d8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d8e:	88 23       	and	r24, r24
    5d90:	09 f0       	breq	.+2      	; 0x5d94 <main+0x3ae>
    5d92:	49 ce       	rjmp	.-878    	; 0x5a26 <main+0x40>
    5d94:	8c a5       	ldd	r24, Y+44	; 0x2c
    5d96:	88 23       	and	r24, r24
    5d98:	09 f0       	breq	.+2      	; 0x5d9c <main+0x3b6>
    5d9a:	45 ce       	rjmp	.-886    	; 0x5a26 <main+0x40>
    5d9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d9e:	88 23       	and	r24, r24
    5da0:	09 f0       	breq	.+2      	; 0x5da4 <main+0x3be>
    5da2:	41 ce       	rjmp	.-894    	; 0x5a26 <main+0x40>
			DIO_u8SetPinValue(0, 0, 0);
    5da4:	80 e0       	ldi	r24, 0x00	; 0
    5da6:	60 e0       	ldi	r22, 0x00	; 0
    5da8:	40 e0       	ldi	r20, 0x00	; 0
    5daa:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
			DIO_u8SetPinValue(0, 1, 0);
    5dae:	80 e0       	ldi	r24, 0x00	; 0
    5db0:	61 e0       	ldi	r22, 0x01	; 1
    5db2:	40 e0       	ldi	r20, 0x00	; 0
    5db4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
			DIO_u8SetPinValue(0, 2, 0);
    5db8:	80 e0       	ldi	r24, 0x00	; 0
    5dba:	62 e0       	ldi	r22, 0x02	; 2
    5dbc:	40 e0       	ldi	r20, 0x00	; 0
    5dbe:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <DIO_u8SetPinValue>
			green = 9;
    5dc2:	89 e0       	ldi	r24, 0x09	; 9
    5dc4:	8d a7       	std	Y+45, r24	; 0x2d
			yellow = 8;
    5dc6:	88 e0       	ldi	r24, 0x08	; 8
    5dc8:	8c a7       	std	Y+44, r24	; 0x2c
			red = 5;
    5dca:	85 e0       	ldi	r24, 0x05	; 5
    5dcc:	8b a7       	std	Y+43, r24	; 0x2b
    5dce:	2b ce       	rjmp	.-938    	; 0x5a26 <main+0x40>

00005dd0 <__divmodhi4>:
    5dd0:	97 fb       	bst	r25, 7
    5dd2:	09 2e       	mov	r0, r25
    5dd4:	07 26       	eor	r0, r23
    5dd6:	0a d0       	rcall	.+20     	; 0x5dec <__divmodhi4_neg1>
    5dd8:	77 fd       	sbrc	r23, 7
    5dda:	04 d0       	rcall	.+8      	; 0x5de4 <__divmodhi4_neg2>
    5ddc:	0c d0       	rcall	.+24     	; 0x5df6 <__udivmodhi4>
    5dde:	06 d0       	rcall	.+12     	; 0x5dec <__divmodhi4_neg1>
    5de0:	00 20       	and	r0, r0
    5de2:	1a f4       	brpl	.+6      	; 0x5dea <__divmodhi4_exit>

00005de4 <__divmodhi4_neg2>:
    5de4:	70 95       	com	r23
    5de6:	61 95       	neg	r22
    5de8:	7f 4f       	sbci	r23, 0xFF	; 255

00005dea <__divmodhi4_exit>:
    5dea:	08 95       	ret

00005dec <__divmodhi4_neg1>:
    5dec:	f6 f7       	brtc	.-4      	; 0x5dea <__divmodhi4_exit>
    5dee:	90 95       	com	r25
    5df0:	81 95       	neg	r24
    5df2:	9f 4f       	sbci	r25, 0xFF	; 255
    5df4:	08 95       	ret

00005df6 <__udivmodhi4>:
    5df6:	aa 1b       	sub	r26, r26
    5df8:	bb 1b       	sub	r27, r27
    5dfa:	51 e1       	ldi	r21, 0x11	; 17
    5dfc:	07 c0       	rjmp	.+14     	; 0x5e0c <__udivmodhi4_ep>

00005dfe <__udivmodhi4_loop>:
    5dfe:	aa 1f       	adc	r26, r26
    5e00:	bb 1f       	adc	r27, r27
    5e02:	a6 17       	cp	r26, r22
    5e04:	b7 07       	cpc	r27, r23
    5e06:	10 f0       	brcs	.+4      	; 0x5e0c <__udivmodhi4_ep>
    5e08:	a6 1b       	sub	r26, r22
    5e0a:	b7 0b       	sbc	r27, r23

00005e0c <__udivmodhi4_ep>:
    5e0c:	88 1f       	adc	r24, r24
    5e0e:	99 1f       	adc	r25, r25
    5e10:	5a 95       	dec	r21
    5e12:	a9 f7       	brne	.-22     	; 0x5dfe <__udivmodhi4_loop>
    5e14:	80 95       	com	r24
    5e16:	90 95       	com	r25
    5e18:	bc 01       	movw	r22, r24
    5e1a:	cd 01       	movw	r24, r26
    5e1c:	08 95       	ret

00005e1e <__prologue_saves__>:
    5e1e:	2f 92       	push	r2
    5e20:	3f 92       	push	r3
    5e22:	4f 92       	push	r4
    5e24:	5f 92       	push	r5
    5e26:	6f 92       	push	r6
    5e28:	7f 92       	push	r7
    5e2a:	8f 92       	push	r8
    5e2c:	9f 92       	push	r9
    5e2e:	af 92       	push	r10
    5e30:	bf 92       	push	r11
    5e32:	cf 92       	push	r12
    5e34:	df 92       	push	r13
    5e36:	ef 92       	push	r14
    5e38:	ff 92       	push	r15
    5e3a:	0f 93       	push	r16
    5e3c:	1f 93       	push	r17
    5e3e:	cf 93       	push	r28
    5e40:	df 93       	push	r29
    5e42:	cd b7       	in	r28, 0x3d	; 61
    5e44:	de b7       	in	r29, 0x3e	; 62
    5e46:	ca 1b       	sub	r28, r26
    5e48:	db 0b       	sbc	r29, r27
    5e4a:	0f b6       	in	r0, 0x3f	; 63
    5e4c:	f8 94       	cli
    5e4e:	de bf       	out	0x3e, r29	; 62
    5e50:	0f be       	out	0x3f, r0	; 63
    5e52:	cd bf       	out	0x3d, r28	; 61
    5e54:	09 94       	ijmp

00005e56 <__epilogue_restores__>:
    5e56:	2a 88       	ldd	r2, Y+18	; 0x12
    5e58:	39 88       	ldd	r3, Y+17	; 0x11
    5e5a:	48 88       	ldd	r4, Y+16	; 0x10
    5e5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e60:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e62:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e64:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e66:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e68:	b9 84       	ldd	r11, Y+9	; 0x09
    5e6a:	c8 84       	ldd	r12, Y+8	; 0x08
    5e6c:	df 80       	ldd	r13, Y+7	; 0x07
    5e6e:	ee 80       	ldd	r14, Y+6	; 0x06
    5e70:	fd 80       	ldd	r15, Y+5	; 0x05
    5e72:	0c 81       	ldd	r16, Y+4	; 0x04
    5e74:	1b 81       	ldd	r17, Y+3	; 0x03
    5e76:	aa 81       	ldd	r26, Y+2	; 0x02
    5e78:	b9 81       	ldd	r27, Y+1	; 0x01
    5e7a:	ce 0f       	add	r28, r30
    5e7c:	d1 1d       	adc	r29, r1
    5e7e:	0f b6       	in	r0, 0x3f	; 63
    5e80:	f8 94       	cli
    5e82:	de bf       	out	0x3e, r29	; 62
    5e84:	0f be       	out	0x3f, r0	; 63
    5e86:	cd bf       	out	0x3d, r28	; 61
    5e88:	ed 01       	movw	r28, r26
    5e8a:	08 95       	ret

00005e8c <strlen>:
    5e8c:	fc 01       	movw	r30, r24
    5e8e:	01 90       	ld	r0, Z+
    5e90:	00 20       	and	r0, r0
    5e92:	e9 f7       	brne	.-6      	; 0x5e8e <strlen+0x2>
    5e94:	80 95       	com	r24
    5e96:	90 95       	com	r25
    5e98:	8e 0f       	add	r24, r30
    5e9a:	9f 1f       	adc	r25, r31
    5e9c:	08 95       	ret

00005e9e <sprintf>:
    5e9e:	ae e0       	ldi	r26, 0x0E	; 14
    5ea0:	b0 e0       	ldi	r27, 0x00	; 0
    5ea2:	e5 e5       	ldi	r30, 0x55	; 85
    5ea4:	ff e2       	ldi	r31, 0x2F	; 47
    5ea6:	0c 94 1d 2f 	jmp	0x5e3a	; 0x5e3a <__prologue_saves__+0x1c>
    5eaa:	0d 89       	ldd	r16, Y+21	; 0x15
    5eac:	1e 89       	ldd	r17, Y+22	; 0x16
    5eae:	86 e0       	ldi	r24, 0x06	; 6
    5eb0:	8c 83       	std	Y+4, r24	; 0x04
    5eb2:	1a 83       	std	Y+2, r17	; 0x02
    5eb4:	09 83       	std	Y+1, r16	; 0x01
    5eb6:	8f ef       	ldi	r24, 0xFF	; 255
    5eb8:	9f e7       	ldi	r25, 0x7F	; 127
    5eba:	9e 83       	std	Y+6, r25	; 0x06
    5ebc:	8d 83       	std	Y+5, r24	; 0x05
    5ebe:	9e 01       	movw	r18, r28
    5ec0:	27 5e       	subi	r18, 0xE7	; 231
    5ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ec4:	ce 01       	movw	r24, r28
    5ec6:	01 96       	adiw	r24, 0x01	; 1
    5ec8:	6f 89       	ldd	r22, Y+23	; 0x17
    5eca:	78 8d       	ldd	r23, Y+24	; 0x18
    5ecc:	a9 01       	movw	r20, r18
    5ece:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <vfprintf>
    5ed2:	2f 81       	ldd	r18, Y+7	; 0x07
    5ed4:	38 85       	ldd	r19, Y+8	; 0x08
    5ed6:	02 0f       	add	r16, r18
    5ed8:	13 1f       	adc	r17, r19
    5eda:	f8 01       	movw	r30, r16
    5edc:	10 82       	st	Z, r1
    5ede:	2e 96       	adiw	r28, 0x0e	; 14
    5ee0:	e4 e0       	ldi	r30, 0x04	; 4
    5ee2:	0c 94 39 2f 	jmp	0x5e72	; 0x5e72 <__epilogue_restores__+0x1c>

00005ee6 <vfprintf>:
    5ee6:	ab e0       	ldi	r26, 0x0B	; 11
    5ee8:	b0 e0       	ldi	r27, 0x00	; 0
    5eea:	e9 e7       	ldi	r30, 0x79	; 121
    5eec:	ff e2       	ldi	r31, 0x2F	; 47
    5eee:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__prologue_saves__>
    5ef2:	3c 01       	movw	r6, r24
    5ef4:	2b 01       	movw	r4, r22
    5ef6:	5a 01       	movw	r10, r20
    5ef8:	fc 01       	movw	r30, r24
    5efa:	17 82       	std	Z+7, r1	; 0x07
    5efc:	16 82       	std	Z+6, r1	; 0x06
    5efe:	83 81       	ldd	r24, Z+3	; 0x03
    5f00:	81 fd       	sbrc	r24, 1
    5f02:	03 c0       	rjmp	.+6      	; 0x5f0a <vfprintf+0x24>
    5f04:	6f ef       	ldi	r22, 0xFF	; 255
    5f06:	7f ef       	ldi	r23, 0xFF	; 255
    5f08:	c6 c1       	rjmp	.+908    	; 0x6296 <vfprintf+0x3b0>
    5f0a:	9a e0       	ldi	r25, 0x0A	; 10
    5f0c:	89 2e       	mov	r8, r25
    5f0e:	1e 01       	movw	r2, r28
    5f10:	08 94       	sec
    5f12:	21 1c       	adc	r2, r1
    5f14:	31 1c       	adc	r3, r1
    5f16:	f3 01       	movw	r30, r6
    5f18:	23 81       	ldd	r18, Z+3	; 0x03
    5f1a:	f2 01       	movw	r30, r4
    5f1c:	23 fd       	sbrc	r18, 3
    5f1e:	85 91       	lpm	r24, Z+
    5f20:	23 ff       	sbrs	r18, 3
    5f22:	81 91       	ld	r24, Z+
    5f24:	2f 01       	movw	r4, r30
    5f26:	88 23       	and	r24, r24
    5f28:	09 f4       	brne	.+2      	; 0x5f2c <vfprintf+0x46>
    5f2a:	b2 c1       	rjmp	.+868    	; 0x6290 <vfprintf+0x3aa>
    5f2c:	85 32       	cpi	r24, 0x25	; 37
    5f2e:	39 f4       	brne	.+14     	; 0x5f3e <vfprintf+0x58>
    5f30:	23 fd       	sbrc	r18, 3
    5f32:	85 91       	lpm	r24, Z+
    5f34:	23 ff       	sbrs	r18, 3
    5f36:	81 91       	ld	r24, Z+
    5f38:	2f 01       	movw	r4, r30
    5f3a:	85 32       	cpi	r24, 0x25	; 37
    5f3c:	29 f4       	brne	.+10     	; 0x5f48 <vfprintf+0x62>
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	b3 01       	movw	r22, r6
    5f42:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    5f46:	e7 cf       	rjmp	.-50     	; 0x5f16 <vfprintf+0x30>
    5f48:	98 2f       	mov	r25, r24
    5f4a:	ff 24       	eor	r15, r15
    5f4c:	ee 24       	eor	r14, r14
    5f4e:	99 24       	eor	r9, r9
    5f50:	ff e1       	ldi	r31, 0x1F	; 31
    5f52:	ff 15       	cp	r31, r15
    5f54:	d0 f0       	brcs	.+52     	; 0x5f8a <vfprintf+0xa4>
    5f56:	9b 32       	cpi	r25, 0x2B	; 43
    5f58:	69 f0       	breq	.+26     	; 0x5f74 <vfprintf+0x8e>
    5f5a:	9c 32       	cpi	r25, 0x2C	; 44
    5f5c:	28 f4       	brcc	.+10     	; 0x5f68 <vfprintf+0x82>
    5f5e:	90 32       	cpi	r25, 0x20	; 32
    5f60:	59 f0       	breq	.+22     	; 0x5f78 <vfprintf+0x92>
    5f62:	93 32       	cpi	r25, 0x23	; 35
    5f64:	91 f4       	brne	.+36     	; 0x5f8a <vfprintf+0xa4>
    5f66:	0e c0       	rjmp	.+28     	; 0x5f84 <vfprintf+0x9e>
    5f68:	9d 32       	cpi	r25, 0x2D	; 45
    5f6a:	49 f0       	breq	.+18     	; 0x5f7e <vfprintf+0x98>
    5f6c:	90 33       	cpi	r25, 0x30	; 48
    5f6e:	69 f4       	brne	.+26     	; 0x5f8a <vfprintf+0xa4>
    5f70:	41 e0       	ldi	r20, 0x01	; 1
    5f72:	24 c0       	rjmp	.+72     	; 0x5fbc <vfprintf+0xd6>
    5f74:	52 e0       	ldi	r21, 0x02	; 2
    5f76:	f5 2a       	or	r15, r21
    5f78:	84 e0       	ldi	r24, 0x04	; 4
    5f7a:	f8 2a       	or	r15, r24
    5f7c:	28 c0       	rjmp	.+80     	; 0x5fce <vfprintf+0xe8>
    5f7e:	98 e0       	ldi	r25, 0x08	; 8
    5f80:	f9 2a       	or	r15, r25
    5f82:	25 c0       	rjmp	.+74     	; 0x5fce <vfprintf+0xe8>
    5f84:	e0 e1       	ldi	r30, 0x10	; 16
    5f86:	fe 2a       	or	r15, r30
    5f88:	22 c0       	rjmp	.+68     	; 0x5fce <vfprintf+0xe8>
    5f8a:	f7 fc       	sbrc	r15, 7
    5f8c:	29 c0       	rjmp	.+82     	; 0x5fe0 <vfprintf+0xfa>
    5f8e:	89 2f       	mov	r24, r25
    5f90:	80 53       	subi	r24, 0x30	; 48
    5f92:	8a 30       	cpi	r24, 0x0A	; 10
    5f94:	70 f4       	brcc	.+28     	; 0x5fb2 <vfprintf+0xcc>
    5f96:	f6 fe       	sbrs	r15, 6
    5f98:	05 c0       	rjmp	.+10     	; 0x5fa4 <vfprintf+0xbe>
    5f9a:	98 9c       	mul	r9, r8
    5f9c:	90 2c       	mov	r9, r0
    5f9e:	11 24       	eor	r1, r1
    5fa0:	98 0e       	add	r9, r24
    5fa2:	15 c0       	rjmp	.+42     	; 0x5fce <vfprintf+0xe8>
    5fa4:	e8 9c       	mul	r14, r8
    5fa6:	e0 2c       	mov	r14, r0
    5fa8:	11 24       	eor	r1, r1
    5faa:	e8 0e       	add	r14, r24
    5fac:	f0 e2       	ldi	r31, 0x20	; 32
    5fae:	ff 2a       	or	r15, r31
    5fb0:	0e c0       	rjmp	.+28     	; 0x5fce <vfprintf+0xe8>
    5fb2:	9e 32       	cpi	r25, 0x2E	; 46
    5fb4:	29 f4       	brne	.+10     	; 0x5fc0 <vfprintf+0xda>
    5fb6:	f6 fc       	sbrc	r15, 6
    5fb8:	6b c1       	rjmp	.+726    	; 0x6290 <vfprintf+0x3aa>
    5fba:	40 e4       	ldi	r20, 0x40	; 64
    5fbc:	f4 2a       	or	r15, r20
    5fbe:	07 c0       	rjmp	.+14     	; 0x5fce <vfprintf+0xe8>
    5fc0:	9c 36       	cpi	r25, 0x6C	; 108
    5fc2:	19 f4       	brne	.+6      	; 0x5fca <vfprintf+0xe4>
    5fc4:	50 e8       	ldi	r21, 0x80	; 128
    5fc6:	f5 2a       	or	r15, r21
    5fc8:	02 c0       	rjmp	.+4      	; 0x5fce <vfprintf+0xe8>
    5fca:	98 36       	cpi	r25, 0x68	; 104
    5fcc:	49 f4       	brne	.+18     	; 0x5fe0 <vfprintf+0xfa>
    5fce:	f2 01       	movw	r30, r4
    5fd0:	23 fd       	sbrc	r18, 3
    5fd2:	95 91       	lpm	r25, Z+
    5fd4:	23 ff       	sbrs	r18, 3
    5fd6:	91 91       	ld	r25, Z+
    5fd8:	2f 01       	movw	r4, r30
    5fda:	99 23       	and	r25, r25
    5fdc:	09 f0       	breq	.+2      	; 0x5fe0 <vfprintf+0xfa>
    5fde:	b8 cf       	rjmp	.-144    	; 0x5f50 <vfprintf+0x6a>
    5fe0:	89 2f       	mov	r24, r25
    5fe2:	85 54       	subi	r24, 0x45	; 69
    5fe4:	83 30       	cpi	r24, 0x03	; 3
    5fe6:	18 f0       	brcs	.+6      	; 0x5fee <vfprintf+0x108>
    5fe8:	80 52       	subi	r24, 0x20	; 32
    5fea:	83 30       	cpi	r24, 0x03	; 3
    5fec:	38 f4       	brcc	.+14     	; 0x5ffc <vfprintf+0x116>
    5fee:	44 e0       	ldi	r20, 0x04	; 4
    5ff0:	50 e0       	ldi	r21, 0x00	; 0
    5ff2:	a4 0e       	add	r10, r20
    5ff4:	b5 1e       	adc	r11, r21
    5ff6:	5f e3       	ldi	r21, 0x3F	; 63
    5ff8:	59 83       	std	Y+1, r21	; 0x01
    5ffa:	0f c0       	rjmp	.+30     	; 0x601a <vfprintf+0x134>
    5ffc:	93 36       	cpi	r25, 0x63	; 99
    5ffe:	31 f0       	breq	.+12     	; 0x600c <vfprintf+0x126>
    6000:	93 37       	cpi	r25, 0x73	; 115
    6002:	79 f0       	breq	.+30     	; 0x6022 <vfprintf+0x13c>
    6004:	93 35       	cpi	r25, 0x53	; 83
    6006:	09 f0       	breq	.+2      	; 0x600a <vfprintf+0x124>
    6008:	56 c0       	rjmp	.+172    	; 0x60b6 <vfprintf+0x1d0>
    600a:	20 c0       	rjmp	.+64     	; 0x604c <vfprintf+0x166>
    600c:	f5 01       	movw	r30, r10
    600e:	80 81       	ld	r24, Z
    6010:	89 83       	std	Y+1, r24	; 0x01
    6012:	42 e0       	ldi	r20, 0x02	; 2
    6014:	50 e0       	ldi	r21, 0x00	; 0
    6016:	a4 0e       	add	r10, r20
    6018:	b5 1e       	adc	r11, r21
    601a:	61 01       	movw	r12, r2
    601c:	01 e0       	ldi	r16, 0x01	; 1
    601e:	10 e0       	ldi	r17, 0x00	; 0
    6020:	12 c0       	rjmp	.+36     	; 0x6046 <vfprintf+0x160>
    6022:	f5 01       	movw	r30, r10
    6024:	c0 80       	ld	r12, Z
    6026:	d1 80       	ldd	r13, Z+1	; 0x01
    6028:	f6 fc       	sbrc	r15, 6
    602a:	03 c0       	rjmp	.+6      	; 0x6032 <vfprintf+0x14c>
    602c:	6f ef       	ldi	r22, 0xFF	; 255
    602e:	7f ef       	ldi	r23, 0xFF	; 255
    6030:	02 c0       	rjmp	.+4      	; 0x6036 <vfprintf+0x150>
    6032:	69 2d       	mov	r22, r9
    6034:	70 e0       	ldi	r23, 0x00	; 0
    6036:	42 e0       	ldi	r20, 0x02	; 2
    6038:	50 e0       	ldi	r21, 0x00	; 0
    603a:	a4 0e       	add	r10, r20
    603c:	b5 1e       	adc	r11, r21
    603e:	c6 01       	movw	r24, r12
    6040:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <strnlen>
    6044:	8c 01       	movw	r16, r24
    6046:	5f e7       	ldi	r21, 0x7F	; 127
    6048:	f5 22       	and	r15, r21
    604a:	14 c0       	rjmp	.+40     	; 0x6074 <vfprintf+0x18e>
    604c:	f5 01       	movw	r30, r10
    604e:	c0 80       	ld	r12, Z
    6050:	d1 80       	ldd	r13, Z+1	; 0x01
    6052:	f6 fc       	sbrc	r15, 6
    6054:	03 c0       	rjmp	.+6      	; 0x605c <vfprintf+0x176>
    6056:	6f ef       	ldi	r22, 0xFF	; 255
    6058:	7f ef       	ldi	r23, 0xFF	; 255
    605a:	02 c0       	rjmp	.+4      	; 0x6060 <vfprintf+0x17a>
    605c:	69 2d       	mov	r22, r9
    605e:	70 e0       	ldi	r23, 0x00	; 0
    6060:	42 e0       	ldi	r20, 0x02	; 2
    6062:	50 e0       	ldi	r21, 0x00	; 0
    6064:	a4 0e       	add	r10, r20
    6066:	b5 1e       	adc	r11, r21
    6068:	c6 01       	movw	r24, r12
    606a:	0e 94 50 31 	call	0x62a0	; 0x62a0 <strnlen_P>
    606e:	8c 01       	movw	r16, r24
    6070:	50 e8       	ldi	r21, 0x80	; 128
    6072:	f5 2a       	or	r15, r21
    6074:	f3 fe       	sbrs	r15, 3
    6076:	07 c0       	rjmp	.+14     	; 0x6086 <vfprintf+0x1a0>
    6078:	1a c0       	rjmp	.+52     	; 0x60ae <vfprintf+0x1c8>
    607a:	80 e2       	ldi	r24, 0x20	; 32
    607c:	90 e0       	ldi	r25, 0x00	; 0
    607e:	b3 01       	movw	r22, r6
    6080:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    6084:	ea 94       	dec	r14
    6086:	8e 2d       	mov	r24, r14
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	08 17       	cp	r16, r24
    608c:	19 07       	cpc	r17, r25
    608e:	a8 f3       	brcs	.-22     	; 0x607a <vfprintf+0x194>
    6090:	0e c0       	rjmp	.+28     	; 0x60ae <vfprintf+0x1c8>
    6092:	f6 01       	movw	r30, r12
    6094:	f7 fc       	sbrc	r15, 7
    6096:	85 91       	lpm	r24, Z+
    6098:	f7 fe       	sbrs	r15, 7
    609a:	81 91       	ld	r24, Z+
    609c:	6f 01       	movw	r12, r30
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	b3 01       	movw	r22, r6
    60a2:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    60a6:	e1 10       	cpse	r14, r1
    60a8:	ea 94       	dec	r14
    60aa:	01 50       	subi	r16, 0x01	; 1
    60ac:	10 40       	sbci	r17, 0x00	; 0
    60ae:	01 15       	cp	r16, r1
    60b0:	11 05       	cpc	r17, r1
    60b2:	79 f7       	brne	.-34     	; 0x6092 <vfprintf+0x1ac>
    60b4:	ea c0       	rjmp	.+468    	; 0x628a <vfprintf+0x3a4>
    60b6:	94 36       	cpi	r25, 0x64	; 100
    60b8:	11 f0       	breq	.+4      	; 0x60be <vfprintf+0x1d8>
    60ba:	99 36       	cpi	r25, 0x69	; 105
    60bc:	69 f5       	brne	.+90     	; 0x6118 <vfprintf+0x232>
    60be:	f7 fe       	sbrs	r15, 7
    60c0:	08 c0       	rjmp	.+16     	; 0x60d2 <vfprintf+0x1ec>
    60c2:	f5 01       	movw	r30, r10
    60c4:	20 81       	ld	r18, Z
    60c6:	31 81       	ldd	r19, Z+1	; 0x01
    60c8:	42 81       	ldd	r20, Z+2	; 0x02
    60ca:	53 81       	ldd	r21, Z+3	; 0x03
    60cc:	84 e0       	ldi	r24, 0x04	; 4
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	0a c0       	rjmp	.+20     	; 0x60e6 <vfprintf+0x200>
    60d2:	f5 01       	movw	r30, r10
    60d4:	80 81       	ld	r24, Z
    60d6:	91 81       	ldd	r25, Z+1	; 0x01
    60d8:	9c 01       	movw	r18, r24
    60da:	44 27       	eor	r20, r20
    60dc:	37 fd       	sbrc	r19, 7
    60de:	40 95       	com	r20
    60e0:	54 2f       	mov	r21, r20
    60e2:	82 e0       	ldi	r24, 0x02	; 2
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	a8 0e       	add	r10, r24
    60e8:	b9 1e       	adc	r11, r25
    60ea:	9f e6       	ldi	r25, 0x6F	; 111
    60ec:	f9 22       	and	r15, r25
    60ee:	57 ff       	sbrs	r21, 7
    60f0:	09 c0       	rjmp	.+18     	; 0x6104 <vfprintf+0x21e>
    60f2:	50 95       	com	r21
    60f4:	40 95       	com	r20
    60f6:	30 95       	com	r19
    60f8:	21 95       	neg	r18
    60fa:	3f 4f       	sbci	r19, 0xFF	; 255
    60fc:	4f 4f       	sbci	r20, 0xFF	; 255
    60fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6100:	e0 e8       	ldi	r30, 0x80	; 128
    6102:	fe 2a       	or	r15, r30
    6104:	ca 01       	movw	r24, r20
    6106:	b9 01       	movw	r22, r18
    6108:	a1 01       	movw	r20, r2
    610a:	2a e0       	ldi	r18, 0x0A	; 10
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	0e 94 92 31 	call	0x6324	; 0x6324 <__ultoa_invert>
    6112:	d8 2e       	mov	r13, r24
    6114:	d2 18       	sub	r13, r2
    6116:	40 c0       	rjmp	.+128    	; 0x6198 <vfprintf+0x2b2>
    6118:	95 37       	cpi	r25, 0x75	; 117
    611a:	29 f4       	brne	.+10     	; 0x6126 <vfprintf+0x240>
    611c:	1f 2d       	mov	r17, r15
    611e:	1f 7e       	andi	r17, 0xEF	; 239
    6120:	2a e0       	ldi	r18, 0x0A	; 10
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	1d c0       	rjmp	.+58     	; 0x6160 <vfprintf+0x27a>
    6126:	1f 2d       	mov	r17, r15
    6128:	19 7f       	andi	r17, 0xF9	; 249
    612a:	9f 36       	cpi	r25, 0x6F	; 111
    612c:	61 f0       	breq	.+24     	; 0x6146 <vfprintf+0x260>
    612e:	90 37       	cpi	r25, 0x70	; 112
    6130:	20 f4       	brcc	.+8      	; 0x613a <vfprintf+0x254>
    6132:	98 35       	cpi	r25, 0x58	; 88
    6134:	09 f0       	breq	.+2      	; 0x6138 <vfprintf+0x252>
    6136:	ac c0       	rjmp	.+344    	; 0x6290 <vfprintf+0x3aa>
    6138:	0f c0       	rjmp	.+30     	; 0x6158 <vfprintf+0x272>
    613a:	90 37       	cpi	r25, 0x70	; 112
    613c:	39 f0       	breq	.+14     	; 0x614c <vfprintf+0x266>
    613e:	98 37       	cpi	r25, 0x78	; 120
    6140:	09 f0       	breq	.+2      	; 0x6144 <vfprintf+0x25e>
    6142:	a6 c0       	rjmp	.+332    	; 0x6290 <vfprintf+0x3aa>
    6144:	04 c0       	rjmp	.+8      	; 0x614e <vfprintf+0x268>
    6146:	28 e0       	ldi	r18, 0x08	; 8
    6148:	30 e0       	ldi	r19, 0x00	; 0
    614a:	0a c0       	rjmp	.+20     	; 0x6160 <vfprintf+0x27a>
    614c:	10 61       	ori	r17, 0x10	; 16
    614e:	14 fd       	sbrc	r17, 4
    6150:	14 60       	ori	r17, 0x04	; 4
    6152:	20 e1       	ldi	r18, 0x10	; 16
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	04 c0       	rjmp	.+8      	; 0x6160 <vfprintf+0x27a>
    6158:	14 fd       	sbrc	r17, 4
    615a:	16 60       	ori	r17, 0x06	; 6
    615c:	20 e1       	ldi	r18, 0x10	; 16
    615e:	32 e0       	ldi	r19, 0x02	; 2
    6160:	17 ff       	sbrs	r17, 7
    6162:	08 c0       	rjmp	.+16     	; 0x6174 <vfprintf+0x28e>
    6164:	f5 01       	movw	r30, r10
    6166:	60 81       	ld	r22, Z
    6168:	71 81       	ldd	r23, Z+1	; 0x01
    616a:	82 81       	ldd	r24, Z+2	; 0x02
    616c:	93 81       	ldd	r25, Z+3	; 0x03
    616e:	44 e0       	ldi	r20, 0x04	; 4
    6170:	50 e0       	ldi	r21, 0x00	; 0
    6172:	08 c0       	rjmp	.+16     	; 0x6184 <vfprintf+0x29e>
    6174:	f5 01       	movw	r30, r10
    6176:	80 81       	ld	r24, Z
    6178:	91 81       	ldd	r25, Z+1	; 0x01
    617a:	bc 01       	movw	r22, r24
    617c:	80 e0       	ldi	r24, 0x00	; 0
    617e:	90 e0       	ldi	r25, 0x00	; 0
    6180:	42 e0       	ldi	r20, 0x02	; 2
    6182:	50 e0       	ldi	r21, 0x00	; 0
    6184:	a4 0e       	add	r10, r20
    6186:	b5 1e       	adc	r11, r21
    6188:	a1 01       	movw	r20, r2
    618a:	0e 94 92 31 	call	0x6324	; 0x6324 <__ultoa_invert>
    618e:	d8 2e       	mov	r13, r24
    6190:	d2 18       	sub	r13, r2
    6192:	8f e7       	ldi	r24, 0x7F	; 127
    6194:	f8 2e       	mov	r15, r24
    6196:	f1 22       	and	r15, r17
    6198:	f6 fe       	sbrs	r15, 6
    619a:	0b c0       	rjmp	.+22     	; 0x61b2 <vfprintf+0x2cc>
    619c:	5e ef       	ldi	r21, 0xFE	; 254
    619e:	f5 22       	and	r15, r21
    61a0:	d9 14       	cp	r13, r9
    61a2:	38 f4       	brcc	.+14     	; 0x61b2 <vfprintf+0x2cc>
    61a4:	f4 fe       	sbrs	r15, 4
    61a6:	07 c0       	rjmp	.+14     	; 0x61b6 <vfprintf+0x2d0>
    61a8:	f2 fc       	sbrc	r15, 2
    61aa:	05 c0       	rjmp	.+10     	; 0x61b6 <vfprintf+0x2d0>
    61ac:	8f ee       	ldi	r24, 0xEF	; 239
    61ae:	f8 22       	and	r15, r24
    61b0:	02 c0       	rjmp	.+4      	; 0x61b6 <vfprintf+0x2d0>
    61b2:	1d 2d       	mov	r17, r13
    61b4:	01 c0       	rjmp	.+2      	; 0x61b8 <vfprintf+0x2d2>
    61b6:	19 2d       	mov	r17, r9
    61b8:	f4 fe       	sbrs	r15, 4
    61ba:	0d c0       	rjmp	.+26     	; 0x61d6 <vfprintf+0x2f0>
    61bc:	fe 01       	movw	r30, r28
    61be:	ed 0d       	add	r30, r13
    61c0:	f1 1d       	adc	r31, r1
    61c2:	80 81       	ld	r24, Z
    61c4:	80 33       	cpi	r24, 0x30	; 48
    61c6:	19 f4       	brne	.+6      	; 0x61ce <vfprintf+0x2e8>
    61c8:	99 ee       	ldi	r25, 0xE9	; 233
    61ca:	f9 22       	and	r15, r25
    61cc:	08 c0       	rjmp	.+16     	; 0x61de <vfprintf+0x2f8>
    61ce:	1f 5f       	subi	r17, 0xFF	; 255
    61d0:	f2 fe       	sbrs	r15, 2
    61d2:	05 c0       	rjmp	.+10     	; 0x61de <vfprintf+0x2f8>
    61d4:	03 c0       	rjmp	.+6      	; 0x61dc <vfprintf+0x2f6>
    61d6:	8f 2d       	mov	r24, r15
    61d8:	86 78       	andi	r24, 0x86	; 134
    61da:	09 f0       	breq	.+2      	; 0x61de <vfprintf+0x2f8>
    61dc:	1f 5f       	subi	r17, 0xFF	; 255
    61de:	0f 2d       	mov	r16, r15
    61e0:	f3 fc       	sbrc	r15, 3
    61e2:	14 c0       	rjmp	.+40     	; 0x620c <vfprintf+0x326>
    61e4:	f0 fe       	sbrs	r15, 0
    61e6:	0f c0       	rjmp	.+30     	; 0x6206 <vfprintf+0x320>
    61e8:	1e 15       	cp	r17, r14
    61ea:	10 f0       	brcs	.+4      	; 0x61f0 <vfprintf+0x30a>
    61ec:	9d 2c       	mov	r9, r13
    61ee:	0b c0       	rjmp	.+22     	; 0x6206 <vfprintf+0x320>
    61f0:	9d 2c       	mov	r9, r13
    61f2:	9e 0c       	add	r9, r14
    61f4:	91 1a       	sub	r9, r17
    61f6:	1e 2d       	mov	r17, r14
    61f8:	06 c0       	rjmp	.+12     	; 0x6206 <vfprintf+0x320>
    61fa:	80 e2       	ldi	r24, 0x20	; 32
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	b3 01       	movw	r22, r6
    6200:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    6204:	1f 5f       	subi	r17, 0xFF	; 255
    6206:	1e 15       	cp	r17, r14
    6208:	c0 f3       	brcs	.-16     	; 0x61fa <vfprintf+0x314>
    620a:	04 c0       	rjmp	.+8      	; 0x6214 <vfprintf+0x32e>
    620c:	1e 15       	cp	r17, r14
    620e:	10 f4       	brcc	.+4      	; 0x6214 <vfprintf+0x32e>
    6210:	e1 1a       	sub	r14, r17
    6212:	01 c0       	rjmp	.+2      	; 0x6216 <vfprintf+0x330>
    6214:	ee 24       	eor	r14, r14
    6216:	04 ff       	sbrs	r16, 4
    6218:	0f c0       	rjmp	.+30     	; 0x6238 <vfprintf+0x352>
    621a:	80 e3       	ldi	r24, 0x30	; 48
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	b3 01       	movw	r22, r6
    6220:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    6224:	02 ff       	sbrs	r16, 2
    6226:	1d c0       	rjmp	.+58     	; 0x6262 <vfprintf+0x37c>
    6228:	01 fd       	sbrc	r16, 1
    622a:	03 c0       	rjmp	.+6      	; 0x6232 <vfprintf+0x34c>
    622c:	88 e7       	ldi	r24, 0x78	; 120
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	0e c0       	rjmp	.+28     	; 0x624e <vfprintf+0x368>
    6232:	88 e5       	ldi	r24, 0x58	; 88
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	0b c0       	rjmp	.+22     	; 0x624e <vfprintf+0x368>
    6238:	80 2f       	mov	r24, r16
    623a:	86 78       	andi	r24, 0x86	; 134
    623c:	91 f0       	breq	.+36     	; 0x6262 <vfprintf+0x37c>
    623e:	01 ff       	sbrs	r16, 1
    6240:	02 c0       	rjmp	.+4      	; 0x6246 <vfprintf+0x360>
    6242:	8b e2       	ldi	r24, 0x2B	; 43
    6244:	01 c0       	rjmp	.+2      	; 0x6248 <vfprintf+0x362>
    6246:	80 e2       	ldi	r24, 0x20	; 32
    6248:	f7 fc       	sbrc	r15, 7
    624a:	8d e2       	ldi	r24, 0x2D	; 45
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	b3 01       	movw	r22, r6
    6250:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    6254:	06 c0       	rjmp	.+12     	; 0x6262 <vfprintf+0x37c>
    6256:	80 e3       	ldi	r24, 0x30	; 48
    6258:	90 e0       	ldi	r25, 0x00	; 0
    625a:	b3 01       	movw	r22, r6
    625c:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    6260:	9a 94       	dec	r9
    6262:	d9 14       	cp	r13, r9
    6264:	c0 f3       	brcs	.-16     	; 0x6256 <vfprintf+0x370>
    6266:	da 94       	dec	r13
    6268:	f1 01       	movw	r30, r2
    626a:	ed 0d       	add	r30, r13
    626c:	f1 1d       	adc	r31, r1
    626e:	80 81       	ld	r24, Z
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	b3 01       	movw	r22, r6
    6274:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    6278:	dd 20       	and	r13, r13
    627a:	a9 f7       	brne	.-22     	; 0x6266 <vfprintf+0x380>
    627c:	06 c0       	rjmp	.+12     	; 0x628a <vfprintf+0x3a4>
    627e:	80 e2       	ldi	r24, 0x20	; 32
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	b3 01       	movw	r22, r6
    6284:	0e 94 66 31 	call	0x62cc	; 0x62cc <fputc>
    6288:	ea 94       	dec	r14
    628a:	ee 20       	and	r14, r14
    628c:	c1 f7       	brne	.-16     	; 0x627e <vfprintf+0x398>
    628e:	43 ce       	rjmp	.-890    	; 0x5f16 <vfprintf+0x30>
    6290:	f3 01       	movw	r30, r6
    6292:	66 81       	ldd	r22, Z+6	; 0x06
    6294:	77 81       	ldd	r23, Z+7	; 0x07
    6296:	cb 01       	movw	r24, r22
    6298:	2b 96       	adiw	r28, 0x0b	; 11
    629a:	e2 e1       	ldi	r30, 0x12	; 18
    629c:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <__epilogue_restores__>

000062a0 <strnlen_P>:
    62a0:	fc 01       	movw	r30, r24
    62a2:	05 90       	lpm	r0, Z+
    62a4:	61 50       	subi	r22, 0x01	; 1
    62a6:	70 40       	sbci	r23, 0x00	; 0
    62a8:	01 10       	cpse	r0, r1
    62aa:	d8 f7       	brcc	.-10     	; 0x62a2 <strnlen_P+0x2>
    62ac:	80 95       	com	r24
    62ae:	90 95       	com	r25
    62b0:	8e 0f       	add	r24, r30
    62b2:	9f 1f       	adc	r25, r31
    62b4:	08 95       	ret

000062b6 <strnlen>:
    62b6:	fc 01       	movw	r30, r24
    62b8:	61 50       	subi	r22, 0x01	; 1
    62ba:	70 40       	sbci	r23, 0x00	; 0
    62bc:	01 90       	ld	r0, Z+
    62be:	01 10       	cpse	r0, r1
    62c0:	d8 f7       	brcc	.-10     	; 0x62b8 <strnlen+0x2>
    62c2:	80 95       	com	r24
    62c4:	90 95       	com	r25
    62c6:	8e 0f       	add	r24, r30
    62c8:	9f 1f       	adc	r25, r31
    62ca:	08 95       	ret

000062cc <fputc>:
    62cc:	0f 93       	push	r16
    62ce:	1f 93       	push	r17
    62d0:	cf 93       	push	r28
    62d2:	df 93       	push	r29
    62d4:	8c 01       	movw	r16, r24
    62d6:	eb 01       	movw	r28, r22
    62d8:	8b 81       	ldd	r24, Y+3	; 0x03
    62da:	81 ff       	sbrs	r24, 1
    62dc:	1b c0       	rjmp	.+54     	; 0x6314 <fputc+0x48>
    62de:	82 ff       	sbrs	r24, 2
    62e0:	0d c0       	rjmp	.+26     	; 0x62fc <fputc+0x30>
    62e2:	2e 81       	ldd	r18, Y+6	; 0x06
    62e4:	3f 81       	ldd	r19, Y+7	; 0x07
    62e6:	8c 81       	ldd	r24, Y+4	; 0x04
    62e8:	9d 81       	ldd	r25, Y+5	; 0x05
    62ea:	28 17       	cp	r18, r24
    62ec:	39 07       	cpc	r19, r25
    62ee:	64 f4       	brge	.+24     	; 0x6308 <fputc+0x3c>
    62f0:	e8 81       	ld	r30, Y
    62f2:	f9 81       	ldd	r31, Y+1	; 0x01
    62f4:	01 93       	st	Z+, r16
    62f6:	f9 83       	std	Y+1, r31	; 0x01
    62f8:	e8 83       	st	Y, r30
    62fa:	06 c0       	rjmp	.+12     	; 0x6308 <fputc+0x3c>
    62fc:	e8 85       	ldd	r30, Y+8	; 0x08
    62fe:	f9 85       	ldd	r31, Y+9	; 0x09
    6300:	80 2f       	mov	r24, r16
    6302:	09 95       	icall
    6304:	89 2b       	or	r24, r25
    6306:	31 f4       	brne	.+12     	; 0x6314 <fputc+0x48>
    6308:	8e 81       	ldd	r24, Y+6	; 0x06
    630a:	9f 81       	ldd	r25, Y+7	; 0x07
    630c:	01 96       	adiw	r24, 0x01	; 1
    630e:	9f 83       	std	Y+7, r25	; 0x07
    6310:	8e 83       	std	Y+6, r24	; 0x06
    6312:	02 c0       	rjmp	.+4      	; 0x6318 <fputc+0x4c>
    6314:	0f ef       	ldi	r16, 0xFF	; 255
    6316:	1f ef       	ldi	r17, 0xFF	; 255
    6318:	c8 01       	movw	r24, r16
    631a:	df 91       	pop	r29
    631c:	cf 91       	pop	r28
    631e:	1f 91       	pop	r17
    6320:	0f 91       	pop	r16
    6322:	08 95       	ret

00006324 <__ultoa_invert>:
    6324:	fa 01       	movw	r30, r20
    6326:	aa 27       	eor	r26, r26
    6328:	28 30       	cpi	r18, 0x08	; 8
    632a:	51 f1       	breq	.+84     	; 0x6380 <__ultoa_invert+0x5c>
    632c:	20 31       	cpi	r18, 0x10	; 16
    632e:	81 f1       	breq	.+96     	; 0x6390 <__ultoa_invert+0x6c>
    6330:	e8 94       	clt
    6332:	6f 93       	push	r22
    6334:	6e 7f       	andi	r22, 0xFE	; 254
    6336:	6e 5f       	subi	r22, 0xFE	; 254
    6338:	7f 4f       	sbci	r23, 0xFF	; 255
    633a:	8f 4f       	sbci	r24, 0xFF	; 255
    633c:	9f 4f       	sbci	r25, 0xFF	; 255
    633e:	af 4f       	sbci	r26, 0xFF	; 255
    6340:	b1 e0       	ldi	r27, 0x01	; 1
    6342:	3e d0       	rcall	.+124    	; 0x63c0 <__ultoa_invert+0x9c>
    6344:	b4 e0       	ldi	r27, 0x04	; 4
    6346:	3c d0       	rcall	.+120    	; 0x63c0 <__ultoa_invert+0x9c>
    6348:	67 0f       	add	r22, r23
    634a:	78 1f       	adc	r23, r24
    634c:	89 1f       	adc	r24, r25
    634e:	9a 1f       	adc	r25, r26
    6350:	a1 1d       	adc	r26, r1
    6352:	68 0f       	add	r22, r24
    6354:	79 1f       	adc	r23, r25
    6356:	8a 1f       	adc	r24, r26
    6358:	91 1d       	adc	r25, r1
    635a:	a1 1d       	adc	r26, r1
    635c:	6a 0f       	add	r22, r26
    635e:	71 1d       	adc	r23, r1
    6360:	81 1d       	adc	r24, r1
    6362:	91 1d       	adc	r25, r1
    6364:	a1 1d       	adc	r26, r1
    6366:	20 d0       	rcall	.+64     	; 0x63a8 <__ultoa_invert+0x84>
    6368:	09 f4       	brne	.+2      	; 0x636c <__ultoa_invert+0x48>
    636a:	68 94       	set
    636c:	3f 91       	pop	r19
    636e:	2a e0       	ldi	r18, 0x0A	; 10
    6370:	26 9f       	mul	r18, r22
    6372:	11 24       	eor	r1, r1
    6374:	30 19       	sub	r19, r0
    6376:	30 5d       	subi	r19, 0xD0	; 208
    6378:	31 93       	st	Z+, r19
    637a:	de f6       	brtc	.-74     	; 0x6332 <__ultoa_invert+0xe>
    637c:	cf 01       	movw	r24, r30
    637e:	08 95       	ret
    6380:	46 2f       	mov	r20, r22
    6382:	47 70       	andi	r20, 0x07	; 7
    6384:	40 5d       	subi	r20, 0xD0	; 208
    6386:	41 93       	st	Z+, r20
    6388:	b3 e0       	ldi	r27, 0x03	; 3
    638a:	0f d0       	rcall	.+30     	; 0x63aa <__ultoa_invert+0x86>
    638c:	c9 f7       	brne	.-14     	; 0x6380 <__ultoa_invert+0x5c>
    638e:	f6 cf       	rjmp	.-20     	; 0x637c <__ultoa_invert+0x58>
    6390:	46 2f       	mov	r20, r22
    6392:	4f 70       	andi	r20, 0x0F	; 15
    6394:	40 5d       	subi	r20, 0xD0	; 208
    6396:	4a 33       	cpi	r20, 0x3A	; 58
    6398:	18 f0       	brcs	.+6      	; 0x63a0 <__ultoa_invert+0x7c>
    639a:	49 5d       	subi	r20, 0xD9	; 217
    639c:	31 fd       	sbrc	r19, 1
    639e:	40 52       	subi	r20, 0x20	; 32
    63a0:	41 93       	st	Z+, r20
    63a2:	02 d0       	rcall	.+4      	; 0x63a8 <__ultoa_invert+0x84>
    63a4:	a9 f7       	brne	.-22     	; 0x6390 <__ultoa_invert+0x6c>
    63a6:	ea cf       	rjmp	.-44     	; 0x637c <__ultoa_invert+0x58>
    63a8:	b4 e0       	ldi	r27, 0x04	; 4
    63aa:	a6 95       	lsr	r26
    63ac:	97 95       	ror	r25
    63ae:	87 95       	ror	r24
    63b0:	77 95       	ror	r23
    63b2:	67 95       	ror	r22
    63b4:	ba 95       	dec	r27
    63b6:	c9 f7       	brne	.-14     	; 0x63aa <__ultoa_invert+0x86>
    63b8:	00 97       	sbiw	r24, 0x00	; 0
    63ba:	61 05       	cpc	r22, r1
    63bc:	71 05       	cpc	r23, r1
    63be:	08 95       	ret
    63c0:	9b 01       	movw	r18, r22
    63c2:	ac 01       	movw	r20, r24
    63c4:	0a 2e       	mov	r0, r26
    63c6:	06 94       	lsr	r0
    63c8:	57 95       	ror	r21
    63ca:	47 95       	ror	r20
    63cc:	37 95       	ror	r19
    63ce:	27 95       	ror	r18
    63d0:	ba 95       	dec	r27
    63d2:	c9 f7       	brne	.-14     	; 0x63c6 <__ultoa_invert+0xa2>
    63d4:	62 0f       	add	r22, r18
    63d6:	73 1f       	adc	r23, r19
    63d8:	84 1f       	adc	r24, r20
    63da:	95 1f       	adc	r25, r21
    63dc:	a0 1d       	adc	r26, r0
    63de:	08 95       	ret

000063e0 <_exit>:
    63e0:	f8 94       	cli

000063e2 <__stop_program>:
    63e2:	ff cf       	rjmp	.-2      	; 0x63e2 <__stop_program>
